-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pp_pipeline_accel_Axi2Mat_Block_split46_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stride_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    stride_empty_n : IN STD_LOGIC;
    stride_read : OUT STD_LOGIC;
    cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cols_empty_n : IN STD_LOGIC;
    cols_read : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    stride_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    stride_out_full_n : IN STD_LOGIC;
    stride_out_write : OUT STD_LOGIC;
    cols_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    cols_out_full_n : IN STD_LOGIC;
    cols_out_write : OUT STD_LOGIC;
    rows_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    rows_out_full_n : IN STD_LOGIC;
    rows_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0) );
end;


architecture behav of pp_pipeline_accel_Axi2Mat_Block_split46_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stride_blk_n : STD_LOGIC;
    signal cols_blk_n : STD_LOGIC;
    signal rows_blk_n : STD_LOGIC;
    signal stride_out_blk_n : STD_LOGIC;
    signal cols_out_blk_n : STD_LOGIC;
    signal rows_out_blk_n : STD_LOGIC;
    signal icmp_ln1165_fu_76_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1165_reg_110 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1166_fu_82_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1166_reg_115 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1166_1_fu_86_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1166_1_reg_120 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_fu_90_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal empty_reg_125 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal cols_tmp_fu_94_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_125 <= empty_fu_90_p1;
                icmp_ln1165_reg_110 <= icmp_ln1165_fu_76_p2;
                trunc_ln1166_1_reg_120 <= trunc_ln1166_1_fu_86_p1;
                trunc_ln1166_reg_115 <= trunc_ln1166_fu_82_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, stride_empty_n, cols_empty_n, rows_empty_n, stride_out_full_n, cols_out_full_n, rows_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (stride_out_full_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, stride_empty_n, cols_empty_n, rows_empty_n, stride_out_full_n, cols_out_full_n, rows_out_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (stride_out_full_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= cols_tmp_fu_94_p3;
    ap_return_1 <= empty_reg_125;

    cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_blk_n <= cols_empty_n;
        else 
            cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cols_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_out_blk_n <= cols_out_full_n;
        else 
            cols_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cols_out_din <= cols_dout;

    cols_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, stride_empty_n, cols_empty_n, rows_empty_n, stride_out_full_n, cols_out_full_n, rows_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (stride_out_full_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_out_write <= ap_const_logic_1;
        else 
            cols_out_write <= ap_const_logic_0;
        end if; 
    end process;


    cols_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, stride_empty_n, cols_empty_n, rows_empty_n, stride_out_full_n, cols_out_full_n, rows_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (stride_out_full_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_read <= ap_const_logic_1;
        else 
            cols_read <= ap_const_logic_0;
        end if; 
    end process;

    cols_tmp_fu_94_p3 <= 
        trunc_ln1166_reg_115 when (icmp_ln1165_reg_110(0) = '1') else 
        trunc_ln1166_1_reg_120;
    empty_fu_90_p1 <= rows_dout(24 - 1 downto 0);
    icmp_ln1165_fu_76_p2 <= "1" when (stride_dout = ap_const_lv32_FFFFFFFF) else "0";

    rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rows_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_out_blk_n <= rows_out_full_n;
        else 
            rows_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    rows_out_din <= rows_dout;

    rows_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, stride_empty_n, cols_empty_n, rows_empty_n, stride_out_full_n, cols_out_full_n, rows_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (stride_out_full_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_out_write <= ap_const_logic_1;
        else 
            rows_out_write <= ap_const_logic_0;
        end if; 
    end process;


    rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, stride_empty_n, cols_empty_n, rows_empty_n, stride_out_full_n, cols_out_full_n, rows_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (stride_out_full_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;


    stride_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, stride_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stride_blk_n <= stride_empty_n;
        else 
            stride_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stride_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, stride_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stride_out_blk_n <= stride_out_full_n;
        else 
            stride_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stride_out_din <= stride_dout;

    stride_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, stride_empty_n, cols_empty_n, rows_empty_n, stride_out_full_n, cols_out_full_n, rows_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (stride_out_full_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stride_out_write <= ap_const_logic_1;
        else 
            stride_out_write <= ap_const_logic_0;
        end if; 
    end process;


    stride_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, stride_empty_n, cols_empty_n, rows_empty_n, stride_out_full_n, cols_out_full_n, rows_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (cols_out_full_n = ap_const_logic_0) or (stride_out_full_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (cols_empty_n = ap_const_logic_0) or (stride_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stride_read <= ap_const_logic_1;
        else 
            stride_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln1166_1_fu_86_p1 <= stride_dout(24 - 1 downto 0);
    trunc_ln1166_fu_82_p1 <= cols_dout(24 - 1 downto 0);
end behav;

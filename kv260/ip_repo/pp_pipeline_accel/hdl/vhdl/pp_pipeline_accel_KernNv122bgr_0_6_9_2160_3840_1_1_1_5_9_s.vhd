-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pp_pipeline_accel_KernNv122bgr_0_6_9_2160_3840_1_1_1_5_9_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgInput_y_466_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    imgInput_y_466_empty_n : IN STD_LOGIC;
    imgInput_y_466_read : OUT STD_LOGIC;
    imgInput_uv_467_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    imgInput_uv_467_empty_n : IN STD_LOGIC;
    imgInput_uv_467_read : OUT STD_LOGIC;
    rgb_mat_468_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    rgb_mat_468_full_n : IN STD_LOGIC;
    rgb_mat_468_write : OUT STD_LOGIC;
    height : IN STD_LOGIC_VECTOR (15 downto 0);
    width : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of pp_pipeline_accel_KernNv122bgr_0_6_9_2160_3840_1_1_1_5_9_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv21_14FE : STD_LOGIC_VECTOR (20 downto 0) := "000000001010011111110";
    constant ap_const_lv21_4000 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_const_lv23_4C4A : STD_LOGIC_VECTOR (22 downto 0) := "00000000100110001001010";
    constant ap_const_lv23_7FCDF3 : STD_LOGIC_VECTOR (22 downto 0) := "11111111100110111110011";
    constant ap_const_lv19_24E : STD_LOGIC_VECTOR (18 downto 0) := "0000000001001001110";
    constant ap_const_lv24_FF97EF : STD_LOGIC_VECTOR (23 downto 0) := "111111111001011111101111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal imgInput_y_466_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal imgInput_uv_467_blk_n : STD_LOGIC;
    signal evenRow_reg_204 : STD_LOGIC_VECTOR (0 downto 0);
    signal evenBlock_2_reg_227 : STD_LOGIC_VECTOR (0 downto 0);
    signal rgb_mat_468_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal icmp_ln4200_reg_779 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4200_reg_779_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_216 : STD_LOGIC_VECTOR (15 downto 0);
    signal evenBlock_2_reg_227_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op55_read_state4 : BOOLEAN;
    signal uvStream_full_n : STD_LOGIC;
    signal uvStream_write : STD_LOGIC;
    signal ap_predicate_op56_write_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal uvStream_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal uvStream_empty_n : STD_LOGIC;
    signal uvStream_read : STD_LOGIC;
    signal ap_predicate_op57_read_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_4_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_249_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_740 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_225_fu_253_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_225_reg_751 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_257_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_3_reg_756 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln4194_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal evenBlock_1_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal evenBlock_1_reg_765 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln4243_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_283_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln4200_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4200_reg_779_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4200_reg_779_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4200_reg_779_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4200_reg_779_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4200_reg_779_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4200_reg_779_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal evenBlock_3_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal evenBlock_3_reg_783 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_reg_788 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_8_reg_794 : STD_LOGIC_VECTOR (15 downto 0);
    signal y1_fu_319_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y1_reg_799 : STD_LOGIC_VECTOR (7 downto 0);
    signal y1_reg_799_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal y1_reg_799_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal y1_reg_799_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal y1_reg_799_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v_fu_344_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_reg_812 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_reg_812_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v_reg_812_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v_reg_812_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal u_fu_354_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal u_reg_819 : STD_LOGIC_VECTOR (7 downto 0);
    signal u_reg_819_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal u_reg_819_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal u_reg_819_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln813_3_fu_378_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln813_fu_381_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln813_reg_856 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln_reg_862 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln738_3_reg_873 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln840_fu_416_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln840_reg_879 : STD_LOGIC_VECTOR (9 downto 0);
    signal Value_uchar_6_fu_486_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Value_uchar_6_reg_884 : STD_LOGIC_VECTOR (7 downto 0);
    signal Value_uchar_7_fu_564_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Value_uchar_7_reg_889 : STD_LOGIC_VECTOR (7 downto 0);
    signal Value_uchar_8_fu_641_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Value_uchar_8_reg_894 : STD_LOGIC_VECTOR (7 downto 0);
    signal evenRow_1_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_5_fu_663_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state13_pp1_stage0_iter0 : BOOLEAN;
    signal icmp_ln4244_1_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state14_pp1_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln4244_1_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state13 : STD_LOGIC;
    signal i_reg_181 : STD_LOGIC_VECTOR (15 downto 0);
    signal evenBlock_reg_192 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_evenBlock_2_phi_fu_230_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal uvPacked_V_fu_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln4244_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln4220_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln4220_fu_314_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_334_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln708_fu_350_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_674_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_684_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_693_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln_fu_396_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_702_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln736_fu_403_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln4224_fu_422_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln814_fu_428_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln814_fu_425_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal Value_int_fu_433_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_439_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln745_fu_463_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln740_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_455_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln740_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln740_fu_472_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Value_uchar_fu_467_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_711_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln738_1_fu_494_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln738_fu_503_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal Value_int_1_fu_516_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_fu_521_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln738_2_fu_507_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln740_1_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_537_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln740_1_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln740_2_fu_550_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Value_uchar_2_fu_545_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln738_1_fu_580_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln840_fu_572_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal Value_int_2_fu_586_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_19_fu_592_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln738_2_fu_583_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln745_3_fu_616_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln840_fu_575_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln740_2_fu_602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_608_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln740_2_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln740_4_fu_627_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Value_uchar_4_fu_621_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_fu_674_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_674_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_674_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_684_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_684_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_693_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_693_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_702_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_711_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_674_ce : STD_LOGIC;
    signal grp_fu_684_ce : STD_LOGIC;
    signal grp_fu_693_ce : STD_LOGIC;
    signal grp_fu_702_ce : STD_LOGIC;
    signal grp_fu_711_ce : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_674_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_702_p20 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_condition_752 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component pp_pipeline_accel_mac_muladd_8ns_14ns_16ns_21_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component pp_pipeline_accel_mac_muladd_8s_16ns_21ns_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component pp_pipeline_accel_mac_muladd_8s_15s_21ns_23_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component pp_pipeline_accel_mac_muladd_8s_19s_21ns_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        din2 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component pp_pipeline_accel_mac_muladd_8s_16s_23s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component pp_pipeline_accel_fifo_w16_d3840_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    mac_muladd_8ns_14ns_16ns_21_4_1_U181 : component pp_pipeline_accel_mac_muladd_8ns_14ns_16ns_21_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        din2_WIDTH => 16,
        dout_WIDTH => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_674_p0,
        din1 => grp_fu_674_p1,
        din2 => grp_fu_674_p2,
        ce => grp_fu_674_ce,
        dout => grp_fu_674_p3);

    mac_muladd_8s_16ns_21ns_23_4_1_U182 : component pp_pipeline_accel_mac_muladd_8s_16ns_21ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 21,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v_fu_344_p2,
        din1 => grp_fu_684_p1,
        din2 => grp_fu_684_p2,
        ce => grp_fu_684_ce,
        dout => grp_fu_684_p3);

    mac_muladd_8s_15s_21ns_23_4_1_U183 : component pp_pipeline_accel_mac_muladd_8s_15s_21ns_23_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 15,
        din2_WIDTH => 21,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => u_fu_354_p2,
        din1 => grp_fu_693_p1,
        din2 => grp_fu_693_p2,
        ce => grp_fu_693_ce,
        dout => grp_fu_693_p3);

    mac_muladd_8s_19s_21ns_22_4_1_U184 : component pp_pipeline_accel_mac_muladd_8s_19s_21ns_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 19,
        din2_WIDTH => 21,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => u_fu_354_p2,
        din1 => ap_const_lv19_24E,
        din2 => grp_fu_702_p2,
        ce => grp_fu_702_ce,
        dout => grp_fu_702_p3);

    mac_muladd_8s_16s_23s_24_4_1_U185 : component pp_pipeline_accel_mac_muladd_8s_16s_23s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 23,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => v_reg_812,
        din1 => grp_fu_711_p1,
        din2 => grp_fu_693_p3,
        ce => grp_fu_711_ce,
        dout => grp_fu_711_p3);

    uvStream_fifo_U : component pp_pipeline_accel_fifo_w16_d3840_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => imgInput_uv_467_dout,
        if_full_n => uvStream_full_n,
        if_write => uvStream_write,
        if_dout => uvStream_dout,
        if_empty_n => uvStream_empty_n,
        if_read => uvStream_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln4194_fu_263_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln4194_fu_263_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = and_ln4243_fu_278_p2) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln4194_fu_263_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state13);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_lv1_1 = and_ln4243_fu_278_p2) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln4194_fu_263_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    evenBlock_2_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln4200_reg_779 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                evenBlock_2_reg_227 <= evenBlock_3_reg_783;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln4194_fu_263_p2 = ap_const_lv1_0))) then 
                evenBlock_2_reg_227 <= evenBlock_reg_192;
            end if; 
        end if;
    end process;

    evenBlock_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                evenBlock_reg_192 <= evenBlock_1_reg_765;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                evenBlock_reg_192 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    evenRow_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                evenRow_reg_204 <= evenRow_1_fu_657_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                evenRow_reg_204 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i_4_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln4243_fu_278_p2) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln4194_fu_263_p2 = ap_const_lv1_1))) then 
                i_4_reg_238 <= ap_const_lv16_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln4244_1_fu_669_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_4_reg_238 <= i_5_fu_663_p2;
            end if; 
        end if;
    end process;

    i_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_reg_181 <= i_3_reg_756;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_181 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    j_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln4200_fu_289_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                j_reg_216 <= j_3_fu_283_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln4194_fu_263_p2 = ap_const_lv1_0))) then 
                j_reg_216 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    uvPacked_V_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_752)) then
                if ((evenRow_reg_204 = ap_const_lv1_1)) then 
                    uvPacked_V_fu_130 <= tmp_V_8_reg_794;
                elsif ((evenRow_reg_204 = ap_const_lv1_0)) then 
                    uvPacked_V_fu_130 <= uvStream_dout;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln4200_reg_779_pp0_iter6_reg = ap_const_lv1_0))) then
                Value_uchar_6_reg_884 <= Value_uchar_6_fu_486_p3;
                Value_uchar_7_reg_889 <= Value_uchar_7_fu_564_p3;
                Value_uchar_8_reg_894 <= Value_uchar_8_fu_641_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln4200_reg_779_pp0_iter5_reg = ap_const_lv1_0))) then
                add_ln840_reg_879 <= add_ln840_fu_416_p2;
                trunc_ln738_3_reg_873 <= grp_fu_702_p3(21 downto 15);
                trunc_ln_reg_862 <= grp_fu_684_p3(22 downto 15);
                    zext_ln813_reg_856(7 downto 0) <= zext_ln813_fu_381_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_225_reg_751 <= empty_225_fu_253_p1;
                empty_reg_740 <= empty_fu_249_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln4194_fu_263_p2 = ap_const_lv1_0))) then
                evenBlock_1_reg_765 <= evenBlock_1_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                evenBlock_2_reg_227_pp0_iter1_reg <= evenBlock_2_reg_227;
                icmp_ln4200_reg_779 <= icmp_ln4200_fu_289_p2;
                icmp_ln4200_reg_779_pp0_iter1_reg <= icmp_ln4200_reg_779;
                tmp_V_reg_788 <= imgInput_y_466_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln4200_fu_289_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                evenBlock_3_reg_783 <= evenBlock_3_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_756 <= i_3_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln4200_reg_779_pp0_iter2_reg <= icmp_ln4200_reg_779_pp0_iter1_reg;
                icmp_ln4200_reg_779_pp0_iter3_reg <= icmp_ln4200_reg_779_pp0_iter2_reg;
                icmp_ln4200_reg_779_pp0_iter4_reg <= icmp_ln4200_reg_779_pp0_iter3_reg;
                icmp_ln4200_reg_779_pp0_iter5_reg <= icmp_ln4200_reg_779_pp0_iter4_reg;
                icmp_ln4200_reg_779_pp0_iter6_reg <= icmp_ln4200_reg_779_pp0_iter5_reg;
                icmp_ln4200_reg_779_pp0_iter7_reg <= icmp_ln4200_reg_779_pp0_iter6_reg;
                u_reg_819_pp0_iter4_reg <= u_reg_819;
                u_reg_819_pp0_iter5_reg <= u_reg_819_pp0_iter4_reg;
                u_reg_819_pp0_iter6_reg <= u_reg_819_pp0_iter5_reg;
                v_reg_812_pp0_iter4_reg <= v_reg_812;
                v_reg_812_pp0_iter5_reg <= v_reg_812_pp0_iter4_reg;
                v_reg_812_pp0_iter6_reg <= v_reg_812_pp0_iter5_reg;
                y1_reg_799_pp0_iter3_reg <= y1_reg_799;
                y1_reg_799_pp0_iter4_reg <= y1_reg_799_pp0_iter3_reg;
                y1_reg_799_pp0_iter5_reg <= y1_reg_799_pp0_iter4_reg;
                y1_reg_799_pp0_iter6_reg <= y1_reg_799_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln4244_1_reg_909 <= icmp_ln4244_1_fu_669_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op55_read_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_8_reg_794 <= imgInput_uv_467_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln4200_reg_779_pp0_iter2_reg = ap_const_lv1_0))) then
                u_reg_819 <= u_fu_354_p2;
                v_reg_812 <= v_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln4200_reg_779_pp0_iter1_reg = ap_const_lv1_0))) then
                y1_reg_799 <= y1_fu_319_p3;
            end if;
        end if;
    end process;
    zext_ln813_reg_856(9 downto 8) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_CS_fsm_state2, icmp_ln4194_fu_263_p2, and_ln4243_fu_278_p2, ap_enable_reg_pp0_iter0, icmp_ln4200_fu_289_p2, ap_enable_reg_pp1_iter0, icmp_ln4244_1_fu_669_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter7, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_lv1_1 = and_ln4243_fu_278_p2) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln4194_fu_263_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_lv1_0 = and_ln4243_fu_278_p2) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln4194_fu_263_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln4200_fu_289_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln4200_fu_289_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln4244_1_fu_669_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln4244_1_fu_669_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    Value_int_1_fu_516_p2 <= std_logic_vector(signed(sext_ln738_fu_503_p1) + signed(zext_ln813_reg_856));
    Value_int_2_fu_586_p2 <= std_logic_vector(signed(sext_ln738_1_fu_580_p1) + signed(sext_ln840_fu_572_p1));
    Value_int_fu_433_p2 <= std_logic_vector(unsigned(add_ln814_fu_428_p2) + unsigned(sext_ln814_fu_425_p1));
    Value_uchar_2_fu_545_p2 <= std_logic_vector(unsigned(trunc_ln738_2_fu_507_p4) + unsigned(y1_reg_799_pp0_iter6_reg));
    Value_uchar_4_fu_621_p2 <= std_logic_vector(unsigned(add_ln745_3_fu_616_p2) + unsigned(shl_ln840_fu_575_p2));
    Value_uchar_6_fu_486_p3 <= 
        select_ln740_fu_472_p3 when (or_ln740_fu_480_p2(0) = '1') else 
        Value_uchar_fu_467_p2;
    Value_uchar_7_fu_564_p3 <= 
        select_ln740_2_fu_550_p3 when (or_ln740_1_fu_558_p2(0) = '1') else 
        Value_uchar_2_fu_545_p2;
    Value_uchar_8_fu_641_p3 <= 
        select_ln740_4_fu_627_p3 when (or_ln740_2_fu_635_p2(0) = '1') else 
        Value_uchar_4_fu_621_p2;
    Value_uchar_fu_467_p2 <= std_logic_vector(unsigned(add_ln745_fu_463_p2) + unsigned(v_reg_812_pp0_iter6_reg));
    add_ln4220_fu_314_p2 <= std_logic_vector(unsigned(tmp_V_reg_788) + unsigned(ap_const_lv8_F0));
    add_ln745_3_fu_616_p2 <= std_logic_vector(unsigned(y1_reg_799_pp0_iter6_reg) + unsigned(sext_ln738_2_fu_583_p1));
    add_ln745_fu_463_p2 <= std_logic_vector(unsigned(y1_reg_799_pp0_iter6_reg) + unsigned(trunc_ln_reg_862));
    add_ln814_fu_428_p2 <= std_logic_vector(signed(sext_ln4224_fu_422_p1) + signed(zext_ln813_reg_856));
    add_ln840_fu_416_p2 <= std_logic_vector(signed(sext_ln736_fu_403_p1) + signed(zext_ln813_fu_381_p1));
    and_ln4243_fu_278_p2 <= (icmp_ln4244_fu_273_p2 and empty_reg_740);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(3);
    ap_CS_fsm_state15 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(imgInput_y_466_empty_n, imgInput_uv_467_empty_n, rgb_mat_468_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, icmp_ln4200_reg_779_pp0_iter7_reg, ap_predicate_op55_read_state4, uvStream_full_n, ap_predicate_op56_write_state4, uvStream_empty_n, ap_predicate_op57_read_state5, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= (((uvStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op57_read_state5 = ap_const_boolean_1)) or ((icmp_ln4200_reg_779_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (rgb_mat_468_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((imgInput_y_466_empty_n = ap_const_logic_0) or ((ap_predicate_op56_write_state4 = ap_const_boolean_1) and (uvStream_full_n = ap_const_logic_0)) or ((ap_predicate_op55_read_state4 = ap_const_boolean_1) and (imgInput_uv_467_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(imgInput_y_466_empty_n, imgInput_uv_467_empty_n, rgb_mat_468_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, icmp_ln4200_reg_779_pp0_iter7_reg, ap_predicate_op55_read_state4, uvStream_full_n, ap_predicate_op56_write_state4, uvStream_empty_n, ap_predicate_op57_read_state5, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= (((uvStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op57_read_state5 = ap_const_boolean_1)) or ((icmp_ln4200_reg_779_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (rgb_mat_468_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((imgInput_y_466_empty_n = ap_const_logic_0) or ((ap_predicate_op56_write_state4 = ap_const_boolean_1) and (uvStream_full_n = ap_const_logic_0)) or ((ap_predicate_op55_read_state4 = ap_const_boolean_1) and (imgInput_uv_467_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(imgInput_y_466_empty_n, imgInput_uv_467_empty_n, rgb_mat_468_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, icmp_ln4200_reg_779_pp0_iter7_reg, ap_predicate_op55_read_state4, uvStream_full_n, ap_predicate_op56_write_state4, uvStream_empty_n, ap_predicate_op57_read_state5, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= (((uvStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op57_read_state5 = ap_const_boolean_1)) or ((icmp_ln4200_reg_779_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (rgb_mat_468_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((imgInput_y_466_empty_n = ap_const_logic_0) or ((ap_predicate_op56_write_state4 = ap_const_boolean_1) and (uvStream_full_n = ap_const_logic_0)) or ((ap_predicate_op55_read_state4 = ap_const_boolean_1) and (imgInput_uv_467_empty_n = ap_const_logic_0)))));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(uvStream_empty_n, icmp_ln4244_1_reg_909, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_11001 <= ((uvStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln4244_1_reg_909 = ap_const_lv1_0));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(uvStream_empty_n, icmp_ln4244_1_reg_909, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_subdone <= ((uvStream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln4244_1_reg_909 = ap_const_lv1_0));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter8_assign_proc : process(rgb_mat_468_full_n, icmp_ln4200_reg_779_pp0_iter7_reg)
    begin
                ap_block_state11_pp0_stage0_iter8 <= ((icmp_ln4200_reg_779_pp0_iter7_reg = ap_const_lv1_0) and (rgb_mat_468_full_n = ap_const_logic_0));
    end process;

        ap_block_state13_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp1_stage0_iter1_assign_proc : process(uvStream_empty_n, icmp_ln4244_1_reg_909)
    begin
                ap_block_state14_pp1_stage0_iter1 <= ((uvStream_empty_n = ap_const_logic_0) and (icmp_ln4244_1_reg_909 = ap_const_lv1_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(imgInput_y_466_empty_n, imgInput_uv_467_empty_n, ap_predicate_op55_read_state4, uvStream_full_n, ap_predicate_op56_write_state4)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((imgInput_y_466_empty_n = ap_const_logic_0) or ((ap_predicate_op56_write_state4 = ap_const_boolean_1) and (uvStream_full_n = ap_const_logic_0)) or ((ap_predicate_op55_read_state4 = ap_const_boolean_1) and (imgInput_uv_467_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(uvStream_empty_n, ap_predicate_op57_read_state5)
    begin
                ap_block_state5_pp0_stage0_iter2 <= ((uvStream_empty_n = ap_const_logic_0) and (ap_predicate_op57_read_state5 = ap_const_boolean_1));
    end process;

        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_752_assign_proc : process(evenBlock_2_reg_227_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
                ap_condition_752 <= ((evenBlock_2_reg_227_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln4200_fu_289_p2)
    begin
        if ((icmp_ln4200_fu_289_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state13_assign_proc : process(icmp_ln4244_1_fu_669_p2)
    begin
        if ((icmp_ln4244_1_fu_669_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_evenBlock_2_phi_fu_230_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, evenBlock_2_reg_227, icmp_ln4200_reg_779, evenBlock_3_reg_783)
    begin
        if (((icmp_ln4200_reg_779 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_evenBlock_2_phi_fu_230_p4 <= evenBlock_3_reg_783;
        else 
            ap_phi_mux_evenBlock_2_phi_fu_230_p4 <= evenBlock_2_reg_227;
        end if; 
    end process;


    ap_predicate_op55_read_state4_assign_proc : process(evenRow_reg_204, evenBlock_2_reg_227)
    begin
                ap_predicate_op55_read_state4 <= ((evenBlock_2_reg_227 = ap_const_lv1_1) and (evenRow_reg_204 = ap_const_lv1_1));
    end process;


    ap_predicate_op56_write_state4_assign_proc : process(evenRow_reg_204, evenBlock_2_reg_227)
    begin
                ap_predicate_op56_write_state4 <= ((evenBlock_2_reg_227 = ap_const_lv1_1) and (evenRow_reg_204 = ap_const_lv1_1));
    end process;


    ap_predicate_op57_read_state5_assign_proc : process(evenRow_reg_204, evenBlock_2_reg_227_pp0_iter1_reg)
    begin
                ap_predicate_op57_read_state5 <= ((evenBlock_2_reg_227_pp0_iter1_reg = ap_const_lv1_1) and (evenRow_reg_204 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_225_fu_253_p1 <= width(1 - 1 downto 0);
    empty_fu_249_p1 <= height(1 - 1 downto 0);
    evenBlock_1_fu_268_p2 <= (evenBlock_reg_192 xor empty_225_reg_751);
    evenBlock_3_fu_294_p2 <= (ap_phi_mux_evenBlock_2_phi_fu_230_p4 xor ap_const_lv1_1);
    evenRow_1_fu_657_p2 <= (evenRow_reg_204 xor ap_const_lv1_1);

    grp_fu_674_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_674_ce <= ap_const_logic_1;
        else 
            grp_fu_674_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_674_p0 <= grp_fu_674_p00(8 - 1 downto 0);
    grp_fu_674_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y1_fu_319_p3),21));
    grp_fu_674_p1 <= ap_const_lv21_14FE(14 - 1 downto 0);
    grp_fu_674_p2 <= ap_const_lv21_4000(16 - 1 downto 0);

    grp_fu_684_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_684_ce <= ap_const_logic_1;
        else 
            grp_fu_684_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_684_p1 <= ap_const_lv23_4C4A(16 - 1 downto 0);
    grp_fu_684_p2 <= zext_ln813_3_fu_378_p1(21 - 1 downto 0);

    grp_fu_693_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_693_ce <= ap_const_logic_1;
        else 
            grp_fu_693_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_693_p1 <= ap_const_lv23_7FCDF3(15 - 1 downto 0);
    grp_fu_693_p2 <= zext_ln813_3_fu_378_p1(21 - 1 downto 0);

    grp_fu_702_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_702_ce <= ap_const_logic_1;
        else 
            grp_fu_702_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_702_p2 <= grp_fu_702_p20(21 - 1 downto 0);
    grp_fu_702_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_674_p3),22));

    grp_fu_711_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_711_ce <= ap_const_logic_1;
        else 
            grp_fu_711_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_711_p1 <= ap_const_lv24_FF97EF(16 - 1 downto 0);
    i_3_fu_257_p2 <= std_logic_vector(unsigned(i_reg_181) + unsigned(ap_const_lv16_1));
    i_5_fu_663_p2 <= std_logic_vector(unsigned(i_4_reg_238) + unsigned(ap_const_lv16_1));
    icmp_ln4194_fu_263_p2 <= "1" when (i_reg_181 = height) else "0";
    icmp_ln4200_fu_289_p2 <= "1" when (j_reg_216 = width) else "0";
    icmp_ln4220_fu_309_p2 <= "1" when (unsigned(tmp_V_reg_788) > unsigned(ap_const_lv8_10)) else "0";
    icmp_ln4244_1_fu_669_p2 <= "1" when (i_4_reg_238 = width) else "0";
    icmp_ln4244_fu_273_p2 <= "0" when (width = ap_const_lv16_0) else "1";
    icmp_ln740_1_fu_531_p2 <= "1" when (tmp_17_fu_521_p4 = ap_const_lv2_1) else "0";
    icmp_ln740_2_fu_602_p2 <= "1" when (signed(tmp_19_fu_592_p4) > signed(ap_const_lv3_0)) else "0";
    icmp_ln740_fu_449_p2 <= "1" when (tmp_fu_439_p4 = ap_const_lv2_1) else "0";

    imgInput_uv_467_blk_n_assign_proc : process(imgInput_uv_467_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, evenRow_reg_204, evenBlock_2_reg_227)
    begin
        if (((evenBlock_2_reg_227 = ap_const_lv1_1) and (evenRow_reg_204 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput_uv_467_blk_n <= imgInput_uv_467_empty_n;
        else 
            imgInput_uv_467_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgInput_uv_467_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op55_read_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op55_read_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput_uv_467_read <= ap_const_logic_1;
        else 
            imgInput_uv_467_read <= ap_const_logic_0;
        end if; 
    end process;


    imgInput_y_466_blk_n_assign_proc : process(imgInput_y_466_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput_y_466_blk_n <= imgInput_y_466_empty_n;
        else 
            imgInput_y_466_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgInput_y_466_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgInput_y_466_read <= ap_const_logic_1;
        else 
            imgInput_y_466_read <= ap_const_logic_0;
        end if; 
    end process;

    j_3_fu_283_p2 <= std_logic_vector(unsigned(j_reg_216) + unsigned(ap_const_lv16_1));
    or_ln740_1_fu_558_p2 <= (tmp_18_fu_537_p3 or icmp_ln740_1_fu_531_p2);
    or_ln740_2_fu_635_p2 <= (tmp_20_fu_608_p3 or icmp_ln740_2_fu_602_p2);
    or_ln740_fu_480_p2 <= (tmp_16_fu_455_p3 or icmp_ln740_fu_449_p2);
    p_Result_s_fu_334_p4 <= uvPacked_V_fu_130(15 downto 8);

    rgb_mat_468_blk_n_assign_proc : process(rgb_mat_468_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, icmp_ln4200_reg_779_pp0_iter7_reg)
    begin
        if (((icmp_ln4200_reg_779_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            rgb_mat_468_blk_n <= rgb_mat_468_full_n;
        else 
            rgb_mat_468_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    rgb_mat_468_din <= ((Value_uchar_6_reg_884 & Value_uchar_7_reg_889) & Value_uchar_8_reg_894);

    rgb_mat_468_write_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln4200_reg_779_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln4200_reg_779_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            rgb_mat_468_write <= ap_const_logic_1;
        else 
            rgb_mat_468_write <= ap_const_logic_0;
        end if; 
    end process;

    select_ln740_2_fu_550_p3 <= 
        ap_const_lv8_FF when (icmp_ln740_1_fu_531_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln740_4_fu_627_p3 <= 
        ap_const_lv8_FF when (icmp_ln740_2_fu_602_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln740_fu_472_p3 <= 
        ap_const_lv8_FF when (icmp_ln740_fu_449_p2(0) = '1') else 
        ap_const_lv8_0;
        sext_ln4224_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(v_reg_812_pp0_iter6_reg),10));

        sext_ln736_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_396_p3),10));

        sext_ln738_1_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln840_reg_879),11));

        sext_ln738_2_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln738_3_reg_873),8));

        sext_ln738_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln738_1_fu_494_p4),10));

        sext_ln814_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_862),10));

        sext_ln840_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln738_3_reg_873),11));

    shl_ln840_fu_575_p2 <= std_logic_vector(shift_left(unsigned(u_reg_819_pp0_iter6_reg),to_integer(unsigned('0' & ap_const_lv8_1(8-1 downto 0)))));
    shl_ln_fu_396_p3 <= (u_reg_819_pp0_iter5_reg & ap_const_lv1_0);
    tmp_16_fu_455_p3 <= Value_int_fu_433_p2(9 downto 9);
    tmp_17_fu_521_p4 <= Value_int_1_fu_516_p2(9 downto 8);
    tmp_18_fu_537_p3 <= Value_int_1_fu_516_p2(9 downto 9);
    tmp_19_fu_592_p4 <= Value_int_2_fu_586_p2(10 downto 8);
    tmp_20_fu_608_p3 <= Value_int_2_fu_586_p2(10 downto 10);
    tmp_fu_439_p4 <= Value_int_fu_433_p2(9 downto 8);
    trunc_ln708_fu_350_p1 <= uvPacked_V_fu_130(8 - 1 downto 0);
    trunc_ln738_1_fu_494_p4 <= grp_fu_711_p3(23 downto 15);
    trunc_ln738_2_fu_507_p4 <= grp_fu_711_p3(22 downto 15);
    u_fu_354_p2 <= (trunc_ln708_fu_350_p1 xor ap_const_lv8_80);

    uvStream_read_assign_proc : process(ap_predicate_op57_read_state5, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, icmp_ln4244_1_reg_909, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln4244_1_reg_909 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op57_read_state5 = ap_const_boolean_1)))) then 
            uvStream_read <= ap_const_logic_1;
        else 
            uvStream_read <= ap_const_logic_0;
        end if; 
    end process;


    uvStream_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op56_write_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op56_write_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            uvStream_write <= ap_const_logic_1;
        else 
            uvStream_write <= ap_const_logic_0;
        end if; 
    end process;

    v_fu_344_p2 <= (p_Result_s_fu_334_p4 xor ap_const_lv8_80);
    y1_fu_319_p3 <= 
        add_ln4220_fu_314_p2 when (icmp_ln4220_fu_309_p2(0) = '1') else 
        ap_const_lv8_0;
    zext_ln813_3_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_674_p3),23));
    zext_ln813_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y1_reg_799_pp0_iter5_reg),10));
end behav;

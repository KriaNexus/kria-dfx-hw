// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pp_pipeline_accel_KernNv122bgr_0_6_9_2160_3840_1_1_1_5_9_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        imgInput_y_466_dout,
        imgInput_y_466_empty_n,
        imgInput_y_466_read,
        imgInput_uv_467_dout,
        imgInput_uv_467_empty_n,
        imgInput_uv_467_read,
        rgb_mat_468_din,
        rgb_mat_468_full_n,
        rgb_mat_468_write,
        height,
        width
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_pp0_stage0 = 6'd4;
parameter    ap_ST_fsm_state12 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state15 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] imgInput_y_466_dout;
input   imgInput_y_466_empty_n;
output   imgInput_y_466_read;
input  [15:0] imgInput_uv_467_dout;
input   imgInput_uv_467_empty_n;
output   imgInput_uv_467_read;
output  [23:0] rgb_mat_468_din;
input   rgb_mat_468_full_n;
output   rgb_mat_468_write;
input  [15:0] height;
input  [15:0] width;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg imgInput_y_466_read;
reg imgInput_uv_467_read;
reg rgb_mat_468_write;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    imgInput_y_466_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    imgInput_uv_467_blk_n;
reg   [0:0] evenRow_reg_204;
reg   [0:0] evenBlock_2_reg_227;
reg    rgb_mat_468_blk_n;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] icmp_ln4200_reg_779;
reg   [0:0] icmp_ln4200_reg_779_pp0_iter7_reg;
reg   [15:0] j_reg_216;
reg   [0:0] evenBlock_2_reg_227_pp0_iter1_reg;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_predicate_op55_read_state4;
wire    uvStream_full_n;
reg    uvStream_write;
reg    ap_predicate_op56_write_state4;
reg    ap_block_state4_pp0_stage0_iter1;
wire   [15:0] uvStream_dout;
wire    uvStream_empty_n;
reg    uvStream_read;
reg    ap_predicate_op57_read_state5;
reg    ap_block_state5_pp0_stage0_iter2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
reg    ap_block_state11_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] i_4_reg_238;
wire   [0:0] empty_fu_249_p1;
reg   [0:0] empty_reg_740;
wire   [0:0] empty_225_fu_253_p1;
reg   [0:0] empty_225_reg_751;
wire   [15:0] i_3_fu_257_p2;
reg   [15:0] i_3_reg_756;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln4194_fu_263_p2;
wire   [0:0] evenBlock_1_fu_268_p2;
reg   [0:0] evenBlock_1_reg_765;
wire   [0:0] and_ln4243_fu_278_p2;
wire   [15:0] j_3_fu_283_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln4200_fu_289_p2;
reg   [0:0] icmp_ln4200_reg_779_pp0_iter1_reg;
reg   [0:0] icmp_ln4200_reg_779_pp0_iter2_reg;
reg   [0:0] icmp_ln4200_reg_779_pp0_iter3_reg;
reg   [0:0] icmp_ln4200_reg_779_pp0_iter4_reg;
reg   [0:0] icmp_ln4200_reg_779_pp0_iter5_reg;
reg   [0:0] icmp_ln4200_reg_779_pp0_iter6_reg;
wire   [0:0] evenBlock_3_fu_294_p2;
reg   [0:0] evenBlock_3_reg_783;
reg   [7:0] tmp_V_reg_788;
reg   [15:0] tmp_V_8_reg_794;
wire   [7:0] y1_fu_319_p3;
reg   [7:0] y1_reg_799;
reg   [7:0] y1_reg_799_pp0_iter3_reg;
reg   [7:0] y1_reg_799_pp0_iter4_reg;
reg   [7:0] y1_reg_799_pp0_iter5_reg;
reg   [7:0] y1_reg_799_pp0_iter6_reg;
wire  signed [7:0] v_fu_344_p2;
reg  signed [7:0] v_reg_812;
reg  signed [7:0] v_reg_812_pp0_iter4_reg;
reg  signed [7:0] v_reg_812_pp0_iter5_reg;
reg  signed [7:0] v_reg_812_pp0_iter6_reg;
wire  signed [7:0] u_fu_354_p2;
reg  signed [7:0] u_reg_819;
reg  signed [7:0] u_reg_819_pp0_iter4_reg;
reg  signed [7:0] u_reg_819_pp0_iter5_reg;
reg  signed [7:0] u_reg_819_pp0_iter6_reg;
wire   [22:0] zext_ln813_3_fu_378_p1;
wire   [9:0] zext_ln813_fu_381_p1;
reg   [9:0] zext_ln813_reg_856;
reg  signed [7:0] trunc_ln_reg_862;
reg  signed [6:0] trunc_ln738_3_reg_873;
wire   [9:0] add_ln840_fu_416_p2;
reg   [9:0] add_ln840_reg_879;
wire   [7:0] Value_uchar_6_fu_486_p3;
reg   [7:0] Value_uchar_6_reg_884;
wire   [7:0] Value_uchar_7_fu_564_p3;
reg   [7:0] Value_uchar_7_reg_889;
wire   [7:0] Value_uchar_8_fu_641_p3;
reg   [7:0] Value_uchar_8_reg_894;
wire   [0:0] evenRow_1_fu_657_p2;
wire    ap_CS_fsm_state12;
wire   [15:0] i_5_fu_663_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state13_pp1_stage0_iter0;
reg   [0:0] icmp_ln4244_1_reg_909;
reg    ap_block_state14_pp1_stage0_iter1;
reg    ap_enable_reg_pp1_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln4244_1_fu_669_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state13;
reg   [15:0] i_reg_181;
reg   [0:0] evenBlock_reg_192;
reg   [0:0] ap_phi_mux_evenBlock_2_phi_fu_230_p4;
reg   [15:0] uvPacked_V_fu_130;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln4244_fu_273_p2;
wire   [0:0] icmp_ln4220_fu_309_p2;
wire   [7:0] add_ln4220_fu_314_p2;
wire   [7:0] p_Result_s_fu_334_p4;
wire   [7:0] trunc_ln708_fu_350_p1;
wire   [20:0] grp_fu_674_p3;
wire  signed [22:0] grp_fu_684_p3;
wire  signed [22:0] grp_fu_693_p3;
wire   [8:0] shl_ln_fu_396_p3;
wire  signed [21:0] grp_fu_702_p3;
wire  signed [9:0] sext_ln736_fu_403_p1;
wire  signed [9:0] sext_ln4224_fu_422_p1;
wire   [9:0] add_ln814_fu_428_p2;
wire  signed [9:0] sext_ln814_fu_425_p1;
wire   [9:0] Value_int_fu_433_p2;
wire   [1:0] tmp_fu_439_p4;
wire   [7:0] add_ln745_fu_463_p2;
wire   [0:0] icmp_ln740_fu_449_p2;
wire   [0:0] tmp_16_fu_455_p3;
wire   [0:0] or_ln740_fu_480_p2;
wire   [7:0] select_ln740_fu_472_p3;
wire   [7:0] Value_uchar_fu_467_p2;
wire  signed [23:0] grp_fu_711_p3;
wire   [8:0] trunc_ln738_1_fu_494_p4;
wire  signed [9:0] sext_ln738_fu_503_p1;
wire   [9:0] Value_int_1_fu_516_p2;
wire   [1:0] tmp_17_fu_521_p4;
wire   [7:0] trunc_ln738_2_fu_507_p4;
wire   [0:0] icmp_ln740_1_fu_531_p2;
wire   [0:0] tmp_18_fu_537_p3;
wire   [0:0] or_ln740_1_fu_558_p2;
wire   [7:0] select_ln740_2_fu_550_p3;
wire   [7:0] Value_uchar_2_fu_545_p2;
wire  signed [10:0] sext_ln738_1_fu_580_p1;
wire  signed [10:0] sext_ln840_fu_572_p1;
wire   [10:0] Value_int_2_fu_586_p2;
wire   [2:0] tmp_19_fu_592_p4;
wire  signed [7:0] sext_ln738_2_fu_583_p1;
wire   [7:0] add_ln745_3_fu_616_p2;
wire   [7:0] shl_ln840_fu_575_p2;
wire   [0:0] icmp_ln740_2_fu_602_p2;
wire   [0:0] tmp_20_fu_608_p3;
wire   [0:0] or_ln740_2_fu_635_p2;
wire   [7:0] select_ln740_4_fu_627_p3;
wire   [7:0] Value_uchar_4_fu_621_p2;
wire    ap_block_pp1_stage0;
wire   [7:0] grp_fu_674_p0;
wire   [13:0] grp_fu_674_p1;
wire   [15:0] grp_fu_674_p2;
wire   [15:0] grp_fu_684_p1;
wire   [20:0] grp_fu_684_p2;
wire  signed [14:0] grp_fu_693_p1;
wire   [20:0] grp_fu_693_p2;
wire   [20:0] grp_fu_702_p2;
wire  signed [15:0] grp_fu_711_p1;
reg    grp_fu_674_ce;
reg    grp_fu_684_ce;
reg    grp_fu_693_ce;
reg    grp_fu_702_ce;
reg    grp_fu_711_ce;
wire    ap_CS_fsm_state15;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [20:0] grp_fu_674_p00;
wire   [21:0] grp_fu_702_p20;
reg    ap_condition_752;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

pp_pipeline_accel_mac_muladd_8ns_14ns_16ns_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 21 ))
mac_muladd_8ns_14ns_16ns_21_4_1_U181(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_674_p0),
    .din1(grp_fu_674_p1),
    .din2(grp_fu_674_p2),
    .ce(grp_fu_674_ce),
    .dout(grp_fu_674_p3)
);

pp_pipeline_accel_mac_muladd_8s_16ns_21ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 23 ))
mac_muladd_8s_16ns_21ns_23_4_1_U182(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v_fu_344_p2),
    .din1(grp_fu_684_p1),
    .din2(grp_fu_684_p2),
    .ce(grp_fu_684_ce),
    .dout(grp_fu_684_p3)
);

pp_pipeline_accel_mac_muladd_8s_15s_21ns_23_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 23 ))
mac_muladd_8s_15s_21ns_23_4_1_U183(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(u_fu_354_p2),
    .din1(grp_fu_693_p1),
    .din2(grp_fu_693_p2),
    .ce(grp_fu_693_ce),
    .dout(grp_fu_693_p3)
);

pp_pipeline_accel_mac_muladd_8s_19s_21ns_22_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 19 ),
    .din2_WIDTH( 21 ),
    .dout_WIDTH( 22 ))
mac_muladd_8s_19s_21ns_22_4_1_U184(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(u_fu_354_p2),
    .din1(19'd590),
    .din2(grp_fu_702_p2),
    .ce(grp_fu_702_ce),
    .dout(grp_fu_702_p3)
);

pp_pipeline_accel_mac_muladd_8s_16s_23s_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 23 ),
    .dout_WIDTH( 24 ))
mac_muladd_8s_16s_23s_24_4_1_U185(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(v_reg_812),
    .din1(grp_fu_711_p1),
    .din2(grp_fu_693_p3),
    .ce(grp_fu_711_ce),
    .dout(grp_fu_711_p3)
);

pp_pipeline_accel_fifo_w16_d3840_A uvStream_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(imgInput_uv_467_dout),
    .if_full_n(uvStream_full_n),
    .if_write(uvStream_write),
    .if_dout(uvStream_dout),
    .if_empty_n(uvStream_empty_n),
    .if_read(uvStream_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4194_fu_263_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4194_fu_263_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'd1 == and_ln4243_fu_278_p2) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln4194_fu_263_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state13))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state13);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'd1 == and_ln4243_fu_278_p2) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln4194_fu_263_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln4200_reg_779 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        evenBlock_2_reg_227 <= evenBlock_3_reg_783;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4194_fu_263_p2 == 1'd0))) begin
        evenBlock_2_reg_227 <= evenBlock_reg_192;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        evenBlock_reg_192 <= evenBlock_1_reg_765;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        evenBlock_reg_192 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        evenRow_reg_204 <= evenRow_1_fu_657_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        evenRow_reg_204 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln4243_fu_278_p2) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln4194_fu_263_p2 == 1'd1))) begin
        i_4_reg_238 <= 16'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln4244_1_fu_669_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_4_reg_238 <= i_5_fu_663_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_reg_181 <= i_3_reg_756;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_181 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln4200_fu_289_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_reg_216 <= j_3_fu_283_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4194_fu_263_p2 == 1'd0))) begin
        j_reg_216 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_752)) begin
        if ((evenRow_reg_204 == 1'd1)) begin
            uvPacked_V_fu_130 <= tmp_V_8_reg_794;
        end else if ((evenRow_reg_204 == 1'd0)) begin
            uvPacked_V_fu_130 <= uvStream_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln4200_reg_779_pp0_iter6_reg == 1'd0))) begin
        Value_uchar_6_reg_884 <= Value_uchar_6_fu_486_p3;
        Value_uchar_7_reg_889 <= Value_uchar_7_fu_564_p3;
        Value_uchar_8_reg_894 <= Value_uchar_8_fu_641_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln4200_reg_779_pp0_iter5_reg == 1'd0))) begin
        add_ln840_reg_879 <= add_ln840_fu_416_p2;
        trunc_ln738_3_reg_873 <= {{grp_fu_702_p3[21:15]}};
        trunc_ln_reg_862 <= {{grp_fu_684_p3[22:15]}};
        zext_ln813_reg_856[7 : 0] <= zext_ln813_fu_381_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_225_reg_751 <= empty_225_fu_253_p1;
        empty_reg_740 <= empty_fu_249_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln4194_fu_263_p2 == 1'd0))) begin
        evenBlock_1_reg_765 <= evenBlock_1_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        evenBlock_2_reg_227_pp0_iter1_reg <= evenBlock_2_reg_227;
        icmp_ln4200_reg_779 <= icmp_ln4200_fu_289_p2;
        icmp_ln4200_reg_779_pp0_iter1_reg <= icmp_ln4200_reg_779;
        tmp_V_reg_788 <= imgInput_y_466_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln4200_fu_289_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        evenBlock_3_reg_783 <= evenBlock_3_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_756 <= i_3_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln4200_reg_779_pp0_iter2_reg <= icmp_ln4200_reg_779_pp0_iter1_reg;
        icmp_ln4200_reg_779_pp0_iter3_reg <= icmp_ln4200_reg_779_pp0_iter2_reg;
        icmp_ln4200_reg_779_pp0_iter4_reg <= icmp_ln4200_reg_779_pp0_iter3_reg;
        icmp_ln4200_reg_779_pp0_iter5_reg <= icmp_ln4200_reg_779_pp0_iter4_reg;
        icmp_ln4200_reg_779_pp0_iter6_reg <= icmp_ln4200_reg_779_pp0_iter5_reg;
        icmp_ln4200_reg_779_pp0_iter7_reg <= icmp_ln4200_reg_779_pp0_iter6_reg;
        u_reg_819_pp0_iter4_reg <= u_reg_819;
        u_reg_819_pp0_iter5_reg <= u_reg_819_pp0_iter4_reg;
        u_reg_819_pp0_iter6_reg <= u_reg_819_pp0_iter5_reg;
        v_reg_812_pp0_iter4_reg <= v_reg_812;
        v_reg_812_pp0_iter5_reg <= v_reg_812_pp0_iter4_reg;
        v_reg_812_pp0_iter6_reg <= v_reg_812_pp0_iter5_reg;
        y1_reg_799_pp0_iter3_reg <= y1_reg_799;
        y1_reg_799_pp0_iter4_reg <= y1_reg_799_pp0_iter3_reg;
        y1_reg_799_pp0_iter5_reg <= y1_reg_799_pp0_iter4_reg;
        y1_reg_799_pp0_iter6_reg <= y1_reg_799_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln4244_1_reg_909 <= icmp_ln4244_1_fu_669_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op55_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_V_8_reg_794 <= imgInput_uv_467_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln4200_reg_779_pp0_iter2_reg == 1'd0))) begin
        u_reg_819 <= u_fu_354_p2;
        v_reg_812 <= v_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln4200_reg_779_pp0_iter1_reg == 1'd0))) begin
        y1_reg_799 <= y1_fu_319_p3;
    end
end

always @ (*) begin
    if ((icmp_ln4200_fu_289_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln4244_1_fu_669_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln4200_reg_779 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_evenBlock_2_phi_fu_230_p4 = evenBlock_3_reg_783;
    end else begin
        ap_phi_mux_evenBlock_2_phi_fu_230_p4 = evenBlock_2_reg_227;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_674_ce = 1'b1;
    end else begin
        grp_fu_674_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_684_ce = 1'b1;
    end else begin
        grp_fu_684_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_693_ce = 1'b1;
    end else begin
        grp_fu_693_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_702_ce = 1'b1;
    end else begin
        grp_fu_702_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_711_ce = 1'b1;
    end else begin
        grp_fu_711_ce = 1'b0;
    end
end

always @ (*) begin
    if (((evenBlock_2_reg_227 == 1'd1) & (evenRow_reg_204 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput_uv_467_blk_n = imgInput_uv_467_empty_n;
    end else begin
        imgInput_uv_467_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op55_read_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput_uv_467_read = 1'b1;
    end else begin
        imgInput_uv_467_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput_y_466_blk_n = imgInput_y_466_empty_n;
    end else begin
        imgInput_y_466_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        imgInput_y_466_read = 1'b1;
    end else begin
        imgInput_y_466_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln4200_reg_779_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        rgb_mat_468_blk_n = rgb_mat_468_full_n;
    end else begin
        rgb_mat_468_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln4200_reg_779_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rgb_mat_468_write = 1'b1;
    end else begin
        rgb_mat_468_write = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln4244_1_reg_909 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op57_read_state5 == 1'b1)))) begin
        uvStream_read = 1'b1;
    end else begin
        uvStream_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op56_write_state4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        uvStream_write = 1'b1;
    end else begin
        uvStream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'd1 == and_ln4243_fu_278_p2) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln4194_fu_263_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'd0 == and_ln4243_fu_278_p2) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln4194_fu_263_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln4200_fu_289_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln4200_fu_289_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln4244_1_fu_669_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln4244_1_fu_669_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Value_int_1_fu_516_p2 = ($signed(sext_ln738_fu_503_p1) + $signed(zext_ln813_reg_856));

assign Value_int_2_fu_586_p2 = ($signed(sext_ln738_1_fu_580_p1) + $signed(sext_ln840_fu_572_p1));

assign Value_int_fu_433_p2 = ($signed(add_ln814_fu_428_p2) + $signed(sext_ln814_fu_425_p1));

assign Value_uchar_2_fu_545_p2 = (trunc_ln738_2_fu_507_p4 + y1_reg_799_pp0_iter6_reg);

assign Value_uchar_4_fu_621_p2 = (add_ln745_3_fu_616_p2 + shl_ln840_fu_575_p2);

assign Value_uchar_6_fu_486_p3 = ((or_ln740_fu_480_p2[0:0] == 1'b1) ? select_ln740_fu_472_p3 : Value_uchar_fu_467_p2);

assign Value_uchar_7_fu_564_p3 = ((or_ln740_1_fu_558_p2[0:0] == 1'b1) ? select_ln740_2_fu_550_p3 : Value_uchar_2_fu_545_p2);

assign Value_uchar_8_fu_641_p3 = ((or_ln740_2_fu_635_p2[0:0] == 1'b1) ? select_ln740_4_fu_627_p3 : Value_uchar_4_fu_621_p2);

assign Value_uchar_fu_467_p2 = ($signed(add_ln745_fu_463_p2) + $signed(v_reg_812_pp0_iter6_reg));

assign add_ln4220_fu_314_p2 = ($signed(tmp_V_reg_788) + $signed(8'd240));

assign add_ln745_3_fu_616_p2 = ($signed(y1_reg_799_pp0_iter6_reg) + $signed(sext_ln738_2_fu_583_p1));

assign add_ln745_fu_463_p2 = ($signed(y1_reg_799_pp0_iter6_reg) + $signed(trunc_ln_reg_862));

assign add_ln814_fu_428_p2 = ($signed(sext_ln4224_fu_422_p1) + $signed(zext_ln813_reg_856));

assign add_ln840_fu_416_p2 = ($signed(sext_ln736_fu_403_p1) + $signed(zext_ln813_fu_381_p1));

assign and_ln4243_fu_278_p2 = (icmp_ln4244_fu_273_p2 & empty_reg_740);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((uvStream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op57_read_state5 == 1'b1)) | ((icmp_ln4200_reg_779_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (rgb_mat_468_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((imgInput_y_466_empty_n == 1'b0) | ((ap_predicate_op56_write_state4 == 1'b1) & (uvStream_full_n == 1'b0)) | ((ap_predicate_op55_read_state4 == 1'b1) & (imgInput_uv_467_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((uvStream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op57_read_state5 == 1'b1)) | ((icmp_ln4200_reg_779_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (rgb_mat_468_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((imgInput_y_466_empty_n == 1'b0) | ((ap_predicate_op56_write_state4 == 1'b1) & (uvStream_full_n == 1'b0)) | ((ap_predicate_op55_read_state4 == 1'b1) & (imgInput_uv_467_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((uvStream_empty_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op57_read_state5 == 1'b1)) | ((icmp_ln4200_reg_779_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (rgb_mat_468_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((imgInput_y_466_empty_n == 1'b0) | ((ap_predicate_op56_write_state4 == 1'b1) & (uvStream_full_n == 1'b0)) | ((ap_predicate_op55_read_state4 == 1'b1) & (imgInput_uv_467_empty_n == 1'b0)))));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((uvStream_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln4244_1_reg_909 == 1'd0));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((uvStream_empty_n == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln4244_1_reg_909 == 1'd0));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter8 = ((icmp_ln4200_reg_779_pp0_iter7_reg == 1'd0) & (rgb_mat_468_full_n == 1'b0));
end

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp1_stage0_iter1 = ((uvStream_empty_n == 1'b0) & (icmp_ln4244_1_reg_909 == 1'd0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((imgInput_y_466_empty_n == 1'b0) | ((ap_predicate_op56_write_state4 == 1'b1) & (uvStream_full_n == 1'b0)) | ((ap_predicate_op55_read_state4 == 1'b1) & (imgInput_uv_467_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter2 = ((uvStream_empty_n == 1'b0) & (ap_predicate_op57_read_state5 == 1'b1));
end

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_752 = ((evenBlock_2_reg_227_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_predicate_op55_read_state4 = ((evenBlock_2_reg_227 == 1'd1) & (evenRow_reg_204 == 1'd1));
end

always @ (*) begin
    ap_predicate_op56_write_state4 = ((evenBlock_2_reg_227 == 1'd1) & (evenRow_reg_204 == 1'd1));
end

always @ (*) begin
    ap_predicate_op57_read_state5 = ((evenBlock_2_reg_227_pp0_iter1_reg == 1'd1) & (evenRow_reg_204 == 1'd0));
end

assign empty_225_fu_253_p1 = width[0:0];

assign empty_fu_249_p1 = height[0:0];

assign evenBlock_1_fu_268_p2 = (evenBlock_reg_192 ^ empty_225_reg_751);

assign evenBlock_3_fu_294_p2 = (ap_phi_mux_evenBlock_2_phi_fu_230_p4 ^ 1'd1);

assign evenRow_1_fu_657_p2 = (evenRow_reg_204 ^ 1'd1);

assign grp_fu_674_p0 = grp_fu_674_p00;

assign grp_fu_674_p00 = y1_fu_319_p3;

assign grp_fu_674_p1 = 21'd5374;

assign grp_fu_674_p2 = 21'd16384;

assign grp_fu_684_p1 = 23'd19530;

assign grp_fu_684_p2 = zext_ln813_3_fu_378_p1;

assign grp_fu_693_p1 = 23'd8375795;

assign grp_fu_693_p2 = zext_ln813_3_fu_378_p1;

assign grp_fu_702_p2 = grp_fu_702_p20;

assign grp_fu_702_p20 = grp_fu_674_p3;

assign grp_fu_711_p1 = 24'd16750575;

assign i_3_fu_257_p2 = (i_reg_181 + 16'd1);

assign i_5_fu_663_p2 = (i_4_reg_238 + 16'd1);

assign icmp_ln4194_fu_263_p2 = ((i_reg_181 == height) ? 1'b1 : 1'b0);

assign icmp_ln4200_fu_289_p2 = ((j_reg_216 == width) ? 1'b1 : 1'b0);

assign icmp_ln4220_fu_309_p2 = ((tmp_V_reg_788 > 8'd16) ? 1'b1 : 1'b0);

assign icmp_ln4244_1_fu_669_p2 = ((i_4_reg_238 == width) ? 1'b1 : 1'b0);

assign icmp_ln4244_fu_273_p2 = ((width != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln740_1_fu_531_p2 = ((tmp_17_fu_521_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln740_2_fu_602_p2 = (($signed(tmp_19_fu_592_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_ln740_fu_449_p2 = ((tmp_fu_439_p4 == 2'd1) ? 1'b1 : 1'b0);

assign j_3_fu_283_p2 = (j_reg_216 + 16'd1);

assign or_ln740_1_fu_558_p2 = (tmp_18_fu_537_p3 | icmp_ln740_1_fu_531_p2);

assign or_ln740_2_fu_635_p2 = (tmp_20_fu_608_p3 | icmp_ln740_2_fu_602_p2);

assign or_ln740_fu_480_p2 = (tmp_16_fu_455_p3 | icmp_ln740_fu_449_p2);

assign p_Result_s_fu_334_p4 = {{uvPacked_V_fu_130[15:8]}};

assign rgb_mat_468_din = {{{Value_uchar_6_reg_884}, {Value_uchar_7_reg_889}}, {Value_uchar_8_reg_894}};

assign select_ln740_2_fu_550_p3 = ((icmp_ln740_1_fu_531_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln740_4_fu_627_p3 = ((icmp_ln740_2_fu_602_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln740_fu_472_p3 = ((icmp_ln740_fu_449_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign sext_ln4224_fu_422_p1 = v_reg_812_pp0_iter6_reg;

assign sext_ln736_fu_403_p1 = $signed(shl_ln_fu_396_p3);

assign sext_ln738_1_fu_580_p1 = $signed(add_ln840_reg_879);

assign sext_ln738_2_fu_583_p1 = trunc_ln738_3_reg_873;

assign sext_ln738_fu_503_p1 = $signed(trunc_ln738_1_fu_494_p4);

assign sext_ln814_fu_425_p1 = trunc_ln_reg_862;

assign sext_ln840_fu_572_p1 = trunc_ln738_3_reg_873;

assign shl_ln840_fu_575_p2 = u_reg_819_pp0_iter6_reg << 8'd1;

assign shl_ln_fu_396_p3 = {{u_reg_819_pp0_iter5_reg}, {1'd0}};

assign tmp_16_fu_455_p3 = Value_int_fu_433_p2[32'd9];

assign tmp_17_fu_521_p4 = {{Value_int_1_fu_516_p2[9:8]}};

assign tmp_18_fu_537_p3 = Value_int_1_fu_516_p2[32'd9];

assign tmp_19_fu_592_p4 = {{Value_int_2_fu_586_p2[10:8]}};

assign tmp_20_fu_608_p3 = Value_int_2_fu_586_p2[32'd10];

assign tmp_fu_439_p4 = {{Value_int_fu_433_p2[9:8]}};

assign trunc_ln708_fu_350_p1 = uvPacked_V_fu_130[7:0];

assign trunc_ln738_1_fu_494_p4 = {{grp_fu_711_p3[23:15]}};

assign trunc_ln738_2_fu_507_p4 = {{grp_fu_711_p3[22:15]}};

assign u_fu_354_p2 = (trunc_ln708_fu_350_p1 ^ 8'd128);

assign v_fu_344_p2 = (p_Result_s_fu_334_p4 ^ 8'd128);

assign y1_fu_319_p3 = ((icmp_ln4220_fu_309_p2[0:0] == 1'b1) ? add_ln4220_fu_314_p2 : 8'd0);

assign zext_ln813_3_fu_378_p1 = grp_fu_674_p3;

assign zext_ln813_fu_381_p1 = y1_reg_799_pp0_iter5_reg;

always @ (posedge ap_clk) begin
    zext_ln813_reg_856[9:8] <= 2'b00;
end

endmodule //pp_pipeline_accel_KernNv122bgr_0_6_9_2160_3840_1_1_1_5_9_s

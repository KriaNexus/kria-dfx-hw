// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pp_pipeline_accel_pp_pipeline_accel_entry33 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        img_inp_y,
        img_inp_uv,
        img_out,
        params,
        in_img_width,
        in_img_height,
        in_img_linestride,
        out_img_width,
        out_img_height,
        out_img_linestride,
        img_inp_y_out_din,
        img_inp_y_out_full_n,
        img_inp_y_out_write,
        img_inp_uv_out_din,
        img_inp_uv_out_full_n,
        img_inp_uv_out_write,
        img_out_out_din,
        img_out_out_full_n,
        img_out_out_write,
        params_out_din,
        params_out_full_n,
        params_out_write,
        in_img_width_out_din,
        in_img_width_out_full_n,
        in_img_width_out_write,
        in_img_height_out_din,
        in_img_height_out_full_n,
        in_img_height_out_write,
        in_img_linestride_out_din,
        in_img_linestride_out_full_n,
        in_img_linestride_out_write,
        in_img_linestride_out1_din,
        in_img_linestride_out1_full_n,
        in_img_linestride_out1_write,
        out_img_width_out_din,
        out_img_width_out_full_n,
        out_img_width_out_write,
        out_img_height_out_din,
        out_img_height_out_full_n,
        out_img_height_out_write,
        out_img_linestride_out_din,
        out_img_linestride_out_full_n,
        out_img_linestride_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] img_inp_y;
input  [63:0] img_inp_uv;
input  [63:0] img_out;
input  [63:0] params;
input  [31:0] in_img_width;
input  [31:0] in_img_height;
input  [31:0] in_img_linestride;
input  [31:0] out_img_width;
input  [31:0] out_img_height;
input  [31:0] out_img_linestride;
output  [63:0] img_inp_y_out_din;
input   img_inp_y_out_full_n;
output   img_inp_y_out_write;
output  [63:0] img_inp_uv_out_din;
input   img_inp_uv_out_full_n;
output   img_inp_uv_out_write;
output  [63:0] img_out_out_din;
input   img_out_out_full_n;
output   img_out_out_write;
output  [63:0] params_out_din;
input   params_out_full_n;
output   params_out_write;
output  [31:0] in_img_width_out_din;
input   in_img_width_out_full_n;
output   in_img_width_out_write;
output  [31:0] in_img_height_out_din;
input   in_img_height_out_full_n;
output   in_img_height_out_write;
output  [31:0] in_img_linestride_out_din;
input   in_img_linestride_out_full_n;
output   in_img_linestride_out_write;
output  [31:0] in_img_linestride_out1_din;
input   in_img_linestride_out1_full_n;
output   in_img_linestride_out1_write;
output  [31:0] out_img_width_out_din;
input   out_img_width_out_full_n;
output   out_img_width_out_write;
output  [31:0] out_img_height_out_din;
input   out_img_height_out_full_n;
output   out_img_height_out_write;
output  [31:0] out_img_linestride_out_din;
input   out_img_linestride_out_full_n;
output   out_img_linestride_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg img_inp_y_out_write;
reg img_inp_uv_out_write;
reg img_out_out_write;
reg params_out_write;
reg in_img_width_out_write;
reg in_img_height_out_write;
reg in_img_linestride_out_write;
reg in_img_linestride_out1_write;
reg out_img_width_out_write;
reg out_img_height_out_write;
reg out_img_linestride_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    img_inp_y_out_blk_n;
reg    img_inp_uv_out_blk_n;
reg    img_out_out_blk_n;
reg    params_out_blk_n;
reg    in_img_width_out_blk_n;
reg    in_img_height_out_blk_n;
reg    in_img_linestride_out_blk_n;
reg    in_img_linestride_out1_blk_n;
reg    out_img_width_out_blk_n;
reg    out_img_height_out_blk_n;
reg    out_img_linestride_out_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((out_img_linestride_out_full_n == 1'b0) | (out_img_height_out_full_n == 1'b0) | (out_img_width_out_full_n == 1'b0) | (real_start == 1'b0) | (in_img_linestride_out1_full_n == 1'b0) | (in_img_linestride_out_full_n == 1'b0) | (in_img_height_out_full_n == 1'b0) | (in_img_width_out_full_n == 1'b0) | (params_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_uv_out_full_n == 1'b0) | (img_inp_y_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((out_img_linestride_out_full_n == 1'b0) | (out_img_height_out_full_n == 1'b0) | (out_img_width_out_full_n == 1'b0) | (real_start == 1'b0) | (in_img_linestride_out1_full_n == 1'b0) | (in_img_linestride_out_full_n == 1'b0) | (in_img_height_out_full_n == 1'b0) | (in_img_width_out_full_n == 1'b0) | (params_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_uv_out_full_n == 1'b0) | (img_inp_y_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inp_uv_out_blk_n = img_inp_uv_out_full_n;
    end else begin
        img_inp_uv_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_img_linestride_out_full_n == 1'b0) | (out_img_height_out_full_n == 1'b0) | (out_img_width_out_full_n == 1'b0) | (real_start == 1'b0) | (in_img_linestride_out1_full_n == 1'b0) | (in_img_linestride_out_full_n == 1'b0) | (in_img_height_out_full_n == 1'b0) | (in_img_width_out_full_n == 1'b0) | (params_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_uv_out_full_n == 1'b0) | (img_inp_y_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inp_uv_out_write = 1'b1;
    end else begin
        img_inp_uv_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inp_y_out_blk_n = img_inp_y_out_full_n;
    end else begin
        img_inp_y_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_img_linestride_out_full_n == 1'b0) | (out_img_height_out_full_n == 1'b0) | (out_img_width_out_full_n == 1'b0) | (real_start == 1'b0) | (in_img_linestride_out1_full_n == 1'b0) | (in_img_linestride_out_full_n == 1'b0) | (in_img_height_out_full_n == 1'b0) | (in_img_width_out_full_n == 1'b0) | (params_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_uv_out_full_n == 1'b0) | (img_inp_y_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_inp_y_out_write = 1'b1;
    end else begin
        img_inp_y_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_out_out_blk_n = img_out_out_full_n;
    end else begin
        img_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_img_linestride_out_full_n == 1'b0) | (out_img_height_out_full_n == 1'b0) | (out_img_width_out_full_n == 1'b0) | (real_start == 1'b0) | (in_img_linestride_out1_full_n == 1'b0) | (in_img_linestride_out_full_n == 1'b0) | (in_img_height_out_full_n == 1'b0) | (in_img_width_out_full_n == 1'b0) | (params_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_uv_out_full_n == 1'b0) | (img_inp_y_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_out_out_write = 1'b1;
    end else begin
        img_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_img_height_out_blk_n = in_img_height_out_full_n;
    end else begin
        in_img_height_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_img_linestride_out_full_n == 1'b0) | (out_img_height_out_full_n == 1'b0) | (out_img_width_out_full_n == 1'b0) | (real_start == 1'b0) | (in_img_linestride_out1_full_n == 1'b0) | (in_img_linestride_out_full_n == 1'b0) | (in_img_height_out_full_n == 1'b0) | (in_img_width_out_full_n == 1'b0) | (params_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_uv_out_full_n == 1'b0) | (img_inp_y_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_img_height_out_write = 1'b1;
    end else begin
        in_img_height_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_img_linestride_out1_blk_n = in_img_linestride_out1_full_n;
    end else begin
        in_img_linestride_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_img_linestride_out_full_n == 1'b0) | (out_img_height_out_full_n == 1'b0) | (out_img_width_out_full_n == 1'b0) | (real_start == 1'b0) | (in_img_linestride_out1_full_n == 1'b0) | (in_img_linestride_out_full_n == 1'b0) | (in_img_height_out_full_n == 1'b0) | (in_img_width_out_full_n == 1'b0) | (params_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_uv_out_full_n == 1'b0) | (img_inp_y_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_img_linestride_out1_write = 1'b1;
    end else begin
        in_img_linestride_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_img_linestride_out_blk_n = in_img_linestride_out_full_n;
    end else begin
        in_img_linestride_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_img_linestride_out_full_n == 1'b0) | (out_img_height_out_full_n == 1'b0) | (out_img_width_out_full_n == 1'b0) | (real_start == 1'b0) | (in_img_linestride_out1_full_n == 1'b0) | (in_img_linestride_out_full_n == 1'b0) | (in_img_height_out_full_n == 1'b0) | (in_img_width_out_full_n == 1'b0) | (params_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_uv_out_full_n == 1'b0) | (img_inp_y_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_img_linestride_out_write = 1'b1;
    end else begin
        in_img_linestride_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_img_width_out_blk_n = in_img_width_out_full_n;
    end else begin
        in_img_width_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_img_linestride_out_full_n == 1'b0) | (out_img_height_out_full_n == 1'b0) | (out_img_width_out_full_n == 1'b0) | (real_start == 1'b0) | (in_img_linestride_out1_full_n == 1'b0) | (in_img_linestride_out_full_n == 1'b0) | (in_img_height_out_full_n == 1'b0) | (in_img_width_out_full_n == 1'b0) | (params_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_uv_out_full_n == 1'b0) | (img_inp_y_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_img_width_out_write = 1'b1;
    end else begin
        in_img_width_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_img_linestride_out_full_n == 1'b0) | (out_img_height_out_full_n == 1'b0) | (out_img_width_out_full_n == 1'b0) | (real_start == 1'b0) | (in_img_linestride_out1_full_n == 1'b0) | (in_img_linestride_out_full_n == 1'b0) | (in_img_height_out_full_n == 1'b0) | (in_img_width_out_full_n == 1'b0) | (params_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_uv_out_full_n == 1'b0) | (img_inp_y_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_img_height_out_blk_n = out_img_height_out_full_n;
    end else begin
        out_img_height_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_img_linestride_out_full_n == 1'b0) | (out_img_height_out_full_n == 1'b0) | (out_img_width_out_full_n == 1'b0) | (real_start == 1'b0) | (in_img_linestride_out1_full_n == 1'b0) | (in_img_linestride_out_full_n == 1'b0) | (in_img_height_out_full_n == 1'b0) | (in_img_width_out_full_n == 1'b0) | (params_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_uv_out_full_n == 1'b0) | (img_inp_y_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_img_height_out_write = 1'b1;
    end else begin
        out_img_height_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_img_linestride_out_blk_n = out_img_linestride_out_full_n;
    end else begin
        out_img_linestride_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_img_linestride_out_full_n == 1'b0) | (out_img_height_out_full_n == 1'b0) | (out_img_width_out_full_n == 1'b0) | (real_start == 1'b0) | (in_img_linestride_out1_full_n == 1'b0) | (in_img_linestride_out_full_n == 1'b0) | (in_img_height_out_full_n == 1'b0) | (in_img_width_out_full_n == 1'b0) | (params_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_uv_out_full_n == 1'b0) | (img_inp_y_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_img_linestride_out_write = 1'b1;
    end else begin
        out_img_linestride_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_img_width_out_blk_n = out_img_width_out_full_n;
    end else begin
        out_img_width_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_img_linestride_out_full_n == 1'b0) | (out_img_height_out_full_n == 1'b0) | (out_img_width_out_full_n == 1'b0) | (real_start == 1'b0) | (in_img_linestride_out1_full_n == 1'b0) | (in_img_linestride_out_full_n == 1'b0) | (in_img_height_out_full_n == 1'b0) | (in_img_width_out_full_n == 1'b0) | (params_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_uv_out_full_n == 1'b0) | (img_inp_y_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_img_width_out_write = 1'b1;
    end else begin
        out_img_width_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        params_out_blk_n = params_out_full_n;
    end else begin
        params_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((out_img_linestride_out_full_n == 1'b0) | (out_img_height_out_full_n == 1'b0) | (out_img_width_out_full_n == 1'b0) | (real_start == 1'b0) | (in_img_linestride_out1_full_n == 1'b0) | (in_img_linestride_out_full_n == 1'b0) | (in_img_height_out_full_n == 1'b0) | (in_img_width_out_full_n == 1'b0) | (params_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_uv_out_full_n == 1'b0) | (img_inp_y_out_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        params_out_write = 1'b1;
    end else begin
        params_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((out_img_linestride_out_full_n == 1'b0) | (out_img_height_out_full_n == 1'b0) | (out_img_width_out_full_n == 1'b0) | (real_start == 1'b0) | (in_img_linestride_out1_full_n == 1'b0) | (in_img_linestride_out_full_n == 1'b0) | (in_img_height_out_full_n == 1'b0) | (in_img_width_out_full_n == 1'b0) | (params_out_full_n == 1'b0) | (img_out_out_full_n == 1'b0) | (img_inp_uv_out_full_n == 1'b0) | (img_inp_y_out_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign img_inp_uv_out_din = img_inp_uv;

assign img_inp_y_out_din = img_inp_y;

assign img_out_out_din = img_out;

assign in_img_height_out_din = in_img_height;

assign in_img_linestride_out1_din = in_img_linestride;

assign in_img_linestride_out_din = in_img_linestride;

assign in_img_width_out_din = in_img_width;

assign out_img_height_out_din = out_img_height;

assign out_img_linestride_out_din = out_img_linestride;

assign out_img_width_out_din = out_img_width;

assign params_out_din = params;

assign start_out = real_start;

endmodule //pp_pipeline_accel_pp_pipeline_accel_entry33

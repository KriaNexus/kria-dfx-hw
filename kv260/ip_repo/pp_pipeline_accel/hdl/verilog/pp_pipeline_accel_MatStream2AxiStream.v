// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pp_pipeline_accel_MatStream2AxiStream (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        out_mat_470_dout,
        out_mat_470_empty_n,
        out_mat_470_read,
        ldata1_din,
        ldata1_full_n,
        ldata1_write,
        rows_dout,
        rows_empty_n,
        rows_read,
        cols_bound_per_npc_dout,
        cols_bound_per_npc_empty_n,
        cols_bound_per_npc_read,
        last_blk_width,
        stride_dout,
        stride_empty_n,
        stride_read
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] out_mat_470_dout;
input   out_mat_470_empty_n;
output   out_mat_470_read;
output  [63:0] ldata1_din;
input   ldata1_full_n;
output   ldata1_write;
input  [31:0] rows_dout;
input   rows_empty_n;
output   rows_read;
input  [31:0] cols_bound_per_npc_dout;
input   cols_bound_per_npc_empty_n;
output   cols_bound_per_npc_read;
input  [3:0] last_blk_width;
input  [31:0] stride_dout;
input   stride_empty_n;
output   stride_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_mat_470_read;
reg[63:0] ldata1_din;
reg ldata1_write;
reg rows_read;
reg cols_bound_per_npc_read;
reg stride_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_mat_470_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1324_reg_470;
reg   [0:0] icmp_ln1338_reg_479;
reg    ldata1_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln1324_reg_470_pp0_iter1_reg;
reg   [0:0] icmp_ln878_reg_493;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln874_fu_402_p2;
reg    rows_blk_n;
reg    cols_bound_per_npc_blk_n;
reg    stride_blk_n;
reg   [63:0] indvar_flatten_reg_125;
reg   [30:0] j_reg_136;
reg   [6:0] filled_V_reg_147;
reg   [31:0] rows_1_reg_416;
reg   [31:0] cols_bound_per_npc_1_reg_421;
reg   [31:0] stride_1_reg_428;
wire   [31:0] strideBased_cols_bound_per_npc_fu_193_p3;
reg   [31:0] strideBased_cols_bound_per_npc_reg_434;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg   [3:0] last_blk_width_read_reg_450;
wire    ap_CS_fsm_state4;
wire   [31:0] sub_i_fu_211_p2;
reg   [31:0] sub_i_reg_455;
wire   [63:0] grp_fu_205_p2;
reg   [63:0] mul_ln1305_reg_460;
wire   [63:0] add_ln1324_fu_216_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage0_iter0;
reg    ap_predicate_op52_read_state6;
reg    ap_block_state6_pp0_stage0_iter1;
reg    ap_predicate_op72_write_state7;
reg    ap_block_state7_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1324_fu_231_p2;
wire   [0:0] bLast_fu_248_p2;
reg   [0:0] bLast_reg_474;
wire   [0:0] icmp_ln1338_fu_253_p2;
wire   [30:0] j_2_fu_264_p3;
wire   [0:0] icmp_ln878_fu_293_p2;
wire   [7:0] ret_25_fu_303_p2;
reg   [7:0] ret_25_reg_497;
wire   [5:0] trunc_ln789_fu_309_p1;
reg   [5:0] trunc_ln789_reg_503;
wire   [6:0] filled_V_1_fu_322_p2;
reg   [6:0] filled_V_1_reg_508;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state6;
reg   [6:0] ap_phi_mux_filled_V_phi_fu_151_p4;
reg   [6:0] ap_phi_mux_conv_i9_i_i413_pn_i_phi_fu_162_p4;
wire   [6:0] or_ln_fu_313_p3;
wire   [6:0] ap_phi_reg_pp0_iter1_conv_i9_i_i413_pn_i_reg_159;
wire   [6:0] zext_ln1336_fu_282_p1;
wire   [23:0] ap_phi_reg_pp0_iter0_val_V_1_reg_168;
reg   [23:0] ap_phi_reg_pp0_iter1_val_V_1_reg_168;
reg   [23:0] ap_phi_reg_pp0_iter2_val_V_1_reg_168;
reg   [63:0] localbuffer_V_fu_84;
wire   [63:0] localbuffer_V_3_fu_384_p3;
wire   [63:0] ret_fu_342_p2;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_state8;
wire   [0:0] icmp_ln1312_fu_188_p2;
wire   [31:0] grp_fu_205_p0;
wire   [31:0] grp_fu_205_p1;
wire   [31:0] zext_ln1329_fu_222_p1;
wire   [0:0] icmp_ln1329_fu_226_p2;
wire   [30:0] select_ln1319_fu_236_p3;
wire   [31:0] zext_ln1319_fu_244_p1;
wire   [30:0] add_ln1329_fu_258_p2;
wire   [3:0] xf_bits_per_clock_fu_272_p3;
wire  signed [4:0] sext_ln1336_fu_278_p1;
wire   [6:0] sub_ln1347_fu_287_p2;
wire   [7:0] zext_ln1347_fu_299_p1;
wire   [63:0] zext_ln1337_fu_328_p1;
wire   [63:0] zext_ln781_fu_332_p1;
wire   [63:0] r_3_fu_336_p2;
wire   [5:0] sub_ln546_fu_359_p2;
wire   [63:0] zext_ln781_1_fu_364_p1;
wire   [6:0] trunc_ln455_fu_356_p1;
wire   [63:0] zext_ln799_fu_374_p1;
wire   [0:0] p_Result_s_fu_349_p3;
wire   [63:0] r_fu_368_p2;
wire   [63:0] r_2_fu_378_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_205_p00;
wire   [63:0] grp_fu_205_p10;
reg    ap_condition_190;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

pp_pipeline_accel_mul_32ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_2_1_U280(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_205_p0),
    .din1(grp_fu_205_p1),
    .ce(1'b1),
    .dout(grp_fu_205_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln874_fu_402_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state6) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter1_state6))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_190)) begin
        if (((icmp_ln1338_reg_479 == 1'd0) & (icmp_ln1324_reg_470 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_val_V_1_reg_168 <= 24'd0;
        end else if (((icmp_ln1338_reg_479 == 1'd1) & (icmp_ln1324_reg_470 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_val_V_1_reg_168 <= out_mat_470_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_val_V_1_reg_168 <= ap_phi_reg_pp0_iter1_val_V_1_reg_168;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1324_reg_470_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        filled_V_reg_147 <= filled_V_1_reg_508;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        filled_V_reg_147 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1324_fu_231_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_125 <= add_ln1324_fu_216_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_125 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1324_fu_231_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_reg_136 <= j_2_fu_264_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_136 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stride_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        localbuffer_V_fu_84 <= 64'd0;
    end else if (((icmp_ln878_reg_493 == 1'd1) & (icmp_ln1324_reg_470_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localbuffer_V_fu_84 <= ret_fu_342_p2;
    end else if (((icmp_ln878_reg_493 == 1'd0) & (icmp_ln1324_reg_470_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        localbuffer_V_fu_84 <= localbuffer_V_3_fu_384_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_val_V_1_reg_168 <= ap_phi_reg_pp0_iter0_val_V_1_reg_168;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1324_fu_231_p2 == 1'd0))) begin
        bLast_reg_474 <= bLast_fu_248_p2;
        icmp_ln1338_reg_479 <= icmp_ln1338_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cols_bound_per_npc_1_reg_421 <= cols_bound_per_npc_dout;
        rows_1_reg_416 <= rows_dout;
        stride_1_reg_428 <= stride_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1324_reg_470 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filled_V_1_reg_508 <= filled_V_1_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1324_reg_470 <= icmp_ln1324_fu_231_p2;
        icmp_ln1324_reg_470_pp0_iter1_reg <= icmp_ln1324_reg_470;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1324_reg_470 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln878_reg_493 <= icmp_ln878_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        last_blk_width_read_reg_450 <= last_blk_width;
        mul_ln1305_reg_460 <= grp_fu_205_p2;
        sub_i_reg_455 <= sub_i_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1324_reg_470 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln878_fu_293_p2 == 1'd0))) begin
        ret_25_reg_497 <= ret_25_fu_303_p2;
        trunc_ln789_reg_503 <= trunc_ln789_fu_309_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        strideBased_cols_bound_per_npc_reg_434 <= strideBased_cols_bound_per_npc_fu_193_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_condition_pp0_exit_iter1_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1324_fu_231_p2 == 1'd1))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln874_fu_402_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln1324_reg_470 == 1'd0)) begin
        if ((icmp_ln878_fu_293_p2 == 1'd1)) begin
            ap_phi_mux_conv_i9_i_i413_pn_i_phi_fu_162_p4 = zext_ln1336_fu_282_p1;
        end else if ((icmp_ln878_fu_293_p2 == 1'd0)) begin
            ap_phi_mux_conv_i9_i_i413_pn_i_phi_fu_162_p4 = or_ln_fu_313_p3;
        end else begin
            ap_phi_mux_conv_i9_i_i413_pn_i_phi_fu_162_p4 = ap_phi_reg_pp0_iter1_conv_i9_i_i413_pn_i_reg_159;
        end
    end else begin
        ap_phi_mux_conv_i9_i_i413_pn_i_phi_fu_162_p4 = ap_phi_reg_pp0_iter1_conv_i9_i_i413_pn_i_reg_159;
    end
end

always @ (*) begin
    if (((icmp_ln1324_reg_470_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_filled_V_phi_fu_151_p4 = filled_V_1_reg_508;
    end else begin
        ap_phi_mux_filled_V_phi_fu_151_p4 = filled_V_reg_147;
    end
end

always @ (*) begin
    if ((~((icmp_ln874_fu_402_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_blk_n = cols_bound_per_npc_empty_n;
    end else begin
        cols_bound_per_npc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((stride_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_read = 1'b1;
    end else begin
        cols_bound_per_npc_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln874_fu_402_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)) | ((icmp_ln878_reg_493 == 1'd0) & (icmp_ln1324_reg_470_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        ldata1_blk_n = ldata1_full_n;
    end else begin
        ldata1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln874_fu_402_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (icmp_ln874_fu_402_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        ldata1_din = localbuffer_V_fu_84;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_predicate_op72_write_state7 == 1'b1))) begin
        ldata1_din = ret_fu_342_p2;
    end else begin
        ldata1_din = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op72_write_state7 == 1'b1)) | (~((icmp_ln874_fu_402_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (icmp_ln874_fu_402_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8)))) begin
        ldata1_write = 1'b1;
    end else begin
        ldata1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1338_reg_479 == 1'd1) & (icmp_ln1324_reg_470 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_mat_470_blk_n = out_mat_470_empty_n;
    end else begin
        out_mat_470_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op52_read_state6 == 1'b1))) begin
        out_mat_470_read = 1'b1;
    end else begin
        out_mat_470_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((stride_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        stride_blk_n = stride_empty_n;
    end else begin
        stride_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((stride_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        stride_read = 1'b1;
    end else begin
        stride_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((stride_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((icmp_ln874_fu_402_p2 == 1'd0) & (ldata1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1324_fu_216_p2 = (indvar_flatten_reg_125 + 64'd1);

assign add_ln1329_fu_258_p2 = (j_reg_136 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (ldata1_full_n == 1'b0) & (ap_predicate_op72_write_state7 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (out_mat_470_empty_n == 1'b0) & (ap_predicate_op52_read_state6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (ldata1_full_n == 1'b0) & (ap_predicate_op72_write_state7 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (out_mat_470_empty_n == 1'b0) & (ap_predicate_op52_read_state6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (ldata1_full_n == 1'b0) & (ap_predicate_op72_write_state7 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (out_mat_470_empty_n == 1'b0) & (ap_predicate_op52_read_state6 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((stride_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((out_mat_470_empty_n == 1'b0) & (ap_predicate_op52_read_state6 == 1'b1));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter2 = ((ldata1_full_n == 1'b0) & (ap_predicate_op72_write_state7 == 1'b1));
end

always @ (*) begin
    ap_block_state8 = ((icmp_ln874_fu_402_p2 == 1'd0) & (ldata1_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_190 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_val_V_1_reg_168 = 'bx;

assign ap_phi_reg_pp0_iter1_conv_i9_i_i413_pn_i_reg_159 = 'bx;

always @ (*) begin
    ap_predicate_op52_read_state6 = ((icmp_ln1338_reg_479 == 1'd1) & (icmp_ln1324_reg_470 == 1'd0));
end

always @ (*) begin
    ap_predicate_op72_write_state7 = ((icmp_ln878_reg_493 == 1'd0) & (icmp_ln1324_reg_470_pp0_iter1_reg == 1'd0));
end

assign bLast_fu_248_p2 = ((zext_ln1319_fu_244_p1 == sub_i_reg_455) ? 1'b1 : 1'b0);

assign filled_V_1_fu_322_p2 = (ap_phi_mux_conv_i9_i_i413_pn_i_phi_fu_162_p4 + ap_phi_mux_filled_V_phi_fu_151_p4);

assign grp_fu_205_p0 = grp_fu_205_p00;

assign grp_fu_205_p00 = rows_1_reg_416;

assign grp_fu_205_p1 = grp_fu_205_p10;

assign grp_fu_205_p10 = strideBased_cols_bound_per_npc_reg_434;

assign icmp_ln1312_fu_188_p2 = ((stride_1_reg_428 == 32'd4294967295) ? 1'b1 : 1'b0);

assign icmp_ln1324_fu_231_p2 = ((indvar_flatten_reg_125 == mul_ln1305_reg_460) ? 1'b1 : 1'b0);

assign icmp_ln1329_fu_226_p2 = (($signed(zext_ln1329_fu_222_p1) < $signed(strideBased_cols_bound_per_npc_reg_434)) ? 1'b1 : 1'b0);

assign icmp_ln1338_fu_253_p2 = (($signed(zext_ln1319_fu_244_p1) < $signed(cols_bound_per_npc_1_reg_421)) ? 1'b1 : 1'b0);

assign icmp_ln874_fu_402_p2 = ((filled_V_reg_147 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln878_fu_293_p2 = ((ap_phi_mux_filled_V_phi_fu_151_p4 < sub_ln1347_fu_287_p2) ? 1'b1 : 1'b0);

assign j_2_fu_264_p3 = ((icmp_ln1329_fu_226_p2[0:0] == 1'b1) ? add_ln1329_fu_258_p2 : 31'd1);

assign localbuffer_V_3_fu_384_p3 = ((p_Result_s_fu_349_p3[0:0] == 1'b1) ? r_fu_368_p2 : r_2_fu_378_p2);

assign or_ln_fu_313_p3 = {{2'd2}, {sext_ln1336_fu_278_p1}};

assign p_Result_s_fu_349_p3 = ret_25_reg_497[32'd7];

assign r_2_fu_378_p2 = zext_ln1337_fu_328_p1 >> zext_ln799_fu_374_p1;

assign r_3_fu_336_p2 = zext_ln1337_fu_328_p1 << zext_ln781_fu_332_p1;

assign r_fu_368_p2 = zext_ln1337_fu_328_p1 << zext_ln781_1_fu_364_p1;

assign ret_25_fu_303_p2 = (8'd64 - zext_ln1347_fu_299_p1);

assign ret_fu_342_p2 = (r_3_fu_336_p2 | localbuffer_V_fu_84);

assign select_ln1319_fu_236_p3 = ((icmp_ln1329_fu_226_p2[0:0] == 1'b1) ? j_reg_136 : 31'd0);

assign sext_ln1336_fu_278_p1 = $signed(xf_bits_per_clock_fu_272_p3);

assign strideBased_cols_bound_per_npc_fu_193_p3 = ((icmp_ln1312_fu_188_p2[0:0] == 1'b1) ? cols_bound_per_npc_1_reg_421 : stride_1_reg_428);

assign sub_i_fu_211_p2 = ($signed(cols_bound_per_npc_1_reg_421) + $signed(32'd4294967295));

assign sub_ln1347_fu_287_p2 = ($signed(7'd64) - $signed(zext_ln1336_fu_282_p1));

assign sub_ln546_fu_359_p2 = (6'd0 - trunc_ln789_reg_503);

assign trunc_ln455_fu_356_p1 = ret_25_reg_497[6:0];

assign trunc_ln789_fu_309_p1 = ret_25_fu_303_p2[5:0];

assign xf_bits_per_clock_fu_272_p3 = ((bLast_reg_474[0:0] == 1'b1) ? last_blk_width_read_reg_450 : 4'd8);

assign zext_ln1319_fu_244_p1 = select_ln1319_fu_236_p3;

assign zext_ln1329_fu_222_p1 = j_reg_136;

assign zext_ln1336_fu_282_p1 = $unsigned(sext_ln1336_fu_278_p1);

assign zext_ln1337_fu_328_p1 = ap_phi_reg_pp0_iter2_val_V_1_reg_168;

assign zext_ln1347_fu_299_p1 = ap_phi_mux_filled_V_phi_fu_151_p4;

assign zext_ln781_1_fu_364_p1 = sub_ln546_fu_359_p2;

assign zext_ln781_fu_332_p1 = filled_V_reg_147;

assign zext_ln799_fu_374_p1 = trunc_ln455_fu_356_p1;

endmodule //pp_pipeline_accel_MatStream2AxiStream

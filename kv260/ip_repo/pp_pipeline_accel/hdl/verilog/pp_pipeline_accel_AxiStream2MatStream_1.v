// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pp_pipeline_accel_AxiStream2MatStream_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ldata1_dout,
        ldata1_empty_n,
        ldata1_read,
        imgInput_y_466_din,
        imgInput_y_466_full_n,
        imgInput_y_466_write,
        rows_dout,
        rows_empty_n,
        rows_read,
        cols_bound_per_npc_dout,
        cols_bound_per_npc_empty_n,
        cols_bound_per_npc_read,
        last_blk_width_dout,
        last_blk_width_empty_n,
        last_blk_width_read,
        stride_dout,
        stride_empty_n,
        stride_read
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state10 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] ldata1_dout;
input   ldata1_empty_n;
output   ldata1_read;
output  [7:0] imgInput_y_466_din;
input   imgInput_y_466_full_n;
output   imgInput_y_466_write;
input  [31:0] rows_dout;
input   rows_empty_n;
output   rows_read;
input  [31:0] cols_bound_per_npc_dout;
input   cols_bound_per_npc_empty_n;
output   cols_bound_per_npc_read;
input  [3:0] last_blk_width_dout;
input   last_blk_width_empty_n;
output   last_blk_width_read;
input  [31:0] stride_dout;
input   stride_empty_n;
output   stride_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ldata1_read;
reg imgInput_y_466_write;
reg rows_read;
reg cols_bound_per_npc_read;
reg last_blk_width_read;
reg stride_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ldata1_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln1073_reg_864;
reg   [0:0] icmp_ln1073_reg_864_pp0_iter1_reg;
reg   [0:0] icmp_ln1084_reg_889;
reg    imgInput_y_466_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln1104_reg_880;
reg   [0:0] icmp_ln1104_reg_880_pp0_iter3_reg;
reg    rows_blk_n;
reg    cols_bound_per_npc_blk_n;
reg    last_blk_width_blk_n;
reg    stride_blk_n;
reg   [31:0] j_reg_147;
reg   [30:0] i_reg_158;
reg  signed [31:0] rows_2_reg_794;
reg   [31:0] cols_bound_per_npc_2_reg_799;
reg   [3:0] last_blk_width_1_reg_806;
reg   [31:0] stride_2_reg_812;
wire   [0:0] icmp_ln1056_fu_198_p2;
reg   [0:0] icmp_ln1056_reg_818;
wire    ap_CS_fsm_state2;
wire  signed [31:0] stride_bound_per_npc_fu_203_p3;
reg  signed [31:0] stride_bound_per_npc_reg_823;
wire   [3:0] strideBased_last_blk_width_fu_213_p3;
reg   [3:0] strideBased_last_blk_width_reg_829;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_209_p2;
reg   [31:0] bound_reg_834;
wire   [31:0] sub_i_fu_223_p2;
reg   [31:0] sub_i_reg_839;
wire   [6:0] sub4_i_fu_228_p2;
reg   [6:0] sub4_i_reg_844;
wire   [31:0] sub26_i_fu_234_p2;
reg   [31:0] sub26_i_reg_849;
wire   [6:0] add_ln1093_fu_239_p2;
reg   [6:0] add_ln1093_reg_854;
wire   [30:0] add_ln1073_fu_245_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
reg    ap_predicate_op109_read_state7;
reg    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
reg    ap_block_state9_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1073_fu_255_p2;
reg   [0:0] icmp_ln1073_reg_864_pp0_iter2_reg;
wire   [0:0] bLast_fu_260_p2;
reg   [0:0] bLast_reg_868;
wire   [0:0] bLast_width_fu_265_p2;
reg   [0:0] bLast_width_reg_875;
reg   [0:0] bLast_width_reg_875_pp0_iter1_reg;
reg   [0:0] bLast_width_reg_875_pp0_iter2_reg;
reg   [0:0] bLast_width_reg_875_pp0_iter3_reg;
wire   [0:0] icmp_ln1104_fu_270_p2;
reg   [0:0] icmp_ln1104_reg_880_pp0_iter1_reg;
reg   [0:0] icmp_ln1104_reg_880_pp0_iter2_reg;
wire   [31:0] j_4_fu_281_p3;
wire   [0:0] icmp_ln1084_fu_317_p2;
reg   [0:0] icmp_ln1084_reg_889_pp0_iter2_reg;
wire   [0:0] icmp_ln674_1_fu_339_p2;
reg   [0:0] icmp_ln674_1_reg_893;
wire   [6:0] trunc_ln674_4_fu_345_p1;
reg   [6:0] trunc_ln674_4_reg_900;
wire   [6:0] trunc_ln674_5_fu_349_p1;
reg   [6:0] trunc_ln674_5_reg_908;
wire   [0:0] icmp_ln1085_fu_364_p2;
reg   [0:0] icmp_ln1085_reg_914;
reg   [0:0] icmp_ln1085_reg_914_pp0_iter2_reg;
wire   [3:0] trunc_ln1086_fu_370_p1;
reg   [3:0] trunc_ln1086_reg_919;
reg   [3:0] trunc_ln1086_reg_919_pp0_iter2_reg;
wire   [0:0] icmp_ln674_fu_384_p2;
reg   [0:0] icmp_ln674_reg_924;
wire   [6:0] trunc_ln674_fu_390_p1;
reg   [6:0] trunc_ln674_reg_931;
wire   [6:0] add_ln674_1_fu_418_p2;
reg   [6:0] add_ln674_1_reg_938;
wire   [0:0] icmp_ln414_fu_424_p2;
reg   [0:0] icmp_ln414_reg_943;
reg   [0:0] icmp_ln414_reg_943_pp0_iter2_reg;
wire   [3:0] trunc_ln414_fu_430_p1;
reg   [3:0] trunc_ln414_reg_951;
reg   [3:0] trunc_ln414_reg_951_pp0_iter2_reg;
wire   [3:0] trunc_ln414_1_fu_434_p1;
reg   [3:0] trunc_ln414_1_reg_959;
reg   [3:0] trunc_ln414_1_reg_959_pp0_iter2_reg;
wire   [6:0] sub_ln674_7_fu_495_p2;
reg   [6:0] sub_ln674_7_reg_965;
wire   [63:0] lshr_ln674_3_fu_505_p2;
reg   [63:0] lshr_ln674_3_reg_970;
wire   [6:0] sub_ln674_2_fu_546_p2;
reg   [6:0] sub_ln674_2_reg_975;
wire   [63:0] lshr_ln674_fu_556_p2;
reg   [63:0] lshr_ln674_reg_980;
wire   [3:0] sub_ln414_2_fu_597_p2;
reg   [3:0] sub_ln414_2_reg_985;
wire   [7:0] shl_ln414_fu_607_p2;
reg   [7:0] shl_ln414_reg_990;
wire   [7:0] localbuffer_V_6_fu_632_p1;
wire   [7:0] p_Result_21_fu_745_p2;
wire   [3:0] sub_ln674_8_fu_751_p2;
reg   [3:0] sub_ln674_8_reg_1006;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
wire   [7:0] ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_169;
reg   [7:0] ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_169;
reg   [7:0] ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_169;
reg   [7:0] ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_169;
reg   [7:0] ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_169;
reg   [31:0] rem_fu_102;
wire   [31:0] rem_2_fu_353_p2;
wire   [31:0] rem_1_fu_438_p2;
reg    ap_block_state1;
reg   [63:0] p_Val2_s_fu_106;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state3;
wire   [6:0] zext_ln1054_fu_219_p1;
wire   [31:0] zext_ln1048_fu_251_p1;
wire   [31:0] add_ln1105_fu_275_p2;
wire   [3:0] xf_bits_per_clock_fu_293_p3;
wire   [6:0] ptr_width_minus_fu_307_p3;
wire   [31:0] zext_ln1079_fu_299_p1;
wire   [6:0] select_ln1093_fu_323_p3;
wire   [31:0] zext_ln1093_fu_329_p1;
wire   [31:0] grp_fu_178_p2;
wire   [31:0] sub_ln1093_fu_333_p2;
wire   [25:0] tmp_fu_374_p4;
wire   [4:0] zext_ln1079_1_fu_303_p1;
wire  signed [4:0] add_ln1090_fu_394_p2;
wire   [6:0] trunc_ln1090_fu_408_p1;
wire  signed [6:0] sext_ln1090_1_fu_404_p1;
wire   [6:0] sub_ln674_3_fu_412_p2;
wire  signed [31:0] sext_ln1090_fu_400_p1;
wire   [31:0] zext_ln1080_fu_313_p1;
wire   [6:0] sub_ln674_4_fu_462_p2;
wire   [6:0] sub_ln674_6_fu_471_p2;
reg   [63:0] tmp_27_fu_452_p4;
wire   [6:0] sub_ln674_5_fu_466_p2;
wire   [6:0] select_ln674_3_fu_475_p3;
wire   [6:0] select_ln674_5_fu_489_p3;
wire   [63:0] select_ln674_4_fu_482_p3;
wire   [63:0] zext_ln674_3_fu_501_p1;
wire   [6:0] add_ln674_fu_521_p2;
wire   [6:0] grp_fu_183_p2;
reg   [63:0] tmp_22_fu_511_p4;
wire   [6:0] select_ln674_fu_526_p3;
wire   [6:0] select_ln674_2_fu_540_p3;
wire   [63:0] select_ln674_1_fu_533_p3;
wire   [63:0] zext_ln674_fu_552_p1;
wire   [63:0] zext_ln674_2_fu_562_p1;
wire   [63:0] lshr_ln674_2_fu_565_p2;
wire   [63:0] p_Result_20_fu_571_p2;
wire   [3:0] sub_ln414_1_fu_581_p2;
wire   [3:0] select_ln414_fu_586_p3;
wire   [3:0] select_ln414_2_fu_591_p3;
wire   [7:0] tmp_30_fu_577_p1;
wire   [7:0] zext_ln414_1_fu_603_p1;
wire   [63:0] zext_ln674_4_fu_618_p1;
wire   [63:0] lshr_ln674_4_fu_621_p2;
wire   [63:0] p_Result_22_fu_627_p2;
wire   [63:0] zext_ln674_1_fu_636_p1;
wire   [63:0] lshr_ln674_1_fu_639_p2;
wire   [63:0] p_Result_s_fu_645_p2;
wire   [3:0] sub_ln414_fu_654_p2;
wire   [7:0] zext_ln414_fu_659_p1;
wire   [7:0] tmp_28_fu_650_p1;
wire   [7:0] lshr_ln414_fu_663_p2;
wire   [7:0] p_Result_19_fu_669_p2;
wire   [3:0] select_ln414_1_fu_682_p3;
reg   [7:0] tmp_26_fu_694_p4;
wire   [7:0] zext_ln414_2_fu_687_p1;
wire   [7:0] zext_ln414_3_fu_691_p1;
wire   [7:0] shl_ln414_1_fu_709_p2;
wire   [7:0] lshr_ln414_1_fu_715_p2;
wire   [7:0] and_ln414_fu_721_p2;
wire   [7:0] localbuffer_V_fu_675_p3;
wire   [7:0] xor_ln414_fu_727_p2;
wire   [7:0] select_ln414_3_fu_703_p3;
wire   [7:0] and_ln414_1_fu_733_p2;
wire   [7:0] and_ln414_2_fu_739_p2;
wire   [7:0] zext_ln674_5_fu_756_p1;
wire   [7:0] lshr_ln674_5_fu_759_p2;
wire   [7:0] select_ln1097_fu_765_p3;
wire    ap_CS_fsm_state10;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

pp_pipeline_accel_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rows_2_reg_794),
    .din1(stride_bound_per_npc_reg_823),
    .ce(1'b1),
    .dout(grp_fu_209_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if (((icmp_ln1084_reg_889_pp0_iter2_reg == 1'd0) & (icmp_ln1073_reg_864_pp0_iter2_reg == 1'd1))) begin
            ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_169 <= localbuffer_V_6_fu_632_p1;
        end else if (((icmp_ln1084_reg_889_pp0_iter2_reg == 1'd1) & (icmp_ln1073_reg_864_pp0_iter2_reg == 1'd1))) begin
            ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_169 <= p_Result_21_fu_745_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_169 <= ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_169;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1073_fu_255_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_reg_158 <= add_ln1073_fu_245_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_158 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1073_fu_255_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_reg_147 <= j_4_fu_281_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_147 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stride_empty_n == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_fu_106 <= 64'd0;
    end else if (((icmp_ln1084_reg_889 == 1'd1) & (icmp_ln1073_reg_864_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_Val2_s_fu_106 <= ldata1_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stride_empty_n == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rem_fu_102 <= 32'd0;
    end else if (((icmp_ln1073_reg_864 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1084_fu_317_p2 == 1'd1))) begin
        rem_fu_102 <= rem_1_fu_438_p2;
    end else if (((icmp_ln1073_reg_864 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1084_fu_317_p2 == 1'd0))) begin
        rem_fu_102 <= rem_2_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln1093_reg_854 <= add_ln1093_fu_239_p2;
        bound_reg_834 <= grp_fu_209_p2;
        strideBased_last_blk_width_reg_829 <= strideBased_last_blk_width_fu_213_p3;
        sub26_i_reg_849 <= sub26_i_fu_234_p2;
        sub4_i_reg_844 <= sub4_i_fu_228_p2;
        sub_i_reg_839 <= sub_i_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1073_reg_864 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1084_fu_317_p2 == 1'd1))) begin
        add_ln674_1_reg_938 <= add_ln674_1_fu_418_p2;
        icmp_ln1085_reg_914 <= icmp_ln1085_fu_364_p2;
        icmp_ln414_reg_943 <= icmp_ln414_fu_424_p2;
        icmp_ln674_reg_924 <= icmp_ln674_fu_384_p2;
        trunc_ln1086_reg_919 <= trunc_ln1086_fu_370_p1;
        trunc_ln414_1_reg_959 <= trunc_ln414_1_fu_434_p1;
        trunc_ln414_reg_951 <= trunc_ln414_fu_430_p1;
        trunc_ln674_reg_931 <= trunc_ln674_fu_390_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_169 <= ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_169 <= ap_phi_reg_pp0_iter1_localbuffer_V_8_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_localbuffer_V_8_reg_169 <= ap_phi_reg_pp0_iter2_localbuffer_V_8_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1073_fu_255_p2 == 1'd1))) begin
        bLast_reg_868 <= bLast_fu_260_p2;
        bLast_width_reg_875 <= bLast_width_fu_265_p2;
        icmp_ln1104_reg_880 <= icmp_ln1104_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bLast_width_reg_875_pp0_iter1_reg <= bLast_width_reg_875;
        icmp_ln1073_reg_864 <= icmp_ln1073_fu_255_p2;
        icmp_ln1073_reg_864_pp0_iter1_reg <= icmp_ln1073_reg_864;
        icmp_ln1104_reg_880_pp0_iter1_reg <= icmp_ln1104_reg_880;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        bLast_width_reg_875_pp0_iter2_reg <= bLast_width_reg_875_pp0_iter1_reg;
        bLast_width_reg_875_pp0_iter3_reg <= bLast_width_reg_875_pp0_iter2_reg;
        icmp_ln1073_reg_864_pp0_iter2_reg <= icmp_ln1073_reg_864_pp0_iter1_reg;
        icmp_ln1084_reg_889_pp0_iter2_reg <= icmp_ln1084_reg_889;
        icmp_ln1085_reg_914_pp0_iter2_reg <= icmp_ln1085_reg_914;
        icmp_ln1104_reg_880_pp0_iter2_reg <= icmp_ln1104_reg_880_pp0_iter1_reg;
        icmp_ln1104_reg_880_pp0_iter3_reg <= icmp_ln1104_reg_880_pp0_iter2_reg;
        icmp_ln414_reg_943_pp0_iter2_reg <= icmp_ln414_reg_943;
        trunc_ln1086_reg_919_pp0_iter2_reg <= trunc_ln1086_reg_919;
        trunc_ln414_1_reg_959_pp0_iter2_reg <= trunc_ln414_1_reg_959;
        trunc_ln414_reg_951_pp0_iter2_reg <= trunc_ln414_reg_951;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cols_bound_per_npc_2_reg_799 <= cols_bound_per_npc_dout;
        last_blk_width_1_reg_806 <= last_blk_width_dout;
        rows_2_reg_794 <= rows_dout;
        stride_2_reg_812 <= stride_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln1056_reg_818 <= icmp_ln1056_fu_198_p2;
        stride_bound_per_npc_reg_823 <= stride_bound_per_npc_fu_203_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1073_reg_864 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1084_reg_889 <= icmp_ln1084_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1073_reg_864 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1084_fu_317_p2 == 1'd0))) begin
        icmp_ln674_1_reg_893 <= icmp_ln674_1_fu_339_p2;
        trunc_ln674_4_reg_900 <= trunc_ln674_4_fu_345_p1;
        trunc_ln674_5_reg_908 <= trunc_ln674_5_fu_349_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1084_reg_889 == 1'd0) & (icmp_ln1073_reg_864_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lshr_ln674_3_reg_970 <= lshr_ln674_3_fu_505_p2;
        sub_ln674_7_reg_965 <= sub_ln674_7_fu_495_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1084_reg_889 == 1'd1) & (icmp_ln1073_reg_864_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln1085_reg_914 == 1'd0))) begin
        lshr_ln674_reg_980 <= lshr_ln674_fu_556_p2;
        sub_ln674_2_reg_975 <= sub_ln674_2_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1084_reg_889 == 1'd1) & (icmp_ln1073_reg_864_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shl_ln414_reg_990 <= shl_ln414_fu_607_p2;
        sub_ln414_2_reg_985 <= sub_ln414_2_fu_597_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (bLast_width_reg_875_pp0_iter2_reg == 1'd1))) begin
        sub_ln674_8_reg_1006 <= sub_ln674_8_fu_751_p2;
    end
end

always @ (*) begin
    if ((icmp_ln1073_fu_255_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_blk_n = cols_bound_per_npc_empty_n;
    end else begin
        cols_bound_per_npc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((stride_empty_n == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_bound_per_npc_read = 1'b1;
    end else begin
        cols_bound_per_npc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1104_reg_880_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        imgInput_y_466_blk_n = imgInput_y_466_full_n;
    end else begin
        imgInput_y_466_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln1104_reg_880_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        imgInput_y_466_write = 1'b1;
    end else begin
        imgInput_y_466_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        last_blk_width_blk_n = last_blk_width_empty_n;
    end else begin
        last_blk_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((stride_empty_n == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        last_blk_width_read = 1'b1;
    end else begin
        last_blk_width_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1084_reg_889 == 1'd1) & (icmp_ln1073_reg_864_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ldata1_blk_n = ldata1_empty_n;
    end else begin
        ldata1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op109_read_state7 == 1'b1))) begin
        ldata1_read = 1'b1;
    end else begin
        ldata1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((stride_empty_n == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        stride_blk_n = stride_empty_n;
    end else begin
        stride_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((stride_empty_n == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        stride_read = 1'b1;
    end else begin
        stride_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((stride_empty_n == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln1073_fu_255_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln1073_fu_255_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1073_fu_245_p2 = (i_reg_158 + 31'd1);

assign add_ln1090_fu_394_p2 = ($signed(zext_ln1079_1_fu_303_p1) + $signed(5'd31));

assign add_ln1093_fu_239_p2 = (zext_ln1054_fu_219_p1 + 7'd63);

assign add_ln1105_fu_275_p2 = (j_reg_147 + 32'd1);

assign add_ln674_1_fu_418_p2 = (sub_ln674_3_fu_412_p2 + 7'd63);

assign add_ln674_fu_521_p2 = ($signed(trunc_ln674_reg_931) + $signed(7'd65));

assign and_ln414_1_fu_733_p2 = (xor_ln414_fu_727_p2 & localbuffer_V_fu_675_p3);

assign and_ln414_2_fu_739_p2 = (select_ln414_3_fu_703_p3 & and_ln414_fu_721_p2);

assign and_ln414_fu_721_p2 = (shl_ln414_1_fu_709_p2 & lshr_ln414_1_fu_715_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln1104_reg_880_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (imgInput_y_466_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_predicate_op109_read_state7 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln1104_reg_880_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (imgInput_y_466_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_predicate_op109_read_state7 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln1104_reg_880_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (imgInput_y_466_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ldata1_empty_n == 1'b0) & (ap_predicate_op109_read_state7 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((stride_empty_n == 1'b0) | (last_blk_width_empty_n == 1'b0) | (cols_bound_per_npc_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter2 = ((ldata1_empty_n == 1'b0) & (ap_predicate_op109_read_state7 == 1'b1));
end

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter4 = ((icmp_ln1104_reg_880_pp0_iter3_reg == 1'd1) & (imgInput_y_466_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_localbuffer_V_8_reg_169 = 'bx;

always @ (*) begin
    ap_predicate_op109_read_state7 = ((icmp_ln1084_reg_889 == 1'd1) & (icmp_ln1073_reg_864_pp0_iter1_reg == 1'd1));
end

assign bLast_fu_260_p2 = ((j_reg_147 == sub_i_reg_839) ? 1'b1 : 1'b0);

assign bLast_width_fu_265_p2 = ((j_reg_147 == sub26_i_reg_849) ? 1'b1 : 1'b0);

assign grp_fu_178_p2 = (32'd64 - rem_fu_102);

assign grp_fu_183_p2 = (7'd63 - trunc_ln674_reg_931);

assign icmp_ln1056_fu_198_p2 = ((stride_2_reg_812 == 32'd4294967295) ? 1'b1 : 1'b0);

assign icmp_ln1073_fu_255_p2 = (($signed(zext_ln1048_fu_251_p1) < $signed(bound_reg_834)) ? 1'b1 : 1'b0);

assign icmp_ln1084_fu_317_p2 = (($signed(rem_fu_102) < $signed(zext_ln1079_fu_299_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1085_fu_364_p2 = ((rem_fu_102 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln1104_fu_270_p2 = (($signed(j_reg_147) < $signed(cols_bound_per_npc_2_reg_799)) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_424_p2 = ((rem_fu_102 > sext_ln1090_fu_400_p1) ? 1'b1 : 1'b0);

assign icmp_ln674_1_fu_339_p2 = ((grp_fu_178_p2 > sub_ln1093_fu_333_p2) ? 1'b1 : 1'b0);

assign icmp_ln674_fu_384_p2 = ((tmp_fu_374_p4 != 26'd0) ? 1'b1 : 1'b0);

assign imgInput_y_466_din = (select_ln1097_fu_765_p3 & ap_phi_reg_pp0_iter4_localbuffer_V_8_reg_169);

assign j_4_fu_281_p3 = ((bLast_fu_260_p2[0:0] == 1'b1) ? 32'd0 : add_ln1105_fu_275_p2);

assign localbuffer_V_6_fu_632_p1 = p_Result_22_fu_627_p2[7:0];

assign localbuffer_V_fu_675_p3 = ((icmp_ln1085_reg_914_pp0_iter2_reg[0:0] == 1'b1) ? 8'd0 : p_Result_19_fu_669_p2);

assign lshr_ln414_1_fu_715_p2 = 8'd255 >> zext_ln414_3_fu_691_p1;

assign lshr_ln414_fu_663_p2 = 8'd255 >> zext_ln414_fu_659_p1;

assign lshr_ln674_1_fu_639_p2 = 64'd18446744073709551615 >> zext_ln674_1_fu_636_p1;

assign lshr_ln674_2_fu_565_p2 = 64'd18446744073709551615 >> zext_ln674_2_fu_562_p1;

assign lshr_ln674_3_fu_505_p2 = select_ln674_4_fu_482_p3 >> zext_ln674_3_fu_501_p1;

assign lshr_ln674_4_fu_621_p2 = 64'd18446744073709551615 >> zext_ln674_4_fu_618_p1;

assign lshr_ln674_5_fu_759_p2 = 8'd255 >> zext_ln674_5_fu_756_p1;

assign lshr_ln674_fu_556_p2 = select_ln674_1_fu_533_p3 >> zext_ln674_fu_552_p1;

assign p_Result_19_fu_669_p2 = (tmp_28_fu_650_p1 & lshr_ln414_fu_663_p2);

assign p_Result_20_fu_571_p2 = (lshr_ln674_2_fu_565_p2 & ldata1_dout);

assign p_Result_21_fu_745_p2 = (and_ln414_2_fu_739_p2 | and_ln414_1_fu_733_p2);

assign p_Result_22_fu_627_p2 = (lshr_ln674_4_fu_621_p2 & lshr_ln674_3_reg_970);

assign p_Result_s_fu_645_p2 = (lshr_ln674_reg_980 & lshr_ln674_1_fu_639_p2);

assign ptr_width_minus_fu_307_p3 = ((bLast_reg_868[0:0] == 1'b1) ? sub4_i_reg_844 : 7'd56);

assign rem_1_fu_438_p2 = (rem_fu_102 + zext_ln1080_fu_313_p1);

assign rem_2_fu_353_p2 = (rem_fu_102 - zext_ln1079_fu_299_p1);

assign select_ln1093_fu_323_p3 = ((bLast_reg_868[0:0] == 1'b1) ? add_ln1093_reg_854 : 7'd71);

assign select_ln1097_fu_765_p3 = ((bLast_width_reg_875_pp0_iter3_reg[0:0] == 1'b1) ? lshr_ln674_5_fu_759_p2 : 8'd255);

assign select_ln414_1_fu_682_p3 = ((icmp_ln414_reg_943_pp0_iter2_reg[0:0] == 1'b1) ? trunc_ln414_1_reg_959_pp0_iter2_reg : trunc_ln414_reg_951_pp0_iter2_reg);

assign select_ln414_2_fu_591_p3 = ((icmp_ln414_reg_943[0:0] == 1'b1) ? sub_ln414_1_fu_581_p2 : trunc_ln414_reg_951);

assign select_ln414_3_fu_703_p3 = ((icmp_ln414_reg_943_pp0_iter2_reg[0:0] == 1'b1) ? tmp_26_fu_694_p4 : shl_ln414_reg_990);

assign select_ln414_fu_586_p3 = ((icmp_ln414_reg_943[0:0] == 1'b1) ? trunc_ln414_reg_951 : trunc_ln414_1_reg_959);

assign select_ln674_1_fu_533_p3 = ((icmp_ln674_reg_924[0:0] == 1'b1) ? tmp_22_fu_511_p4 : p_Val2_s_fu_106);

assign select_ln674_2_fu_540_p3 = ((icmp_ln674_reg_924[0:0] == 1'b1) ? grp_fu_183_p2 : trunc_ln674_reg_931);

assign select_ln674_3_fu_475_p3 = ((icmp_ln674_1_reg_893[0:0] == 1'b1) ? sub_ln674_4_fu_462_p2 : sub_ln674_6_fu_471_p2);

assign select_ln674_4_fu_482_p3 = ((icmp_ln674_1_reg_893[0:0] == 1'b1) ? tmp_27_fu_452_p4 : p_Val2_s_fu_106);

assign select_ln674_5_fu_489_p3 = ((icmp_ln674_1_reg_893[0:0] == 1'b1) ? sub_ln674_5_fu_466_p2 : trunc_ln674_4_reg_900);

assign select_ln674_fu_526_p3 = ((icmp_ln674_reg_924[0:0] == 1'b1) ? add_ln674_fu_521_p2 : grp_fu_183_p2);

assign sext_ln1090_1_fu_404_p1 = add_ln1090_fu_394_p2;

assign sext_ln1090_fu_400_p1 = add_ln1090_fu_394_p2;

assign shl_ln414_1_fu_709_p2 = 8'd255 << zext_ln414_2_fu_687_p1;

assign shl_ln414_fu_607_p2 = tmp_30_fu_577_p1 << zext_ln414_1_fu_603_p1;

assign strideBased_last_blk_width_fu_213_p3 = ((icmp_ln1056_reg_818[0:0] == 1'b1) ? last_blk_width_1_reg_806 : 4'd8);

assign stride_bound_per_npc_fu_203_p3 = ((icmp_ln1056_fu_198_p2[0:0] == 1'b1) ? cols_bound_per_npc_2_reg_799 : stride_2_reg_812);

assign sub26_i_fu_234_p2 = ($signed(cols_bound_per_npc_2_reg_799) + $signed(32'd4294967295));

assign sub4_i_fu_228_p2 = ($signed(7'd64) - $signed(zext_ln1054_fu_219_p1));

assign sub_i_fu_223_p2 = ($signed(stride_bound_per_npc_reg_823) + $signed(32'd4294967295));

assign sub_ln1093_fu_333_p2 = (zext_ln1093_fu_329_p1 - rem_fu_102);

assign sub_ln414_1_fu_581_p2 = (4'd7 - trunc_ln414_reg_951);

assign sub_ln414_2_fu_597_p2 = (4'd7 - select_ln414_fu_586_p3);

assign sub_ln414_fu_654_p2 = ($signed(4'd8) - $signed(trunc_ln1086_reg_919_pp0_iter2_reg));

assign sub_ln674_2_fu_546_p2 = (7'd63 - select_ln674_fu_526_p3);

assign sub_ln674_3_fu_412_p2 = ($signed(trunc_ln1090_fu_408_p1) - $signed(sext_ln1090_1_fu_404_p1));

assign sub_ln674_4_fu_462_p2 = (trunc_ln674_4_reg_900 - trunc_ln674_5_reg_908);

assign sub_ln674_5_fu_466_p2 = (7'd63 - trunc_ln674_4_reg_900);

assign sub_ln674_6_fu_471_p2 = (trunc_ln674_5_reg_908 - trunc_ln674_4_reg_900);

assign sub_ln674_7_fu_495_p2 = (7'd63 - select_ln674_3_fu_475_p3);

assign sub_ln674_8_fu_751_p2 = ($signed(4'd8) - $signed(last_blk_width_1_reg_806));

integer ap_tvar_int_0;

always @ (p_Val2_s_fu_106) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            tmp_22_fu_511_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_22_fu_511_p4[ap_tvar_int_0] = p_Val2_s_fu_106[63 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (shl_ln414_reg_990) begin
    for (ap_tvar_int_1 = 8 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 7 - 0) begin
            tmp_26_fu_694_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_26_fu_694_p4[ap_tvar_int_1] = shl_ln414_reg_990[7 - ap_tvar_int_1];
        end
    end
end

integer ap_tvar_int_2;

always @ (p_Val2_s_fu_106) begin
    for (ap_tvar_int_2 = 64 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 63 - 0) begin
            tmp_27_fu_452_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_27_fu_452_p4[ap_tvar_int_2] = p_Val2_s_fu_106[63 - ap_tvar_int_2];
        end
    end
end

assign tmp_28_fu_650_p1 = p_Result_s_fu_645_p2[7:0];

assign tmp_30_fu_577_p1 = p_Result_20_fu_571_p2[7:0];

assign tmp_fu_374_p4 = {{grp_fu_178_p2[31:6]}};

assign trunc_ln1086_fu_370_p1 = rem_fu_102[3:0];

assign trunc_ln1090_fu_408_p1 = rem_fu_102[6:0];

assign trunc_ln414_1_fu_434_p1 = add_ln1090_fu_394_p2[3:0];

assign trunc_ln414_fu_430_p1 = rem_fu_102[3:0];

assign trunc_ln674_4_fu_345_p1 = grp_fu_178_p2[6:0];

assign trunc_ln674_5_fu_349_p1 = sub_ln1093_fu_333_p2[6:0];

assign trunc_ln674_fu_390_p1 = grp_fu_178_p2[6:0];

assign xf_bits_per_clock_fu_293_p3 = ((bLast_reg_868[0:0] == 1'b1) ? strideBased_last_blk_width_reg_829 : 4'd8);

assign xor_ln414_fu_727_p2 = (8'd255 ^ and_ln414_fu_721_p2);

assign zext_ln1048_fu_251_p1 = i_reg_158;

assign zext_ln1054_fu_219_p1 = strideBased_last_blk_width_fu_213_p3;

assign zext_ln1079_1_fu_303_p1 = xf_bits_per_clock_fu_293_p3;

assign zext_ln1079_fu_299_p1 = xf_bits_per_clock_fu_293_p3;

assign zext_ln1080_fu_313_p1 = ptr_width_minus_fu_307_p3;

assign zext_ln1093_fu_329_p1 = select_ln1093_fu_323_p3;

assign zext_ln414_1_fu_603_p1 = select_ln414_2_fu_591_p3;

assign zext_ln414_2_fu_687_p1 = select_ln414_1_fu_682_p3;

assign zext_ln414_3_fu_691_p1 = sub_ln414_2_reg_985;

assign zext_ln414_fu_659_p1 = sub_ln414_fu_654_p2;

assign zext_ln674_1_fu_636_p1 = sub_ln674_2_reg_975;

assign zext_ln674_2_fu_562_p1 = add_ln674_1_reg_938;

assign zext_ln674_3_fu_501_p1 = select_ln674_5_fu_489_p3;

assign zext_ln674_4_fu_618_p1 = sub_ln674_7_reg_965;

assign zext_ln674_5_fu_756_p1 = sub_ln674_8_reg_1006;

assign zext_ln674_fu_552_p1 = select_ln674_2_fu_540_p3;

endmodule //pp_pipeline_accel_AxiStream2MatStream_1

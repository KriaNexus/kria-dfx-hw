-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pp_pipeline_accel_MatStream2AxiStream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_mat_470_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    out_mat_470_empty_n : IN STD_LOGIC;
    out_mat_470_read : OUT STD_LOGIC;
    ldata1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    ldata1_full_n : IN STD_LOGIC;
    ldata1_write : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols_bound_per_npc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cols_bound_per_npc_empty_n : IN STD_LOGIC;
    cols_bound_per_npc_read : OUT STD_LOGIC;
    last_blk_width : IN STD_LOGIC_VECTOR (3 downto 0);
    stride_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    stride_empty_n : IN STD_LOGIC;
    stride_read : OUT STD_LOGIC );
end;


architecture behav of pp_pipeline_accel_MatStream2AxiStream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_mat_470_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1324_reg_470 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1338_reg_479 : STD_LOGIC_VECTOR (0 downto 0);
    signal ldata1_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln1324_reg_470_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln878_reg_493 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln874_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rows_blk_n : STD_LOGIC;
    signal cols_bound_per_npc_blk_n : STD_LOGIC;
    signal stride_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_125 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_136 : STD_LOGIC_VECTOR (30 downto 0);
    signal filled_V_reg_147 : STD_LOGIC_VECTOR (6 downto 0);
    signal rows_1_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_bound_per_npc_1_reg_421 : STD_LOGIC_VECTOR (31 downto 0);
    signal stride_1_reg_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal strideBased_cols_bound_per_npc_fu_193_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal strideBased_cols_bound_per_npc_reg_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal last_blk_width_read_reg_450 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sub_i_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_i_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln1305_reg_460 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln1324_fu_216_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op52_read_state6 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op72_write_state7 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1324_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_reg_474 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1338_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_264_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln878_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_25_fu_303_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_25_reg_497 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln789_fu_309_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln789_reg_503 : STD_LOGIC_VECTOR (5 downto 0);
    signal filled_V_1_fu_322_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal filled_V_1_reg_508 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_condition_pp0_exit_iter1_state6 : STD_LOGIC;
    signal ap_phi_mux_filled_V_phi_fu_151_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_conv_i9_i_i413_pn_i_phi_fu_162_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln_fu_313_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_reg_pp0_iter1_conv_i9_i_i413_pn_i_reg_159 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1336_fu_282_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_reg_pp0_iter0_val_V_1_reg_168 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter1_val_V_1_reg_168 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_phi_reg_pp0_iter2_val_V_1_reg_168 : STD_LOGIC_VECTOR (23 downto 0);
    signal localbuffer_V_fu_84 : STD_LOGIC_VECTOR (63 downto 0);
    signal localbuffer_V_3_fu_384_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_fu_342_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_state8 : BOOLEAN;
    signal icmp_ln1312_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_205_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1329_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1329_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1319_fu_236_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1319_fu_244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1329_fu_258_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal xf_bits_per_clock_fu_272_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln1336_fu_278_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1347_fu_287_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1347_fu_299_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1337_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln781_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_3_fu_336_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln546_fu_359_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln781_1_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln455_fu_356_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln799_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_349_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_368_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_2_fu_378_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_205_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_205_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_condition_190 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component pp_pipeline_accel_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    mul_32ns_32ns_64_2_1_U280 : component pp_pipeline_accel_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_205_p0,
        din1 => grp_fu_205_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_205_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln874_fu_402_p2 = ap_const_lv1_0) and (ldata1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state6))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_val_V_1_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_190)) then
                if (((icmp_ln1338_reg_479 = ap_const_lv1_0) and (icmp_ln1324_reg_470 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_val_V_1_reg_168 <= ap_const_lv24_0;
                elsif (((icmp_ln1338_reg_479 = ap_const_lv1_1) and (icmp_ln1324_reg_470 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_val_V_1_reg_168 <= out_mat_470_dout;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_val_V_1_reg_168 <= ap_phi_reg_pp0_iter1_val_V_1_reg_168;
                end if;
            end if; 
        end if;
    end process;

    filled_V_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1324_reg_470_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                filled_V_reg_147 <= filled_V_1_reg_508;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                filled_V_reg_147 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1324_fu_231_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_125 <= add_ln1324_fu_216_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                indvar_flatten_reg_125 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1324_fu_231_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                j_reg_136 <= j_2_fu_264_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_136 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    localbuffer_V_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stride_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                localbuffer_V_fu_84 <= ap_const_lv64_0;
            elsif (((icmp_ln878_reg_493 = ap_const_lv1_1) and (icmp_ln1324_reg_470_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                localbuffer_V_fu_84 <= ret_fu_342_p2;
            elsif (((icmp_ln878_reg_493 = ap_const_lv1_0) and (icmp_ln1324_reg_470_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                localbuffer_V_fu_84 <= localbuffer_V_3_fu_384_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter1_val_V_1_reg_168 <= ap_phi_reg_pp0_iter0_val_V_1_reg_168;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1324_fu_231_p2 = ap_const_lv1_0))) then
                bLast_reg_474 <= bLast_fu_248_p2;
                icmp_ln1338_reg_479 <= icmp_ln1338_fu_253_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                cols_bound_per_npc_1_reg_421 <= cols_bound_per_npc_dout;
                rows_1_reg_416 <= rows_dout;
                stride_1_reg_428 <= stride_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1324_reg_470 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                filled_V_1_reg_508 <= filled_V_1_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1324_reg_470 <= icmp_ln1324_fu_231_p2;
                icmp_ln1324_reg_470_pp0_iter1_reg <= icmp_ln1324_reg_470;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1324_reg_470 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln878_reg_493 <= icmp_ln878_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                last_blk_width_read_reg_450 <= last_blk_width;
                mul_ln1305_reg_460 <= grp_fu_205_p2;
                sub_i_reg_455 <= sub_i_fu_211_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1324_reg_470 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln878_fu_293_p2 = ap_const_lv1_0))) then
                ret_25_reg_497 <= ret_25_fu_303_p2;
                trunc_ln789_reg_503 <= trunc_ln789_fu_309_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                strideBased_cols_bound_per_npc_reg_434 <= strideBased_cols_bound_per_npc_fu_193_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ldata1_full_n, rows_empty_n, cols_bound_per_npc_empty_n, stride_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, icmp_ln874_fu_402_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((stride_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((icmp_ln874_fu_402_p2 = ap_const_lv1_0) and (ldata1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln1324_fu_216_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_125) + unsigned(ap_const_lv64_1));
    add_ln1329_fu_258_p2 <= std_logic_vector(unsigned(j_reg_136) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(out_mat_470_empty_n, ldata1_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op52_read_state6, ap_predicate_op72_write_state7)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ldata1_full_n = ap_const_logic_0) and (ap_predicate_op72_write_state7 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_mat_470_empty_n = ap_const_logic_0) and (ap_predicate_op52_read_state6 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(out_mat_470_empty_n, ldata1_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op52_read_state6, ap_predicate_op72_write_state7)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ldata1_full_n = ap_const_logic_0) and (ap_predicate_op72_write_state7 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_mat_470_empty_n = ap_const_logic_0) and (ap_predicate_op52_read_state6 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(out_mat_470_empty_n, ldata1_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op52_read_state6, ap_predicate_op72_write_state7)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ldata1_full_n = ap_const_logic_0) and (ap_predicate_op72_write_state7 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_mat_470_empty_n = ap_const_logic_0) and (ap_predicate_op52_read_state6 = ap_const_boolean_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, rows_empty_n, cols_bound_per_npc_empty_n, stride_empty_n)
    begin
                ap_block_state1 <= ((stride_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter1_assign_proc : process(out_mat_470_empty_n, ap_predicate_op52_read_state6)
    begin
                ap_block_state6_pp0_stage0_iter1 <= ((out_mat_470_empty_n = ap_const_logic_0) and (ap_predicate_op52_read_state6 = ap_const_boolean_1));
    end process;


    ap_block_state7_pp0_stage0_iter2_assign_proc : process(ldata1_full_n, ap_predicate_op72_write_state7)
    begin
                ap_block_state7_pp0_stage0_iter2 <= ((ldata1_full_n = ap_const_logic_0) and (ap_predicate_op72_write_state7 = ap_const_boolean_1));
    end process;


    ap_block_state8_assign_proc : process(ldata1_full_n, icmp_ln874_fu_402_p2)
    begin
                ap_block_state8 <= ((icmp_ln874_fu_402_p2 = ap_const_lv1_0) and (ldata1_full_n = ap_const_logic_0));
    end process;


    ap_condition_190_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_190 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter1_state6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1324_fu_231_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1324_fu_231_p2 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ldata1_full_n, ap_CS_fsm_state8, icmp_ln874_fu_402_p2)
    begin
        if ((not(((icmp_ln874_fu_402_p2 = ap_const_lv1_0) and (ldata1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_conv_i9_i_i413_pn_i_phi_fu_162_p4_assign_proc : process(icmp_ln1324_reg_470, icmp_ln878_fu_293_p2, or_ln_fu_313_p3, ap_phi_reg_pp0_iter1_conv_i9_i_i413_pn_i_reg_159, zext_ln1336_fu_282_p1)
    begin
        if ((icmp_ln1324_reg_470 = ap_const_lv1_0)) then
            if ((icmp_ln878_fu_293_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_conv_i9_i_i413_pn_i_phi_fu_162_p4 <= zext_ln1336_fu_282_p1;
            elsif ((icmp_ln878_fu_293_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_conv_i9_i_i413_pn_i_phi_fu_162_p4 <= or_ln_fu_313_p3;
            else 
                ap_phi_mux_conv_i9_i_i413_pn_i_phi_fu_162_p4 <= ap_phi_reg_pp0_iter1_conv_i9_i_i413_pn_i_reg_159;
            end if;
        else 
            ap_phi_mux_conv_i9_i_i413_pn_i_phi_fu_162_p4 <= ap_phi_reg_pp0_iter1_conv_i9_i_i413_pn_i_reg_159;
        end if; 
    end process;


    ap_phi_mux_filled_V_phi_fu_151_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1324_reg_470_pp0_iter1_reg, filled_V_reg_147, filled_V_1_reg_508)
    begin
        if (((icmp_ln1324_reg_470_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_filled_V_phi_fu_151_p4 <= filled_V_1_reg_508;
        else 
            ap_phi_mux_filled_V_phi_fu_151_p4 <= filled_V_reg_147;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_val_V_1_reg_168 <= "XXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter1_conv_i9_i_i413_pn_i_reg_159 <= "XXXXXXX";

    ap_predicate_op52_read_state6_assign_proc : process(icmp_ln1324_reg_470, icmp_ln1338_reg_479)
    begin
                ap_predicate_op52_read_state6 <= ((icmp_ln1338_reg_479 = ap_const_lv1_1) and (icmp_ln1324_reg_470 = ap_const_lv1_0));
    end process;


    ap_predicate_op72_write_state7_assign_proc : process(icmp_ln1324_reg_470_pp0_iter1_reg, icmp_ln878_reg_493)
    begin
                ap_predicate_op72_write_state7 <= ((icmp_ln878_reg_493 = ap_const_lv1_0) and (icmp_ln1324_reg_470_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ldata1_full_n, ap_CS_fsm_state8, icmp_ln874_fu_402_p2)
    begin
        if ((not(((icmp_ln874_fu_402_p2 = ap_const_lv1_0) and (ldata1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bLast_fu_248_p2 <= "1" when (zext_ln1319_fu_244_p1 = sub_i_reg_455) else "0";

    cols_bound_per_npc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_bound_per_npc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_blk_n <= cols_bound_per_npc_empty_n;
        else 
            cols_bound_per_npc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cols_bound_per_npc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, stride_empty_n)
    begin
        if ((not(((stride_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_read <= ap_const_logic_1;
        else 
            cols_bound_per_npc_read <= ap_const_logic_0;
        end if; 
    end process;

    filled_V_1_fu_322_p2 <= std_logic_vector(unsigned(ap_phi_mux_conv_i9_i_i413_pn_i_phi_fu_162_p4) + unsigned(ap_phi_mux_filled_V_phi_fu_151_p4));
    grp_fu_205_p0 <= grp_fu_205_p00(32 - 1 downto 0);
    grp_fu_205_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows_1_reg_416),64));
    grp_fu_205_p1 <= grp_fu_205_p10(32 - 1 downto 0);
    grp_fu_205_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(strideBased_cols_bound_per_npc_reg_434),64));
    icmp_ln1312_fu_188_p2 <= "1" when (stride_1_reg_428 = ap_const_lv32_FFFFFFFF) else "0";
    icmp_ln1324_fu_231_p2 <= "1" when (indvar_flatten_reg_125 = mul_ln1305_reg_460) else "0";
    icmp_ln1329_fu_226_p2 <= "1" when (signed(zext_ln1329_fu_222_p1) < signed(strideBased_cols_bound_per_npc_reg_434)) else "0";
    icmp_ln1338_fu_253_p2 <= "1" when (signed(zext_ln1319_fu_244_p1) < signed(cols_bound_per_npc_1_reg_421)) else "0";
    icmp_ln874_fu_402_p2 <= "1" when (filled_V_reg_147 = ap_const_lv7_0) else "0";
    icmp_ln878_fu_293_p2 <= "1" when (unsigned(ap_phi_mux_filled_V_phi_fu_151_p4) < unsigned(sub_ln1347_fu_287_p2)) else "0";
    j_2_fu_264_p3 <= 
        add_ln1329_fu_258_p2 when (icmp_ln1329_fu_226_p2(0) = '1') else 
        ap_const_lv31_1;

    ldata1_blk_n_assign_proc : process(ldata1_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln1324_reg_470_pp0_iter1_reg, icmp_ln878_reg_493, ap_CS_fsm_state8, icmp_ln874_fu_402_p2)
    begin
        if ((((icmp_ln874_fu_402_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((icmp_ln878_reg_493 = ap_const_lv1_0) and (icmp_ln1324_reg_470_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            ldata1_blk_n <= ldata1_full_n;
        else 
            ldata1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldata1_din_assign_proc : process(ldata1_full_n, ap_enable_reg_pp0_iter2, ap_CS_fsm_state8, icmp_ln874_fu_402_p2, ap_predicate_op72_write_state7, localbuffer_V_fu_84, ret_fu_342_p2, ap_block_pp0_stage0_01001)
    begin
        if ((not(((icmp_ln874_fu_402_p2 = ap_const_lv1_0) and (ldata1_full_n = ap_const_logic_0))) and (icmp_ln874_fu_402_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ldata1_din <= localbuffer_V_fu_84;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_predicate_op72_write_state7 = ap_const_boolean_1))) then 
            ldata1_din <= ret_fu_342_p2;
        else 
            ldata1_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ldata1_write_assign_proc : process(ldata1_full_n, ap_enable_reg_pp0_iter2, ap_CS_fsm_state8, icmp_ln874_fu_402_p2, ap_predicate_op72_write_state7, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op72_write_state7 = ap_const_boolean_1)) or (not(((icmp_ln874_fu_402_p2 = ap_const_lv1_0) and (ldata1_full_n = ap_const_logic_0))) and (icmp_ln874_fu_402_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8)))) then 
            ldata1_write <= ap_const_logic_1;
        else 
            ldata1_write <= ap_const_logic_0;
        end if; 
    end process;

    localbuffer_V_3_fu_384_p3 <= 
        r_fu_368_p2 when (p_Result_s_fu_349_p3(0) = '1') else 
        r_2_fu_378_p2;
    or_ln_fu_313_p3 <= (ap_const_lv2_2 & sext_ln1336_fu_278_p1);

    out_mat_470_blk_n_assign_proc : process(out_mat_470_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln1324_reg_470, icmp_ln1338_reg_479)
    begin
        if (((icmp_ln1338_reg_479 = ap_const_lv1_1) and (icmp_ln1324_reg_470 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_mat_470_blk_n <= out_mat_470_empty_n;
        else 
            out_mat_470_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_mat_470_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op52_read_state6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op52_read_state6 = ap_const_boolean_1))) then 
            out_mat_470_read <= ap_const_logic_1;
        else 
            out_mat_470_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_349_p3 <= ret_25_reg_497(7 downto 7);
    r_2_fu_378_p2 <= std_logic_vector(shift_right(unsigned(zext_ln1337_fu_328_p1),to_integer(unsigned('0' & zext_ln799_fu_374_p1(31-1 downto 0)))));
    r_3_fu_336_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1337_fu_328_p1),to_integer(unsigned('0' & zext_ln781_fu_332_p1(31-1 downto 0)))));
    r_fu_368_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1337_fu_328_p1),to_integer(unsigned('0' & zext_ln781_1_fu_364_p1(31-1 downto 0)))));
    ret_25_fu_303_p2 <= std_logic_vector(unsigned(ap_const_lv8_40) - unsigned(zext_ln1347_fu_299_p1));
    ret_fu_342_p2 <= (r_3_fu_336_p2 or localbuffer_V_fu_84);

    rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, stride_empty_n)
    begin
        if ((not(((stride_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1319_fu_236_p3 <= 
        j_reg_136 when (icmp_ln1329_fu_226_p2(0) = '1') else 
        ap_const_lv31_0;
        sext_ln1336_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xf_bits_per_clock_fu_272_p3),5));

    strideBased_cols_bound_per_npc_fu_193_p3 <= 
        cols_bound_per_npc_1_reg_421 when (icmp_ln1312_fu_188_p2(0) = '1') else 
        stride_1_reg_428;

    stride_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, stride_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stride_blk_n <= stride_empty_n;
        else 
            stride_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stride_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, stride_empty_n)
    begin
        if ((not(((stride_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stride_read <= ap_const_logic_1;
        else 
            stride_read <= ap_const_logic_0;
        end if; 
    end process;

    sub_i_fu_211_p2 <= std_logic_vector(unsigned(cols_bound_per_npc_1_reg_421) + unsigned(ap_const_lv32_FFFFFFFF));
    sub_ln1347_fu_287_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln1336_fu_282_p1));
    sub_ln546_fu_359_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(trunc_ln789_reg_503));
    trunc_ln455_fu_356_p1 <= ret_25_reg_497(7 - 1 downto 0);
    trunc_ln789_fu_309_p1 <= ret_25_fu_303_p2(6 - 1 downto 0);
    xf_bits_per_clock_fu_272_p3 <= 
        last_blk_width_read_reg_450 when (bLast_reg_474(0) = '1') else 
        ap_const_lv4_8;
    zext_ln1319_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1319_fu_236_p3),32));
    zext_ln1329_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_136),32));
    zext_ln1336_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1336_fu_278_p1),7));
    zext_ln1337_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter2_val_V_1_reg_168),64));
    zext_ln1347_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_filled_V_phi_fu_151_p4),8));
    zext_ln781_1_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln546_fu_359_p2),64));
    zext_ln781_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(filled_V_reg_147),64));
    zext_ln799_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln455_fu_356_p1),64));
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pp_pipeline_accel_preProcess_9_9_720_720_1_8_8_8_4_8_8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    resize_out_mat_469_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    resize_out_mat_469_empty_n : IN STD_LOGIC;
    resize_out_mat_469_read : OUT STD_LOGIC;
    out_mat_470_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_mat_470_full_n : IN STD_LOGIC;
    out_mat_470_write : OUT STD_LOGIC;
    m_axi_gmem4_AWVALID : OUT STD_LOGIC;
    m_axi_gmem4_AWREADY : IN STD_LOGIC;
    m_axi_gmem4_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem4_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_WVALID : OUT STD_LOGIC;
    m_axi_gmem4_WREADY : IN STD_LOGIC;
    m_axi_gmem4_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem4_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem4_WLAST : OUT STD_LOGIC;
    m_axi_gmem4_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_ARVALID : OUT STD_LOGIC;
    m_axi_gmem4_ARREADY : IN STD_LOGIC;
    m_axi_gmem4_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem4_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_RVALID : IN STD_LOGIC;
    m_axi_gmem4_RREADY : OUT STD_LOGIC;
    m_axi_gmem4_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem4_RLAST : IN STD_LOGIC;
    m_axi_gmem4_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_BVALID : IN STD_LOGIC;
    m_axi_gmem4_BREADY : OUT STD_LOGIC;
    m_axi_gmem4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem4_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_mat_rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_mat_rows_empty_n : IN STD_LOGIC;
    in_mat_rows_read : OUT STD_LOGIC;
    in_mat_cols_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in_mat_cols_empty_n : IN STD_LOGIC;
    in_mat_cols_read : OUT STD_LOGIC;
    params_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    params_empty_n : IN STD_LOGIC;
    params_read : OUT STD_LOGIC );
end;


architecture behav of pp_pipeline_accel_preProcess_9_9_720_720_1_8_8_8_4_8_8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (77 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (77 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (77 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (77 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (77 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (77 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (77 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (77 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (77 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (77 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (77 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (77 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (77 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_const_lv12_FFC : STD_LOGIC_VECTOR (11 downto 0) := "111111111100";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv11_7FB : STD_LOGIC_VECTOR (10 downto 0) := "11111111011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (77 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal resize_out_mat_469_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln49_reg_1653 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_mat_470_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal icmp_ln49_reg_1653_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem4_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln115_reg_1313 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln115_reg_1317 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_mat_rows_blk_n : STD_LOGIC;
    signal in_mat_cols_blk_n : STD_LOGIC;
    signal params_blk_n : STD_LOGIC;
    signal i_reg_205 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_V_2_reg_216 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_2_6_reg_228 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_2_10_reg_240 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_V_reg_252 : STD_LOGIC_VECTOR (7 downto 0);
    signal alpha_reg_V_2_6_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal alpha_reg_V_2_11_reg_276 : STD_LOGIC_VECTOR (7 downto 0);
    signal shiftreg_i_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_309 : STD_LOGIC_VECTOR (30 downto 0);
    signal in_mat_rows_read_reg_1287 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_mat_cols_read_reg_1292 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_reg_1297 : STD_LOGIC_VECTOR (60 downto 0);
    signal add_ln115_fu_343_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state72_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op192_read_state73 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state74_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state75_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state76_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state77_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state78_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state79_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state80_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state81_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln115_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_1313_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_1313_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_1313_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_1313_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_1313_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_1313_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_1313_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_reg_1313_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln115_fu_355_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln115_reg_1317_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1321 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1321_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1321_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1321_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1321_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1321_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1321_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln121_reg_1321_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln122_fu_365_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln122_reg_1329 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln122_reg_1329_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln122_reg_1329_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln122_reg_1329_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln122_reg_1329_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln122_reg_1329_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln122_reg_1329_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln122_reg_1329_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem4_addr_read_reg_1338 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln120_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln120_reg_1343 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln120_1_reg_1348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_13_reg_1353 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1353_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1353_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_1353_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln557_fu_404_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln557_reg_1363 : STD_LOGIC_VECTOR (62 downto 0);
    signal isneg_reg_1368 : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_reg_1368_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal isneg_reg_1368_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_reg_1375 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_426_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_1381 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_1381_pp0_iter5_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln571_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1386 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1386_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1386_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_fu_438_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_1395 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln575_fu_444_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln575_reg_1407 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln575_reg_1407_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln582_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_1412 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_1412_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_1412_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln575_1_fu_453_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln575_1_reg_1418 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln575_1_reg_1418_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal man_V_3_fu_474_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_3_reg_1423 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln581_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_1431 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_1431_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_491_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1437 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1437_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_1_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_1_reg_1443 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_1_reg_1443_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_1_fu_513_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_reg_1449 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_reg_1449_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_1_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_1_reg_1455 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_1_reg_1455_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_526_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln583_reg_1461 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln583_reg_1461_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln585_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_reg_1469 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_536_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln588_reg_1474 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln591_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_reg_1480 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_reg_1485 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_reg_1485_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_1_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_1_reg_1490 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_1_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln591_1_reg_1495 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_1_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_1_reg_1500 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_1_reg_1500_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_fu_678_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln415_reg_1505 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln571_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_reg_1510 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_reg_1516 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_1_fu_703_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln415_1_reg_1522 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln582_1_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_1_reg_1527 : STD_LOGIC_VECTOR (0 downto 0);
    signal alpha_reg_V_0_fu_788_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal alpha_reg_V_0_reg_1533 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_0_fu_846_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_0_reg_1538 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln122_1_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln122_1_reg_1543 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln122_2_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln122_2_reg_1549 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln124_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln124_reg_1555 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln122_3_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln122_3_reg_1561 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln124_1_fu_910_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln124_1_reg_1567 : STD_LOGIC_VECTOR (0 downto 0);
    signal beta_reg_V_2_9_fu_932_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_2_9_reg_1573 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal beta_reg_V_2_11_fu_940_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_2_11_reg_1578 : STD_LOGIC_VECTOR (7 downto 0);
    signal alpha_reg_V_2_10_fu_972_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal alpha_reg_V_2_10_reg_1583 : STD_LOGIC_VECTOR (7 downto 0);
    signal alpha_reg_V_2_13_fu_988_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal alpha_reg_V_2_13_reg_1588 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_2_5_fu_1023_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal alpha_reg_V_2_5_fu_1057_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal grp_fu_1281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_count_reg_1613 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal rhs_i_fu_1078_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_i_reg_1618 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_fu_1082_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_reg_1623 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_1_i_fu_1086_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_1_i_reg_1628 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_1_fu_1090_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_1_reg_1633 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_2_i_fu_1094_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_2_i_reg_1638 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1118_2_fu_1098_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_2_reg_1643 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln49_fu_1102_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state86_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state87_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state88_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state89_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln49_fu_1112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_1653_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_1125_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_1657 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_31_fu_1144_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_31_reg_1662 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_32_fu_1163_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_32_reg_1667 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln5_reg_1672 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_1677 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_1_reg_1682 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_1687 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_2_reg_1692 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1697 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_condition_pp0_exit_iter1_state73 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state86 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_shiftreg_i_phi_fu_292_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_87_phi_fu_303_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_87_reg_300 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln115_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln115_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal grp_fu_320_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_fu_400_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln455_fu_435_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_fu_457_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_fu_464_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_468_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln581_fu_486_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_fu_503_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_1_fu_508_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_fu_548_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_576_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln586_fu_592_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln586_fu_595_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_599_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln586_1_fu_604_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln586_fu_614_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_1_fu_617_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_1_fu_621_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln586_2_fu_626_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln591_fu_636_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln591_fu_641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln591_1_fu_652_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln591_1_fu_657_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_645_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_fu_668_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln585_fu_608_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln415_3_fu_674_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_fu_661_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal qb_1_fu_693_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln585_1_fu_630_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln415_4_fu_699_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln581_fu_713_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln581cast_fu_719_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln581_1_fu_716_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sext_ln581_1cast_fu_728_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln582_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln582_fu_741_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln581_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln581_fu_758_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln603_fu_780_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln582_1_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_1_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_1_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln582_1_fu_799_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln581_1_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_1_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_1_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_1_fu_732_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln581_1_fu_816_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln603_1_fu_838_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln122_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_1_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln122_fu_863_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_2_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_fu_884_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln121_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln124_1_fu_905_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal beta_reg_V_2_7_fu_916_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_2_8_fu_924_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_2_7_fu_916_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_2_9_fu_932_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_2_8_fu_924_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_2_11_fu_940_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal alpha_reg_V_2_7_fu_948_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal alpha_reg_V_2_8_fu_956_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal alpha_reg_V_2_9_fu_964_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal alpha_reg_V_2_12_fu_980_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_2_fu_996_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_2_2_fu_1002_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_2_3_fu_1009_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal beta_reg_V_2_4_fu_1016_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal alpha_reg_V_2_fu_1030_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal alpha_reg_V_2_2_fu_1036_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal alpha_reg_V_2_3_fu_1043_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal alpha_reg_V_2_4_fu_1050_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal width_fu_1064_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal height_fu_1067_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_cast_fu_1108_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_1pix_V_fu_1117_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln703_fu_1121_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_1pix_V_1_fu_1130_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln703_1_fu_1140_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal x_1pix_V_2_fu_1149_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln703_2_fu_1159_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_fu_1171_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_1171_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_25_fu_1197_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_25_fu_1197_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_26_fu_1223_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_26_fu_1223_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln415_fu_1246_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln415_1_fu_1254_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln415_2_fu_1262_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_1pix_V_2_fu_1265_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_1pix_V_1_fu_1257_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_1pix_V_fu_1249_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1281_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1281_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_320_ce : STD_LOGIC;
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (77 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal grp_fu_1281_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1281_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component pp_pipeline_accel_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pp_pipeline_accel_mul_9s_8s_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component pp_pipeline_accel_mul_mul_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fpext_32ns_64_2_no_dsp_1_U239 : component pp_pipeline_accel_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_320_p0,
        ce => grp_fu_320_ce,
        dout => grp_fu_320_p1);

    mul_9s_8s_17_1_1_U240 : component pp_pipeline_accel_mul_9s_8s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        din0 => ret_V_reg_1657,
        din1 => r_V_fu_1171_p1,
        dout => r_V_fu_1171_p2);

    mul_9s_8s_17_1_1_U241 : component pp_pipeline_accel_mul_9s_8s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        din0 => ret_V_31_reg_1662,
        din1 => r_V_25_fu_1197_p1,
        dout => r_V_25_fu_1197_p2);

    mul_9s_8s_17_1_1_U242 : component pp_pipeline_accel_mul_9s_8s_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 8,
        dout_WIDTH => 17)
    port map (
        din0 => ret_V_32_reg_1667,
        din1 => r_V_26_fu_1223_p1,
        dout => r_V_26_fu_1223_p2);

    mul_mul_16ns_16ns_32_4_1_U243 : component pp_pipeline_accel_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1281_p0,
        din1 => grp_fu_1281_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1281_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state73)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state86) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state86)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state86);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_fu_349_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_205 <= add_ln115_fu_343_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                i_reg_205 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_fu_1112_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                k_reg_309 <= add_ln49_fu_1102_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                k_reg_309 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    shiftreg_i_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln115_reg_1313_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                shiftreg_i_reg_288 <= trunc_ln120_1_reg_1348;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
                shiftreg_i_reg_288 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_reg_1313_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                F2_reg_1395 <= F2_fu_438_p2;
                icmp_ln571_reg_1386 <= icmp_ln571_fu_430_p2;
                icmp_ln582_reg_1412 <= icmp_ln582_fu_448_p2;
                trunc_ln575_1_reg_1418 <= trunc_ln575_1_fu_453_p1;
                trunc_ln575_reg_1407 <= trunc_ln575_fu_444_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (icmp_ln115_reg_1313_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                a_V_reg_252 <= alpha_reg_V_2_5_fu_1057_p3;
                alpha_reg_V_2_11_reg_276 <= alpha_reg_V_2_13_reg_1588;
                alpha_reg_V_2_6_reg_264 <= alpha_reg_V_2_10_reg_1583;
                b_V_2_reg_216 <= beta_reg_V_2_5_fu_1023_p3;
                beta_reg_V_2_10_reg_240 <= beta_reg_V_2_11_reg_1578;
                beta_reg_V_2_6_reg_228 <= beta_reg_V_2_9_reg_1573;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln571_reg_1386_pp0_iter6_reg = ap_const_lv1_0) and (icmp_ln115_reg_1313_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln415_1_reg_1522 <= add_ln415_1_fu_703_p2;
                add_ln415_reg_1505 <= add_ln415_fu_678_p2;
                or_ln582_1_reg_1527 <= or_ln582_1_fu_709_p2;
                or_ln582_reg_1516 <= or_ln582_fu_689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_reg_1313_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                alpha_reg_V_0_reg_1533 <= alpha_reg_V_0_fu_788_p3;
                and_ln122_1_reg_1543 <= and_ln122_1_fu_869_p2;
                and_ln122_2_reg_1549 <= and_ln122_2_fu_879_p2;
                and_ln122_3_reg_1561 <= and_ln122_3_fu_900_p2;
                and_ln124_1_reg_1567 <= and_ln124_1_fu_910_p2;
                and_ln124_reg_1555 <= and_ln124_fu_894_p2;
                beta_reg_V_0_reg_1538 <= beta_reg_V_0_fu_846_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (icmp_ln115_reg_1313_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                alpha_reg_V_2_10_reg_1583 <= alpha_reg_V_2_10_fu_972_p3;
                alpha_reg_V_2_13_reg_1588 <= alpha_reg_V_2_13_fu_988_p3;
                beta_reg_V_2_11_reg_1578 <= beta_reg_V_2_11_fu_940_p3;
                beta_reg_V_2_9_reg_1573 <= beta_reg_V_2_9_fu_932_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_reg_1313_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exp_tmp_reg_1375 <= ireg_fu_400_p1(62 downto 52);
                isneg_reg_1368 <= ireg_fu_400_p1(63 downto 63);
                trunc_ln557_reg_1363 <= trunc_ln557_fu_404_p1;
                trunc_ln565_reg_1381 <= trunc_ln565_fu_426_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op192_read_state73 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem4_addr_read_reg_1338 <= m_axi_gmem4_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln115_reg_1313 <= icmp_ln115_fu_349_p2;
                icmp_ln115_reg_1313_pp0_iter1_reg <= icmp_ln115_reg_1313;
                icmp_ln121_reg_1321_pp0_iter1_reg <= icmp_ln121_reg_1321;
                trunc_ln115_reg_1317_pp0_iter1_reg <= trunc_ln115_reg_1317;
                trunc_ln122_reg_1329_pp0_iter1_reg <= trunc_ln122_reg_1329;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln115_reg_1313_pp0_iter2_reg <= icmp_ln115_reg_1313_pp0_iter1_reg;
                icmp_ln115_reg_1313_pp0_iter3_reg <= icmp_ln115_reg_1313_pp0_iter2_reg;
                icmp_ln115_reg_1313_pp0_iter4_reg <= icmp_ln115_reg_1313_pp0_iter3_reg;
                icmp_ln115_reg_1313_pp0_iter5_reg <= icmp_ln115_reg_1313_pp0_iter4_reg;
                icmp_ln115_reg_1313_pp0_iter6_reg <= icmp_ln115_reg_1313_pp0_iter5_reg;
                icmp_ln115_reg_1313_pp0_iter7_reg <= icmp_ln115_reg_1313_pp0_iter6_reg;
                icmp_ln115_reg_1313_pp0_iter8_reg <= icmp_ln115_reg_1313_pp0_iter7_reg;
                icmp_ln121_reg_1321_pp0_iter2_reg <= icmp_ln121_reg_1321_pp0_iter1_reg;
                icmp_ln121_reg_1321_pp0_iter3_reg <= icmp_ln121_reg_1321_pp0_iter2_reg;
                icmp_ln121_reg_1321_pp0_iter4_reg <= icmp_ln121_reg_1321_pp0_iter3_reg;
                icmp_ln121_reg_1321_pp0_iter5_reg <= icmp_ln121_reg_1321_pp0_iter4_reg;
                icmp_ln121_reg_1321_pp0_iter6_reg <= icmp_ln121_reg_1321_pp0_iter5_reg;
                icmp_ln121_reg_1321_pp0_iter7_reg <= icmp_ln121_reg_1321_pp0_iter6_reg;
                icmp_ln571_reg_1386_pp0_iter6_reg <= icmp_ln571_reg_1386;
                icmp_ln571_reg_1386_pp0_iter7_reg <= icmp_ln571_reg_1386_pp0_iter6_reg;
                icmp_ln581_1_reg_1443_pp0_iter7_reg <= icmp_ln581_1_reg_1443;
                icmp_ln581_reg_1431_pp0_iter7_reg <= icmp_ln581_reg_1431;
                icmp_ln582_1_reg_1455_pp0_iter7_reg <= icmp_ln582_1_reg_1455;
                icmp_ln582_reg_1412_pp0_iter6_reg <= icmp_ln582_reg_1412;
                icmp_ln582_reg_1412_pp0_iter7_reg <= icmp_ln582_reg_1412_pp0_iter6_reg;
                icmp_ln603_1_reg_1500_pp0_iter7_reg <= icmp_ln603_1_reg_1500;
                icmp_ln603_reg_1485_pp0_iter7_reg <= icmp_ln603_reg_1485;
                isneg_reg_1368_pp0_iter5_reg <= isneg_reg_1368;
                isneg_reg_1368_pp0_iter6_reg <= isneg_reg_1368_pp0_iter5_reg;
                sh_amt_1_reg_1449_pp0_iter7_reg <= sh_amt_1_reg_1449;
                sh_amt_reg_1437_pp0_iter7_reg <= sh_amt_reg_1437;
                tmp_13_reg_1353_pp0_iter3_reg <= tmp_13_reg_1353;
                tmp_13_reg_1353_pp0_iter4_reg <= tmp_13_reg_1353_pp0_iter3_reg;
                tmp_13_reg_1353_pp0_iter5_reg <= tmp_13_reg_1353_pp0_iter4_reg;
                trunc_ln122_reg_1329_pp0_iter2_reg <= trunc_ln122_reg_1329_pp0_iter1_reg;
                trunc_ln122_reg_1329_pp0_iter3_reg <= trunc_ln122_reg_1329_pp0_iter2_reg;
                trunc_ln122_reg_1329_pp0_iter4_reg <= trunc_ln122_reg_1329_pp0_iter3_reg;
                trunc_ln122_reg_1329_pp0_iter5_reg <= trunc_ln122_reg_1329_pp0_iter4_reg;
                trunc_ln122_reg_1329_pp0_iter6_reg <= trunc_ln122_reg_1329_pp0_iter5_reg;
                trunc_ln122_reg_1329_pp0_iter7_reg <= trunc_ln122_reg_1329_pp0_iter6_reg;
                trunc_ln565_reg_1381_pp0_iter5_reg <= trunc_ln565_reg_1381;
                trunc_ln575_1_reg_1418_pp0_iter6_reg <= trunc_ln575_1_reg_1418;
                trunc_ln575_reg_1407_pp0_iter6_reg <= trunc_ln575_reg_1407;
                trunc_ln583_reg_1461_pp0_iter7_reg <= trunc_ln583_reg_1461;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln121_reg_1321 <= icmp_ln121_fu_359_p2;
                trunc_ln115_reg_1317 <= trunc_ln115_fu_355_p1;
                trunc_ln122_reg_1329 <= trunc_ln122_fu_365_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln49_reg_1653 <= icmp_ln49_fu_1112_p2;
                icmp_ln49_reg_1653_pp1_iter1_reg <= icmp_ln49_reg_1653;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                icmp_ln49_reg_1653_pp1_iter2_reg <= icmp_ln49_reg_1653_pp1_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln571_reg_1386 = ap_const_lv1_0) and (icmp_ln115_reg_1313_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln581_1_reg_1443 <= icmp_ln581_1_fu_498_p2;
                icmp_ln581_reg_1431 <= icmp_ln581_fu_481_p2;
                icmp_ln582_1_reg_1455 <= icmp_ln582_1_fu_521_p2;
                icmp_ln585_1_reg_1490 <= icmp_ln585_1_fu_564_p2;
                icmp_ln585_reg_1469 <= icmp_ln585_fu_530_p2;
                icmp_ln591_1_reg_1495 <= icmp_ln591_1_fu_570_p2;
                icmp_ln591_reg_1480 <= icmp_ln591_fu_543_p2;
                icmp_ln603_1_reg_1500 <= icmp_ln603_1_fu_586_p2;
                icmp_ln603_reg_1485 <= icmp_ln603_fu_558_p2;
                sh_amt_1_reg_1449 <= sh_amt_1_fu_513_p3;
                sh_amt_reg_1437 <= sh_amt_fu_491_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                in_mat_cols_read_reg_1292 <= in_mat_cols_dout;
                in_mat_rows_read_reg_1287 <= in_mat_rows_dout;
                trunc_ln_reg_1297 <= params_dout(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                loop_count_reg_1613 <= grp_fu_1281_p2;
                    rhs_1_i_reg_1628(7 downto 0) <= rhs_1_i_fu_1086_p1(7 downto 0);
                    rhs_2_i_reg_1638(7 downto 0) <= rhs_2_i_fu_1094_p1(7 downto 0);
                    rhs_i_reg_1618(7 downto 0) <= rhs_i_fu_1078_p1(7 downto 0);
                sext_ln1118_1_reg_1633 <= sext_ln1118_1_fu_1090_p1;
                sext_ln1118_2_reg_1643 <= sext_ln1118_2_fu_1098_p1;
                sext_ln1118_reg_1623 <= sext_ln1118_fu_1082_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_reg_1313_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                man_V_3_reg_1423 <= man_V_3_fu_474_p3;
                select_ln588_reg_1474 <= select_ln588_fu_536_p3;
                trunc_ln583_reg_1461 <= trunc_ln583_fu_526_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln49_reg_1653 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ret_V_31_reg_1662 <= ret_V_31_fu_1144_p2;
                ret_V_32_reg_1667 <= ret_V_32_fu_1163_p2;
                ret_V_reg_1657 <= ret_V_fu_1125_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln49_reg_1653_pp1_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_10_reg_1687 <= r_V_25_fu_1197_p2(3 downto 3);
                tmp_11_reg_1697 <= r_V_26_fu_1223_p2(3 downto 3);
                tmp_reg_1677 <= r_V_fu_1171_p2(3 downto 3);
                trunc_ln5_reg_1672 <= r_V_fu_1171_p2(11 downto 4);
                trunc_ln708_1_reg_1682 <= r_V_25_fu_1197_p2(11 downto 4);
                trunc_ln708_2_reg_1692 <= r_V_26_fu_1223_p2(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_reg_1313_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_13_reg_1353 <= ap_phi_mux_empty_87_phi_fu_303_p4(31 downto 31);
                trunc_ln120_reg_1343 <= trunc_ln120_fu_374_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln115_reg_1313_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln120_1_reg_1348 <= ap_phi_mux_empty_87_phi_fu_303_p4(63 downto 32);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln115_reg_1313_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                xor_ln571_reg_1510 <= xor_ln571_fu_684_p2;
            end if;
        end if;
    end process;
    rhs_i_reg_1618(8) <= '0';
    rhs_1_i_reg_1628(8) <= '0';
    rhs_2_i_reg_1638(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem4_ARREADY, in_mat_rows_empty_n, in_mat_cols_empty_n, params_empty_n, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp1_iter0, icmp_ln49_fu_1112_p2, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (params_empty_n = ap_const_logic_0) or (in_mat_cols_empty_n = ap_const_logic_0) or (in_mat_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (m_axi_gmem4_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln49_fu_1112_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((icmp_ln49_fu_1112_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_438_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_fu_435_p1));
    add_ln115_fu_343_p2 <= std_logic_vector(unsigned(i_reg_205) + unsigned(ap_const_lv3_1));
    add_ln415_1_fu_703_p2 <= std_logic_vector(unsigned(select_ln585_1_fu_630_p3) + unsigned(zext_ln415_4_fu_699_p1));
    add_ln415_fu_678_p2 <= std_logic_vector(unsigned(select_ln585_fu_608_p3) + unsigned(zext_ln415_3_fu_674_p1));
    add_ln49_fu_1102_p2 <= std_logic_vector(unsigned(k_reg_309) + unsigned(ap_const_lv31_1));
    add_ln581_fu_503_p2 <= std_logic_vector(unsigned(F2_reg_1395) + unsigned(ap_const_lv12_FFC));
    add_ln591_1_fu_652_p2 <= std_logic_vector(unsigned(trunc_ln575_1_reg_1418_pp0_iter6_reg) + unsigned(ap_const_lv11_7FB));
    add_ln591_fu_636_p2 <= std_logic_vector(unsigned(trunc_ln575_reg_1407_pp0_iter6_reg) + unsigned(ap_const_lv6_3F));
    alpha_reg_V_0_fu_788_p3 <= 
        ap_const_lv8_0 when (icmp_ln571_reg_1386_pp0_iter7_reg(0) = '1') else 
        select_ln603_fu_780_p3;
    alpha_reg_V_2_10_fu_972_p3 <= 
        alpha_reg_V_2_10_reg_1583 when (and_ln124_1_fu_910_p2(0) = '1') else 
        alpha_reg_V_2_9_fu_964_p3;
    alpha_reg_V_2_12_fu_980_p3 <= 
        alpha_reg_V_0_fu_788_p3 when (and_ln122_3_fu_900_p2(0) = '1') else 
        alpha_reg_V_2_13_reg_1588;
    alpha_reg_V_2_13_fu_988_p3 <= 
        alpha_reg_V_2_13_reg_1588 when (and_ln124_1_fu_910_p2(0) = '1') else 
        alpha_reg_V_2_12_fu_980_p3;
    alpha_reg_V_2_2_fu_1036_p3 <= 
        a_V_reg_252 when (and_ln122_2_reg_1549(0) = '1') else 
        alpha_reg_V_2_fu_1030_p3;
    alpha_reg_V_2_3_fu_1043_p3 <= 
        a_V_reg_252 when (and_ln124_reg_1555(0) = '1') else 
        alpha_reg_V_2_2_fu_1036_p3;
    alpha_reg_V_2_4_fu_1050_p3 <= 
        a_V_reg_252 when (and_ln122_3_reg_1561(0) = '1') else 
        alpha_reg_V_2_3_fu_1043_p3;
    alpha_reg_V_2_5_fu_1057_p3 <= 
        a_V_reg_252 when (and_ln124_1_reg_1567(0) = '1') else 
        alpha_reg_V_2_4_fu_1050_p3;
    alpha_reg_V_2_7_fu_948_p3 <= 
        alpha_reg_V_0_fu_788_p3 when (and_ln122_2_fu_879_p2(0) = '1') else 
        alpha_reg_V_2_10_reg_1583;
    alpha_reg_V_2_8_fu_956_p3 <= 
        alpha_reg_V_2_10_reg_1583 when (and_ln124_fu_894_p2(0) = '1') else 
        alpha_reg_V_2_7_fu_948_p3;
    alpha_reg_V_2_9_fu_964_p3 <= 
        alpha_reg_V_2_10_reg_1583 when (and_ln122_3_fu_900_p2(0) = '1') else 
        alpha_reg_V_2_8_fu_956_p3;
    alpha_reg_V_2_fu_1030_p3 <= 
        alpha_reg_V_0_reg_1533 when (and_ln122_1_reg_1543(0) = '1') else 
        a_V_reg_252;
    and_ln122_1_fu_869_p2 <= (icmp_ln121_reg_1321_pp0_iter7_reg and and_ln122_fu_863_p2);
    and_ln122_2_fu_879_p2 <= (icmp_ln122_2_fu_874_p2 and icmp_ln121_reg_1321_pp0_iter7_reg);
    and_ln122_3_fu_900_p2 <= (icmp_ln124_fu_884_p2 and icmp_ln121_reg_1321_pp0_iter7_reg);
    and_ln122_fu_863_p2 <= (icmp_ln122_fu_853_p2 and icmp_ln122_1_fu_858_p2);
    and_ln124_1_fu_910_p2 <= (xor_ln121_fu_889_p2 and icmp_ln124_1_fu_905_p2);
    and_ln124_fu_894_p2 <= (xor_ln121_fu_889_p2 and icmp_ln124_fu_884_p2);
    and_ln581_1_fu_811_p2 <= (xor_ln582_1_fu_806_p2 and icmp_ln581_1_reg_1443_pp0_iter7_reg);
    and_ln581_fu_753_p2 <= (xor_ln582_fu_748_p2 and icmp_ln581_reg_1431_pp0_iter7_reg);
    and_ln582_1_fu_795_p2 <= (xor_ln571_reg_1510 and icmp_ln582_1_reg_1455_pp0_iter7_reg);
    and_ln582_fu_737_p2 <= (xor_ln571_reg_1510 and icmp_ln582_reg_1412_pp0_iter7_reg);
    and_ln603_1_fu_833_p2 <= (xor_ln581_1_fu_827_p2 and icmp_ln603_1_reg_1500_pp0_iter7_reg);
    and_ln603_fu_775_p2 <= (xor_ln581_fu_769_p2 and icmp_ln603_reg_1485_pp0_iter7_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(71);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(76);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state82 <= ap_CS_fsm(72);
    ap_CS_fsm_state85 <= ap_CS_fsm(75);
    ap_CS_fsm_state90 <= ap_CS_fsm(77);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_gmem4_RVALID, ap_enable_reg_pp0_iter1, ap_predicate_op192_read_state73)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_predicate_op192_read_state73 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem4_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_gmem4_RVALID, ap_enable_reg_pp0_iter1, ap_predicate_op192_read_state73)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_predicate_op192_read_state73 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (m_axi_gmem4_RVALID = ap_const_logic_0));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(resize_out_mat_469_empty_n, out_mat_470_full_n, ap_enable_reg_pp1_iter1, icmp_ln49_reg_1653, ap_enable_reg_pp1_iter3, icmp_ln49_reg_1653_pp1_iter2_reg)
    begin
                ap_block_pp1_stage0_01001 <= (((icmp_ln49_reg_1653_pp1_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (out_mat_470_full_n = ap_const_logic_0)) or ((icmp_ln49_reg_1653 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (resize_out_mat_469_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(resize_out_mat_469_empty_n, out_mat_470_full_n, ap_enable_reg_pp1_iter1, icmp_ln49_reg_1653, ap_enable_reg_pp1_iter3, icmp_ln49_reg_1653_pp1_iter2_reg)
    begin
                ap_block_pp1_stage0_11001 <= (((icmp_ln49_reg_1653_pp1_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (out_mat_470_full_n = ap_const_logic_0)) or ((icmp_ln49_reg_1653 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (resize_out_mat_469_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(resize_out_mat_469_empty_n, out_mat_470_full_n, ap_enable_reg_pp1_iter1, icmp_ln49_reg_1653, ap_enable_reg_pp1_iter3, icmp_ln49_reg_1653_pp1_iter2_reg)
    begin
                ap_block_pp1_stage0_subdone <= (((icmp_ln49_reg_1653_pp1_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (out_mat_470_full_n = ap_const_logic_0)) or ((icmp_ln49_reg_1653 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (resize_out_mat_469_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, in_mat_rows_empty_n, in_mat_cols_empty_n, params_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (params_empty_n = ap_const_logic_0) or (in_mat_cols_empty_n = ap_const_logic_0) or (in_mat_rows_empty_n = ap_const_logic_0));
    end process;

        ap_block_state72_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state73_pp0_stage0_iter1_assign_proc : process(m_axi_gmem4_RVALID, ap_predicate_op192_read_state73)
    begin
                ap_block_state73_pp0_stage0_iter1 <= ((ap_predicate_op192_read_state73 = ap_const_boolean_1) and (m_axi_gmem4_RVALID = ap_const_logic_0));
    end process;

        ap_block_state74_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state87_pp1_stage0_iter1_assign_proc : process(resize_out_mat_469_empty_n, icmp_ln49_reg_1653)
    begin
                ap_block_state87_pp1_stage0_iter1 <= ((icmp_ln49_reg_1653 = ap_const_lv1_1) and (resize_out_mat_469_empty_n = ap_const_logic_0));
    end process;

        ap_block_state88_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state89_pp1_stage0_iter3_assign_proc : process(out_mat_470_full_n, icmp_ln49_reg_1653_pp1_iter2_reg)
    begin
                ap_block_state89_pp1_stage0_iter3 <= ((icmp_ln49_reg_1653_pp1_iter2_reg = ap_const_lv1_1) and (out_mat_470_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter1_state73_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state73 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state73 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln115_fu_349_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln115_fu_349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state86_assign_proc : process(icmp_ln49_fu_1112_p2)
    begin
        if ((icmp_ln49_fu_1112_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state86 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state86 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_empty_87_phi_fu_303_p4_assign_proc : process(icmp_ln115_reg_1313_pp0_iter1_reg, trunc_ln115_reg_1317_pp0_iter1_reg, gmem4_addr_read_reg_1338, ap_phi_reg_pp0_iter2_empty_87_reg_300, zext_ln115_fu_369_p1)
    begin
        if ((icmp_ln115_reg_1313_pp0_iter1_reg = ap_const_lv1_0)) then
            if ((trunc_ln115_reg_1317_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_empty_87_phi_fu_303_p4 <= zext_ln115_fu_369_p1;
            elsif ((trunc_ln115_reg_1317_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_empty_87_phi_fu_303_p4 <= gmem4_addr_read_reg_1338;
            else 
                ap_phi_mux_empty_87_phi_fu_303_p4 <= ap_phi_reg_pp0_iter2_empty_87_reg_300;
            end if;
        else 
            ap_phi_mux_empty_87_phi_fu_303_p4 <= ap_phi_reg_pp0_iter2_empty_87_reg_300;
        end if; 
    end process;


    ap_phi_mux_shiftreg_i_phi_fu_292_p4_assign_proc : process(ap_block_pp0_stage0, shiftreg_i_reg_288, icmp_ln115_reg_1313_pp0_iter2_reg, trunc_ln120_1_reg_1348, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln115_reg_1313_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_shiftreg_i_phi_fu_292_p4 <= trunc_ln120_1_reg_1348;
        else 
            ap_phi_mux_shiftreg_i_phi_fu_292_p4 <= shiftreg_i_reg_288;
        end if; 
    end process;

    ap_phi_reg_pp0_iter2_empty_87_reg_300 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op192_read_state73_assign_proc : process(icmp_ln115_reg_1313, trunc_ln115_reg_1317)
    begin
                ap_predicate_op192_read_state73 <= ((trunc_ln115_reg_1317 = ap_const_lv1_0) and (icmp_ln115_reg_1313 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_1_fu_621_p2 <= std_logic_vector(shift_right(signed(man_V_3_reg_1423),to_integer(unsigned('0' & zext_ln586_1_fu_617_p1(31-1 downto 0)))));
    ashr_ln586_fu_599_p2 <= std_logic_vector(shift_right(signed(man_V_3_reg_1423),to_integer(unsigned('0' & zext_ln586_fu_595_p1(31-1 downto 0)))));
    beta_reg_V_0_fu_846_p3 <= 
        ap_const_lv8_0 when (icmp_ln571_reg_1386_pp0_iter7_reg(0) = '1') else 
        select_ln603_1_fu_838_p3;
    beta_reg_V_2_11_fu_940_p2 <= beta_reg_V_2_11_reg_1578;
    beta_reg_V_2_11_fu_940_p3 <= 
        beta_reg_V_0_fu_846_p3 when (and_ln124_1_fu_910_p2(0) = '1') else 
        beta_reg_V_2_11_fu_940_p2;
    beta_reg_V_2_2_fu_1002_p3 <= 
        b_V_2_reg_216 when (and_ln122_2_reg_1549(0) = '1') else 
        beta_reg_V_2_fu_996_p3;
    beta_reg_V_2_3_fu_1009_p3 <= 
        b_V_2_reg_216 when (and_ln124_reg_1555(0) = '1') else 
        beta_reg_V_2_2_fu_1002_p3;
    beta_reg_V_2_4_fu_1016_p3 <= 
        b_V_2_reg_216 when (and_ln122_3_reg_1561(0) = '1') else 
        beta_reg_V_2_3_fu_1009_p3;
    beta_reg_V_2_5_fu_1023_p3 <= 
        b_V_2_reg_216 when (and_ln124_1_reg_1567(0) = '1') else 
        beta_reg_V_2_4_fu_1016_p3;
    beta_reg_V_2_7_fu_916_p2 <= beta_reg_V_2_9_reg_1573;
    beta_reg_V_2_7_fu_916_p3 <= 
        beta_reg_V_0_fu_846_p3 when (and_ln124_fu_894_p2(0) = '1') else 
        beta_reg_V_2_7_fu_916_p2;
    beta_reg_V_2_8_fu_924_p1 <= beta_reg_V_2_9_reg_1573;
    beta_reg_V_2_8_fu_924_p3 <= 
        beta_reg_V_2_8_fu_924_p1 when (and_ln122_3_fu_900_p2(0) = '1') else 
        beta_reg_V_2_7_fu_916_p3;
    beta_reg_V_2_9_fu_932_p1 <= beta_reg_V_2_9_reg_1573;
    beta_reg_V_2_9_fu_932_p3 <= 
        beta_reg_V_2_9_fu_932_p1 when (and_ln124_1_fu_910_p2(0) = '1') else 
        beta_reg_V_2_8_fu_924_p3;
    beta_reg_V_2_fu_996_p3 <= 
        b_V_2_reg_216 when (and_ln122_1_reg_1543(0) = '1') else 
        beta_reg_V_0_reg_1538;

    gmem4_blk_n_AR_assign_proc : process(m_axi_gmem4_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem4_blk_n_AR <= m_axi_gmem4_ARREADY;
        else 
            gmem4_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem4_blk_n_R_assign_proc : process(m_axi_gmem4_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln115_reg_1313, trunc_ln115_reg_1317)
    begin
        if (((trunc_ln115_reg_1317 = ap_const_lv1_0) and (icmp_ln115_reg_1313 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem4_blk_n_R <= m_axi_gmem4_RVALID;
        else 
            gmem4_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_1281_p0 <= grp_fu_1281_p00(16 - 1 downto 0);
    grp_fu_1281_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_fu_1067_p1),32));
    grp_fu_1281_p1 <= grp_fu_1281_p10(16 - 1 downto 0);
    grp_fu_1281_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_fu_1064_p1),32));

    grp_fu_320_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_320_ce <= ap_const_logic_1;
        else 
            grp_fu_320_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_320_p0 <= trunc_ln120_reg_1343;
    height_fu_1067_p1 <= in_mat_rows_read_reg_1287(16 - 1 downto 0);
    icmp_ln115_fu_349_p2 <= "1" when (i_reg_205 = ap_const_lv3_6) else "0";
    icmp_ln121_fu_359_p2 <= "1" when (unsigned(i_reg_205) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln122_1_fu_858_p2 <= "0" when (trunc_ln122_reg_1329_pp0_iter7_reg = ap_const_lv2_1) else "1";
    icmp_ln122_2_fu_874_p2 <= "1" when (trunc_ln122_reg_1329_pp0_iter7_reg = ap_const_lv2_1) else "0";
    icmp_ln122_fu_853_p2 <= "0" when (trunc_ln122_reg_1329_pp0_iter7_reg = ap_const_lv2_0) else "1";
    icmp_ln124_1_fu_905_p2 <= "1" when (trunc_ln122_reg_1329_pp0_iter7_reg = ap_const_lv2_3) else "0";
    icmp_ln124_fu_884_p2 <= "1" when (trunc_ln122_reg_1329_pp0_iter7_reg = ap_const_lv2_0) else "0";
    icmp_ln49_fu_1112_p2 <= "1" when (signed(k_cast_fu_1108_p1) < signed(loop_count_reg_1613)) else "0";
    icmp_ln571_fu_430_p2 <= "1" when (trunc_ln557_reg_1363 = ap_const_lv63_0) else "0";
    icmp_ln581_1_fu_498_p2 <= "1" when (signed(F2_reg_1395) > signed(ap_const_lv12_4)) else "0";
    icmp_ln581_fu_481_p2 <= "1" when (signed(F2_reg_1395) > signed(ap_const_lv12_0)) else "0";
    icmp_ln582_1_fu_521_p2 <= "1" when (F2_reg_1395 = ap_const_lv12_4) else "0";
    icmp_ln582_fu_448_p2 <= "1" when (exp_tmp_reg_1375 = ap_const_lv11_433) else "0";
    icmp_ln585_1_fu_564_p2 <= "1" when (unsigned(sh_amt_1_fu_513_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln585_fu_530_p2 <= "1" when (unsigned(sh_amt_fu_491_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln591_1_fu_570_p2 <= "1" when (signed(add_ln581_fu_503_p2) > signed(ap_const_lv12_36)) else "0";
    icmp_ln591_fu_543_p2 <= "1" when (signed(F2_reg_1395) > signed(ap_const_lv12_36)) else "0";
    icmp_ln603_1_fu_586_p2 <= "1" when (tmp_15_fu_576_p4 = ap_const_lv9_0) else "0";
    icmp_ln603_fu_558_p2 <= "1" when (tmp_14_fu_548_p4 = ap_const_lv9_0) else "0";

    in_mat_cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_mat_cols_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_mat_cols_blk_n <= in_mat_cols_empty_n;
        else 
            in_mat_cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_mat_cols_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_mat_rows_empty_n, in_mat_cols_empty_n, params_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (params_empty_n = ap_const_logic_0) or (in_mat_cols_empty_n = ap_const_logic_0) or (in_mat_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_mat_cols_read <= ap_const_logic_1;
        else 
            in_mat_cols_read <= ap_const_logic_0;
        end if; 
    end process;


    in_mat_rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_mat_rows_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_mat_rows_blk_n <= in_mat_rows_empty_n;
        else 
            in_mat_rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_mat_rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_mat_rows_empty_n, in_mat_cols_empty_n, params_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (params_empty_n = ap_const_logic_0) or (in_mat_cols_empty_n = ap_const_logic_0) or (in_mat_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_mat_rows_read <= ap_const_logic_1;
        else 
            in_mat_rows_read <= ap_const_logic_0;
        end if; 
    end process;

    ireg_fu_400_p1 <= grp_fu_320_p1;
    k_cast_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_309),32));
    m_axi_gmem4_ARADDR <= sext_ln115_fu_333_p1;
    m_axi_gmem4_ARBURST <= ap_const_lv2_0;
    m_axi_gmem4_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem4_ARID <= ap_const_lv1_0;
    m_axi_gmem4_ARLEN <= ap_const_lv32_3;
    m_axi_gmem4_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem4_ARPROT <= ap_const_lv3_0;
    m_axi_gmem4_ARQOS <= ap_const_lv4_0;
    m_axi_gmem4_ARREGION <= ap_const_lv4_0;
    m_axi_gmem4_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem4_ARUSER <= ap_const_lv1_0;

    m_axi_gmem4_ARVALID_assign_proc : process(m_axi_gmem4_ARREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (m_axi_gmem4_ARREADY = ap_const_logic_1))) then 
            m_axi_gmem4_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem4_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem4_AWADDR <= ap_const_lv64_0;
    m_axi_gmem4_AWBURST <= ap_const_lv2_0;
    m_axi_gmem4_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem4_AWID <= ap_const_lv1_0;
    m_axi_gmem4_AWLEN <= ap_const_lv32_0;
    m_axi_gmem4_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem4_AWPROT <= ap_const_lv3_0;
    m_axi_gmem4_AWQOS <= ap_const_lv4_0;
    m_axi_gmem4_AWREGION <= ap_const_lv4_0;
    m_axi_gmem4_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem4_AWUSER <= ap_const_lv1_0;
    m_axi_gmem4_AWVALID <= ap_const_logic_0;
    m_axi_gmem4_BREADY <= ap_const_logic_0;

    m_axi_gmem4_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op192_read_state73, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op192_read_state73 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem4_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem4_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem4_WDATA <= ap_const_lv64_0;
    m_axi_gmem4_WID <= ap_const_lv1_0;
    m_axi_gmem4_WLAST <= ap_const_logic_0;
    m_axi_gmem4_WSTRB <= ap_const_lv8_0;
    m_axi_gmem4_WUSER <= ap_const_lv1_0;
    m_axi_gmem4_WVALID <= ap_const_logic_0;
    man_V_1_fu_468_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_fu_464_p1));
    man_V_3_fu_474_p3 <= 
        man_V_1_fu_468_p2 when (isneg_reg_1368_pp0_iter5_reg(0) = '1') else 
        zext_ln569_fu_464_p1;
    man_V_fu_457_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_1381_pp0_iter5_reg);
    or_ln581_1_fu_823_p2 <= (or_ln582_1_reg_1527 or icmp_ln581_1_reg_1443_pp0_iter7_reg);
    or_ln581_fu_765_p2 <= (or_ln582_reg_1516 or icmp_ln581_reg_1431_pp0_iter7_reg);
    or_ln582_1_fu_709_p2 <= (icmp_ln582_1_reg_1455 or icmp_ln571_reg_1386_pp0_iter6_reg);
    or_ln582_fu_689_p2 <= (icmp_ln582_reg_1412_pp0_iter6_reg or icmp_ln571_reg_1386_pp0_iter6_reg);
    out_1pix_V_1_fu_1257_p2 <= std_logic_vector(unsigned(trunc_ln708_1_reg_1682) + unsigned(zext_ln415_1_fu_1254_p1));
    out_1pix_V_2_fu_1265_p2 <= std_logic_vector(unsigned(trunc_ln708_2_reg_1692) + unsigned(zext_ln415_2_fu_1262_p1));
    out_1pix_V_fu_1249_p2 <= std_logic_vector(unsigned(trunc_ln5_reg_1672) + unsigned(zext_ln415_fu_1246_p1));

    out_mat_470_blk_n_assign_proc : process(out_mat_470_full_n, ap_block_pp1_stage0, ap_enable_reg_pp1_iter3, icmp_ln49_reg_1653_pp1_iter2_reg)
    begin
        if (((icmp_ln49_reg_1653_pp1_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            out_mat_470_blk_n <= out_mat_470_full_n;
        else 
            out_mat_470_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_mat_470_din <= ((out_1pix_V_2_fu_1265_p2 & out_1pix_V_1_fu_1257_p2) & out_1pix_V_fu_1249_p2);

    out_mat_470_write_assign_proc : process(ap_enable_reg_pp1_iter3, icmp_ln49_reg_1653_pp1_iter2_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln49_reg_1653_pp1_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            out_mat_470_write <= ap_const_logic_1;
        else 
            out_mat_470_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_661_p3 <= man_V_3_reg_1423(to_integer(unsigned(zext_ln591_1_fu_657_p1)) downto to_integer(unsigned(zext_ln591_1_fu_657_p1))) when (to_integer(unsigned(zext_ln591_1_fu_657_p1))>= 0 and to_integer(unsigned(zext_ln591_1_fu_657_p1))<=53) else "-";
    p_Result_s_fu_645_p3 <= man_V_3_reg_1423(to_integer(unsigned(zext_ln591_fu_641_p1)) downto to_integer(unsigned(zext_ln591_fu_641_p1))) when (to_integer(unsigned(zext_ln591_fu_641_p1))>= 0 and to_integer(unsigned(zext_ln591_fu_641_p1))<=53) else "-";

    params_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, params_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            params_blk_n <= params_empty_n;
        else 
            params_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    params_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, in_mat_rows_empty_n, in_mat_cols_empty_n, params_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (params_empty_n = ap_const_logic_0) or (in_mat_cols_empty_n = ap_const_logic_0) or (in_mat_rows_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            params_read <= ap_const_logic_1;
        else 
            params_read <= ap_const_logic_0;
        end if; 
    end process;

    qb_1_fu_693_p3 <= 
        isneg_reg_1368_pp0_iter6_reg when (icmp_ln591_1_reg_1495(0) = '1') else 
        p_Result_1_fu_661_p3;
    qb_fu_668_p3 <= 
        isneg_reg_1368_pp0_iter6_reg when (icmp_ln591_reg_1480(0) = '1') else 
        p_Result_s_fu_645_p3;
    r_V_25_fu_1197_p1 <= sext_ln1118_1_reg_1633(8 - 1 downto 0);
    r_V_26_fu_1223_p1 <= sext_ln1118_2_reg_1643(8 - 1 downto 0);
    r_V_fu_1171_p1 <= sext_ln1118_reg_1623(8 - 1 downto 0);

    resize_out_mat_469_blk_n_assign_proc : process(resize_out_mat_469_empty_n, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln49_reg_1653)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln49_reg_1653 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            resize_out_mat_469_blk_n <= resize_out_mat_469_empty_n;
        else 
            resize_out_mat_469_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    resize_out_mat_469_read_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln49_reg_1653, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln49_reg_1653 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1))) then 
            resize_out_mat_469_read <= ap_const_logic_1;
        else 
            resize_out_mat_469_read <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_31_fu_1144_p2 <= std_logic_vector(unsigned(zext_ln703_1_fu_1140_p1) - unsigned(rhs_1_i_reg_1628));
    ret_V_32_fu_1163_p2 <= std_logic_vector(unsigned(zext_ln703_2_fu_1159_p1) - unsigned(rhs_2_i_reg_1638));
    ret_V_fu_1125_p2 <= std_logic_vector(unsigned(zext_ln703_fu_1121_p1) - unsigned(rhs_i_reg_1618));
    rhs_1_i_fu_1086_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(alpha_reg_V_2_6_reg_264),9));
    rhs_2_i_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_V_reg_252),9));
    rhs_i_fu_1078_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(alpha_reg_V_2_11_reg_276),9));
    select_ln581_1_fu_816_p3 <= 
        add_ln415_1_reg_1522 when (and_ln581_1_fu_811_p2(0) = '1') else 
        select_ln582_1_fu_799_p3;
    select_ln581_fu_758_p3 <= 
        add_ln415_reg_1505 when (and_ln581_fu_753_p2(0) = '1') else 
        select_ln582_fu_741_p3;
    select_ln582_1_fu_799_p3 <= 
        trunc_ln583_reg_1461_pp0_iter7_reg when (and_ln582_1_fu_795_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln582_fu_741_p3 <= 
        trunc_ln583_reg_1461_pp0_iter7_reg when (and_ln582_fu_737_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln585_1_fu_630_p3 <= 
        trunc_ln586_2_fu_626_p1 when (icmp_ln585_1_reg_1490(0) = '1') else 
        select_ln588_reg_1474;
    select_ln585_fu_608_p3 <= 
        trunc_ln586_1_fu_604_p1 when (icmp_ln585_reg_1469(0) = '1') else 
        select_ln588_reg_1474;
    select_ln588_fu_536_p3 <= 
        ap_const_lv8_FF when (tmp_13_reg_1353_pp0_iter5_reg(0) = '1') else 
        ap_const_lv8_0;
    select_ln603_1_fu_838_p3 <= 
        shl_ln604_1_fu_732_p2 when (and_ln603_1_fu_833_p2(0) = '1') else 
        select_ln581_1_fu_816_p3;
    select_ln603_fu_780_p3 <= 
        shl_ln604_fu_723_p2 when (and_ln603_fu_775_p2(0) = '1') else 
        select_ln581_fu_758_p3;
        sext_ln1118_1_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(beta_reg_V_2_6_reg_228),17));

        sext_ln1118_2_fu_1098_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_V_2_reg_216),17));

        sext_ln1118_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(beta_reg_V_2_10_reg_240),17));

        sext_ln115_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_1297),64));

        sext_ln581_1_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_1449_pp0_iter7_reg),15));

    sext_ln581_1cast_fu_728_p1 <= sext_ln581_1_fu_716_p1(8 - 1 downto 0);
        sext_ln581_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1437_pp0_iter7_reg),15));

    sext_ln581cast_fu_719_p1 <= sext_ln581_fu_713_p1(8 - 1 downto 0);
        sext_ln586_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_1449),32));

    sh_amt_1_fu_513_p3 <= 
        add_ln581_fu_503_p2 when (icmp_ln581_1_fu_498_p2(0) = '1') else 
        sub_ln581_1_fu_508_p2;
    sh_amt_fu_491_p3 <= 
        F2_reg_1395 when (icmp_ln581_fu_481_p2(0) = '1') else 
        sub_ln581_fu_486_p2;
    shl_ln604_1_fu_732_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_1461_pp0_iter7_reg),to_integer(unsigned('0' & sext_ln581_1cast_fu_728_p1(8-1 downto 0)))));
    shl_ln604_fu_723_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_1461_pp0_iter7_reg),to_integer(unsigned('0' & sext_ln581cast_fu_719_p1(8-1 downto 0)))));
    sub_ln581_1_fu_508_p2 <= std_logic_vector(unsigned(ap_const_lv12_4) - unsigned(F2_reg_1395));
    sub_ln581_fu_486_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(F2_reg_1395));
    tmp_14_fu_548_p4 <= sh_amt_fu_491_p3(11 downto 3);
    tmp_15_fu_576_p4 <= sh_amt_1_fu_513_p3(11 downto 3);
    trunc_ln115_fu_355_p1 <= i_reg_205(1 - 1 downto 0);
    trunc_ln120_fu_374_p1 <= ap_phi_mux_empty_87_phi_fu_303_p4(32 - 1 downto 0);
    trunc_ln122_fu_365_p1 <= i_reg_205(2 - 1 downto 0);
    trunc_ln557_fu_404_p1 <= ireg_fu_400_p1(63 - 1 downto 0);
    trunc_ln565_fu_426_p1 <= ireg_fu_400_p1(52 - 1 downto 0);
    trunc_ln575_1_fu_453_p1 <= F2_fu_438_p2(11 - 1 downto 0);
    trunc_ln575_fu_444_p1 <= F2_fu_438_p2(6 - 1 downto 0);
    trunc_ln583_fu_526_p1 <= man_V_3_fu_474_p3(8 - 1 downto 0);
    trunc_ln586_1_fu_604_p1 <= ashr_ln586_fu_599_p2(8 - 1 downto 0);
    trunc_ln586_2_fu_626_p1 <= ashr_ln586_1_fu_621_p2(8 - 1 downto 0);
    trunc_ln586_fu_592_p1 <= sh_amt_reg_1437(11 - 1 downto 0);
    width_fu_1064_p1 <= in_mat_cols_read_reg_1292(16 - 1 downto 0);
    x_1pix_V_1_fu_1130_p4 <= resize_out_mat_469_dout(15 downto 8);
    x_1pix_V_2_fu_1149_p4 <= resize_out_mat_469_dout(23 downto 16);
    x_1pix_V_fu_1117_p1 <= resize_out_mat_469_dout(8 - 1 downto 0);
    xor_ln121_fu_889_p2 <= (icmp_ln121_reg_1321_pp0_iter7_reg xor ap_const_lv1_1);
    xor_ln571_fu_684_p2 <= (icmp_ln571_reg_1386_pp0_iter6_reg xor ap_const_lv1_1);
    xor_ln581_1_fu_827_p2 <= (or_ln581_1_fu_823_p2 xor ap_const_lv1_1);
    xor_ln581_fu_769_p2 <= (or_ln581_fu_765_p2 xor ap_const_lv1_1);
    xor_ln582_1_fu_806_p2 <= (or_ln582_1_reg_1527 xor ap_const_lv1_1);
    xor_ln582_fu_748_p2 <= (or_ln582_reg_1516 xor ap_const_lv1_1);
    zext_ln115_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_shiftreg_i_phi_fu_292_p4),64));
    zext_ln415_1_fu_1254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_1687),8));
    zext_ln415_2_fu_1262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_1697),8));
    zext_ln415_3_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_fu_668_p3),8));
    zext_ln415_4_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(qb_1_fu_693_p3),8));
    zext_ln415_fu_1246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1677),8));
    zext_ln455_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_reg_1375),12));
    zext_ln569_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(man_V_fu_457_p3),54));
    zext_ln586_1_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln586_fu_614_p1),54));
    zext_ln586_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_fu_592_p1),54));
    zext_ln591_1_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln591_1_fu_652_p2),32));
    zext_ln591_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln591_fu_636_p2),32));
    zext_ln703_1_fu_1140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1pix_V_1_fu_1130_p4),9));
    zext_ln703_2_fu_1159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1pix_V_2_fu_1149_p4),9));
    zext_ln703_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1pix_V_fu_1117_p1),9));
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pp_pipeline_accel_AxiStream2MatStream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ldata1_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    ldata1_empty_n : IN STD_LOGIC;
    ldata1_read : OUT STD_LOGIC;
    imgInput_uv_467_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    imgInput_uv_467_full_n : IN STD_LOGIC;
    imgInput_uv_467_write : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols_bound_per_npc_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    cols_bound_per_npc_empty_n : IN STD_LOGIC;
    cols_bound_per_npc_read : OUT STD_LOGIC;
    last_blk_width_dout : IN STD_LOGIC_VECTOR (4 downto 0);
    last_blk_width_empty_n : IN STD_LOGIC;
    last_blk_width_read : OUT STD_LOGIC;
    stride_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    stride_empty_n : IN STD_LOGIC;
    stride_read : OUT STD_LOGIC );
end;


architecture behav of pp_pipeline_accel_AxiStream2MatStream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv7_30 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_const_lv7_4F : STD_LOGIC_VECTOR (6 downto 0) := "1001111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_41 : STD_LOGIC_VECTOR (6 downto 0) := "1000001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ldata1_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln1073_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_reg_893_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_reg_918 : STD_LOGIC_VECTOR (0 downto 0);
    signal imgInput_uv_467_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln1104_reg_909 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1104_reg_909_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal rows_blk_n : STD_LOGIC;
    signal cols_bound_per_npc_blk_n : STD_LOGIC;
    signal last_blk_width_blk_n : STD_LOGIC;
    signal stride_blk_n : STD_LOGIC;
    signal j_reg_151 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_162 : STD_LOGIC_VECTOR (30 downto 0);
    signal rows_3_reg_814 : STD_LOGIC_VECTOR (10 downto 0);
    signal cols_bound_per_npc_3_reg_819 : STD_LOGIC_VECTOR (10 downto 0);
    signal last_blk_width_2_reg_825 : STD_LOGIC_VECTOR (4 downto 0);
    signal stride_3_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_bound_per_npc_cast2_i_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_bound_per_npc_cast2_i_reg_837 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln1056_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1056_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal stride_bound_per_npc_fu_210_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal stride_bound_per_npc_reg_847 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal strideBased_last_blk_width_fu_228_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal strideBased_last_blk_width_reg_858 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_reg_863 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_i_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_i_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub4_i_fu_243_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub4_i_reg_873 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub26_cast_i_fu_255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub26_cast_i_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1093_fu_259_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1093_reg_883 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1073_fu_265_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op113_read_state7 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1073_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1073_reg_893_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_reg_897 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_904 : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_904_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_904_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bLast_width_reg_904_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1104_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1104_reg_909_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1104_reg_909_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_301_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1084_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1084_reg_918_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_2_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_2_reg_922 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln674_6_fu_365_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln674_6_reg_929 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln674_7_fu_369_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln674_7_reg_937 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1085_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1085_reg_943 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1085_reg_943_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1086_fu_390_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1086_reg_948 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln1086_reg_948_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln674_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln674_reg_953 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln674_fu_410_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln674_reg_960 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln674_2_fu_438_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln674_2_reg_967 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln414_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_972 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln414_reg_972_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln414_fu_450_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln414_reg_980 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln414_reg_980_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln414_2_fu_454_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln414_2_reg_988 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln414_2_reg_988_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_15_fu_515_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln674_15_reg_994 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln674_8_fu_525_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln674_8_reg_999 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln674_10_fu_566_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln674_10_reg_1004 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln674_fu_576_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln674_reg_1009 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln414_4_fu_617_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln414_4_reg_1014 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln414_fu_627_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln414_reg_1019 : STD_LOGIC_VECTOR (15 downto 0);
    signal localbuffer_V_11_fu_652_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_25_fu_765_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln674_16_fu_771_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln674_16_reg_1035 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_phi_reg_pp0_iter0_localbuffer_V_13_reg_173 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_localbuffer_V_13_reg_173 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter2_localbuffer_V_13_reg_173 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter3_localbuffer_V_13_reg_173 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter4_localbuffer_V_13_reg_173 : STD_LOGIC_VECTOR (15 downto 0);
    signal rem_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_4_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal rem_3_fu_458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal p_Val2_s_fu_110 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_220_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1054_fu_234_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal cols_bound_per_npc_cast5_i_fu_225_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub26_i_fu_249_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1048_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1105_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xf_bits_per_clock_fu_313_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ptr_width_minus_fu_327_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1079_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1093_fu_343_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1093_fu_349_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln1093_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_394_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal zext_ln1079_1_fu_323_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1090_fu_414_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1090_fu_428_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1090_2_fu_424_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln674_11_fu_432_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln1090_fu_420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1080_fu_333_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln674_12_fu_482_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln674_14_fu_491_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_36_fu_472_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln674_13_fu_486_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_8_fu_495_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_10_fu_509_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_9_fu_502_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln674_8_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln674_fu_541_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_187_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_31_fu_531_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln674_fu_546_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_7_fu_560_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln674_6_fu_553_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln674_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln674_7_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln674_7_fu_585_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_24_fu_591_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln414_3_fu_601_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln414_fu_606_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln414_5_fu_611_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_39_fu_597_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln414_4_fu_623_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln674_9_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln674_9_fu_641_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_26_fu_647_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln674_6_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lshr_ln674_6_fu_659_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_665_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln414_fu_674_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln414_fu_679_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_fu_670_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln414_fu_683_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_23_fu_689_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln414_4_fu_702_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_35_fu_714_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln414_5_fu_707_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln414_6_fu_711_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln414_2_fu_729_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln414_2_fu_735_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln414_fu_741_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal localbuffer_V_fu_695_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln414_fu_747_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln414_6_fu_723_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln414_3_fu_753_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln414_4_fu_759_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln674_10_fu_776_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln674_10_fu_779_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1097_fu_785_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_220_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component pp_pipeline_accel_mul_32s_11ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_32s_11ns_32_2_1_U142 : component pp_pipeline_accel_mul_32s_11ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 11,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => stride_bound_per_npc_reg_847,
        din1 => grp_fu_220_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_220_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter4_localbuffer_V_13_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln1084_reg_918_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln1073_reg_893_pp0_iter2_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter4_localbuffer_V_13_reg_173 <= localbuffer_V_11_fu_652_p1;
                elsif (((icmp_ln1084_reg_918_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln1073_reg_893_pp0_iter2_reg = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter4_localbuffer_V_13_reg_173 <= p_Result_25_fu_765_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter4_localbuffer_V_13_reg_173 <= ap_phi_reg_pp0_iter3_localbuffer_V_13_reg_173;
                end if;
            end if; 
        end if;
    end process;

    i_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1073_fu_275_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_reg_162 <= add_ln1073_fu_265_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_162 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1073_fu_275_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                j_reg_151 <= j_5_fu_301_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_151 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stride_empty_n = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_fu_110 <= ap_const_lv64_0;
            elsif (((icmp_ln1084_reg_918 = ap_const_lv1_1) and (icmp_ln1073_reg_893_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                p_Val2_s_fu_110 <= ldata1_dout;
            end if; 
        end if;
    end process;

    rem_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stride_empty_n = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                rem_fu_106 <= ap_const_lv32_0;
            elsif (((icmp_ln1073_reg_893 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1084_fu_337_p2 = ap_const_lv1_1))) then 
                rem_fu_106 <= rem_3_fu_458_p2;
            elsif (((icmp_ln1073_reg_893 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1084_fu_337_p2 = ap_const_lv1_0))) then 
                rem_fu_106 <= rem_4_fu_373_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln1093_reg_883 <= add_ln1093_fu_259_p2;
                bound_reg_863 <= grp_fu_220_p2;
                strideBased_last_blk_width_reg_858 <= strideBased_last_blk_width_fu_228_p3;
                sub26_cast_i_reg_878 <= sub26_cast_i_fu_255_p1;
                sub4_i_reg_873 <= sub4_i_fu_243_p2;
                sub_i_reg_868 <= sub_i_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_reg_893 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1084_fu_337_p2 = ap_const_lv1_1))) then
                add_ln674_2_reg_967 <= add_ln674_2_fu_438_p2;
                icmp_ln1085_reg_943 <= icmp_ln1085_fu_384_p2;
                icmp_ln414_reg_972 <= icmp_ln414_fu_444_p2;
                icmp_ln674_reg_953 <= icmp_ln674_fu_404_p2;
                trunc_ln1086_reg_948 <= trunc_ln1086_fu_390_p1;
                trunc_ln414_2_reg_988 <= trunc_ln414_2_fu_454_p1;
                trunc_ln414_reg_980 <= trunc_ln414_fu_450_p1;
                trunc_ln674_reg_960 <= trunc_ln674_fu_410_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter1_localbuffer_V_13_reg_173 <= ap_phi_reg_pp0_iter0_localbuffer_V_13_reg_173;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_localbuffer_V_13_reg_173 <= ap_phi_reg_pp0_iter1_localbuffer_V_13_reg_173;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_localbuffer_V_13_reg_173 <= ap_phi_reg_pp0_iter2_localbuffer_V_13_reg_173;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1073_fu_275_p2 = ap_const_lv1_1))) then
                bLast_reg_897 <= bLast_fu_280_p2;
                bLast_width_reg_904 <= bLast_width_fu_285_p2;
                icmp_ln1104_reg_909 <= icmp_ln1104_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bLast_width_reg_904_pp0_iter1_reg <= bLast_width_reg_904;
                icmp_ln1073_reg_893 <= icmp_ln1073_fu_275_p2;
                icmp_ln1073_reg_893_pp0_iter1_reg <= icmp_ln1073_reg_893;
                icmp_ln1104_reg_909_pp0_iter1_reg <= icmp_ln1104_reg_909;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                bLast_width_reg_904_pp0_iter2_reg <= bLast_width_reg_904_pp0_iter1_reg;
                bLast_width_reg_904_pp0_iter3_reg <= bLast_width_reg_904_pp0_iter2_reg;
                icmp_ln1073_reg_893_pp0_iter2_reg <= icmp_ln1073_reg_893_pp0_iter1_reg;
                icmp_ln1084_reg_918_pp0_iter2_reg <= icmp_ln1084_reg_918;
                icmp_ln1085_reg_943_pp0_iter2_reg <= icmp_ln1085_reg_943;
                icmp_ln1104_reg_909_pp0_iter2_reg <= icmp_ln1104_reg_909_pp0_iter1_reg;
                icmp_ln1104_reg_909_pp0_iter3_reg <= icmp_ln1104_reg_909_pp0_iter2_reg;
                icmp_ln414_reg_972_pp0_iter2_reg <= icmp_ln414_reg_972;
                trunc_ln1086_reg_948_pp0_iter2_reg <= trunc_ln1086_reg_948;
                trunc_ln414_2_reg_988_pp0_iter2_reg <= trunc_ln414_2_reg_988;
                trunc_ln414_reg_980_pp0_iter2_reg <= trunc_ln414_reg_980;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                cols_bound_per_npc_3_reg_819 <= cols_bound_per_npc_dout;
                last_blk_width_2_reg_825 <= last_blk_width_dout;
                rows_3_reg_814 <= rows_dout;
                stride_3_reg_831 <= stride_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    cols_bound_per_npc_cast2_i_reg_837(10 downto 0) <= cols_bound_per_npc_cast2_i_fu_202_p1(10 downto 0);
                icmp_ln1056_reg_842 <= icmp_ln1056_fu_205_p2;
                stride_bound_per_npc_reg_847 <= stride_bound_per_npc_fu_210_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_reg_893 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1084_reg_918 <= icmp_ln1084_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_reg_893 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln1084_fu_337_p2 = ap_const_lv1_0))) then
                icmp_ln674_2_reg_922 <= icmp_ln674_2_fu_359_p2;
                trunc_ln674_6_reg_929 <= trunc_ln674_6_fu_365_p1;
                trunc_ln674_7_reg_937 <= trunc_ln674_7_fu_369_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1084_reg_918 = ap_const_lv1_0) and (icmp_ln1073_reg_893_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lshr_ln674_8_reg_999 <= lshr_ln674_8_fu_525_p2;
                sub_ln674_15_reg_994 <= sub_ln674_15_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1084_reg_918 = ap_const_lv1_1) and (icmp_ln1073_reg_893_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln1085_reg_943 = ap_const_lv1_0))) then
                lshr_ln674_reg_1009 <= lshr_ln674_fu_576_p2;
                sub_ln674_10_reg_1004 <= sub_ln674_10_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1084_reg_918 = ap_const_lv1_1) and (icmp_ln1073_reg_893_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                shl_ln414_reg_1019 <= shl_ln414_fu_627_p2;
                sub_ln414_4_reg_1014 <= sub_ln414_4_fu_617_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (bLast_width_reg_904_pp0_iter2_reg = ap_const_lv1_1))) then
                sub_ln674_16_reg_1035 <= sub_ln674_16_fu_771_p2;
            end if;
        end if;
    end process;
    cols_bound_per_npc_cast2_i_reg_837(31 downto 11) <= "000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n, stride_empty_n, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, icmp_ln1073_fu_275_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((stride_empty_n = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln1073_fu_275_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln1073_fu_275_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln1073_fu_265_p2 <= std_logic_vector(unsigned(i_reg_162) + unsigned(ap_const_lv31_1));
    add_ln1090_fu_414_p2 <= std_logic_vector(unsigned(zext_ln1079_1_fu_323_p1) + unsigned(ap_const_lv6_3F));
    add_ln1093_fu_259_p2 <= std_logic_vector(unsigned(zext_ln1054_fu_234_p1) + unsigned(ap_const_lv7_3F));
    add_ln1105_fu_295_p2 <= std_logic_vector(unsigned(j_reg_151) + unsigned(ap_const_lv32_1));
    add_ln674_2_fu_438_p2 <= std_logic_vector(unsigned(sub_ln674_11_fu_432_p2) + unsigned(ap_const_lv7_3F));
    add_ln674_fu_541_p2 <= std_logic_vector(unsigned(trunc_ln674_reg_960) + unsigned(ap_const_lv7_41));
    and_ln414_3_fu_753_p2 <= (xor_ln414_fu_747_p2 and localbuffer_V_fu_695_p3);
    and_ln414_4_fu_759_p2 <= (select_ln414_6_fu_723_p3 and and_ln414_fu_741_p2);
    and_ln414_fu_741_p2 <= (shl_ln414_2_fu_729_p2 and lshr_ln414_2_fu_735_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ldata1_empty_n, imgInput_uv_467_full_n, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, icmp_ln1104_reg_909_pp0_iter3_reg, ap_predicate_op113_read_state7)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln1104_reg_909_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (imgInput_uv_467_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op113_read_state7 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ldata1_empty_n, imgInput_uv_467_full_n, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, icmp_ln1104_reg_909_pp0_iter3_reg, ap_predicate_op113_read_state7)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln1104_reg_909_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (imgInput_uv_467_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op113_read_state7 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ldata1_empty_n, imgInput_uv_467_full_n, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, icmp_ln1104_reg_909_pp0_iter3_reg, ap_predicate_op113_read_state7)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln1104_reg_909_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (imgInput_uv_467_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op113_read_state7 = ap_const_boolean_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n, stride_empty_n)
    begin
                ap_block_state1 <= ((stride_empty_n = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter2_assign_proc : process(ldata1_empty_n, ap_predicate_op113_read_state7)
    begin
                ap_block_state7_pp0_stage0_iter2 <= ((ldata1_empty_n = ap_const_logic_0) and (ap_predicate_op113_read_state7 = ap_const_boolean_1));
    end process;

        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_pp0_stage0_iter4_assign_proc : process(imgInput_uv_467_full_n, icmp_ln1104_reg_909_pp0_iter3_reg)
    begin
                ap_block_state9_pp0_stage0_iter4 <= ((icmp_ln1104_reg_909_pp0_iter3_reg = ap_const_lv1_1) and (imgInput_uv_467_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln1073_fu_275_p2)
    begin
        if ((icmp_ln1073_fu_275_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_localbuffer_V_13_reg_173 <= "XXXXXXXXXXXXXXXX";

    ap_predicate_op113_read_state7_assign_proc : process(icmp_ln1073_reg_893_pp0_iter1_reg, icmp_ln1084_reg_918)
    begin
                ap_predicate_op113_read_state7 <= ((icmp_ln1084_reg_918 = ap_const_lv1_1) and (icmp_ln1073_reg_893_pp0_iter1_reg = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bLast_fu_280_p2 <= "1" when (j_reg_151 = sub_i_reg_868) else "0";
    bLast_width_fu_285_p2 <= "1" when (j_reg_151 = sub26_cast_i_reg_878) else "0";

    cols_bound_per_npc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_bound_per_npc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_blk_n <= cols_bound_per_npc_empty_n;
        else 
            cols_bound_per_npc_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cols_bound_per_npc_cast2_i_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_bound_per_npc_3_reg_819),32));
    cols_bound_per_npc_cast5_i_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cols_bound_per_npc_3_reg_819),12));

    cols_bound_per_npc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n, stride_empty_n)
    begin
        if ((not(((stride_empty_n = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_bound_per_npc_read <= ap_const_logic_1;
        else 
            cols_bound_per_npc_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_182_p2 <= std_logic_vector(unsigned(ap_const_lv32_40) - unsigned(rem_fu_106));
    grp_fu_187_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(trunc_ln674_reg_960));
    grp_fu_220_p1 <= grp_fu_220_p10(11 - 1 downto 0);
    grp_fu_220_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows_3_reg_814),32));
    icmp_ln1056_fu_205_p2 <= "1" when (stride_3_reg_831 = ap_const_lv32_FFFFFFFF) else "0";
    icmp_ln1073_fu_275_p2 <= "1" when (signed(zext_ln1048_fu_271_p1) < signed(bound_reg_863)) else "0";
    icmp_ln1084_fu_337_p2 <= "1" when (signed(rem_fu_106) < signed(zext_ln1079_fu_319_p1)) else "0";
    icmp_ln1085_fu_384_p2 <= "1" when (rem_fu_106 = ap_const_lv32_0) else "0";
    icmp_ln1104_fu_290_p2 <= "1" when (signed(j_reg_151) < signed(cols_bound_per_npc_cast2_i_reg_837)) else "0";
    icmp_ln414_fu_444_p2 <= "1" when (unsigned(rem_fu_106) > unsigned(sext_ln1090_fu_420_p1)) else "0";
    icmp_ln674_2_fu_359_p2 <= "1" when (unsigned(grp_fu_182_p2) > unsigned(sub_ln1093_fu_353_p2)) else "0";
    icmp_ln674_fu_404_p2 <= "0" when (tmp_fu_394_p4 = ap_const_lv26_0) else "1";

    imgInput_uv_467_blk_n_assign_proc : process(imgInput_uv_467_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, icmp_ln1104_reg_909_pp0_iter3_reg)
    begin
        if (((icmp_ln1104_reg_909_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            imgInput_uv_467_blk_n <= imgInput_uv_467_full_n;
        else 
            imgInput_uv_467_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imgInput_uv_467_din <= (select_ln1097_fu_785_p3 and ap_phi_reg_pp0_iter4_localbuffer_V_13_reg_173);

    imgInput_uv_467_write_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln1104_reg_909_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1104_reg_909_pp0_iter3_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            imgInput_uv_467_write <= ap_const_logic_1;
        else 
            imgInput_uv_467_write <= ap_const_logic_0;
        end if; 
    end process;

    j_5_fu_301_p3 <= 
        ap_const_lv32_0 when (bLast_fu_280_p2(0) = '1') else 
        add_ln1105_fu_295_p2;

    last_blk_width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, last_blk_width_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            last_blk_width_blk_n <= last_blk_width_empty_n;
        else 
            last_blk_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    last_blk_width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n, stride_empty_n)
    begin
        if ((not(((stride_empty_n = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            last_blk_width_read <= ap_const_logic_1;
        else 
            last_blk_width_read <= ap_const_logic_0;
        end if; 
    end process;


    ldata1_blk_n_assign_proc : process(ldata1_empty_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln1073_reg_893_pp0_iter1_reg, icmp_ln1084_reg_918)
    begin
        if (((icmp_ln1084_reg_918 = ap_const_lv1_1) and (icmp_ln1073_reg_893_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ldata1_blk_n <= ldata1_empty_n;
        else 
            ldata1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ldata1_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op113_read_state7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op113_read_state7 = ap_const_boolean_1))) then 
            ldata1_read <= ap_const_logic_1;
        else 
            ldata1_read <= ap_const_logic_0;
        end if; 
    end process;

    localbuffer_V_11_fu_652_p1 <= p_Result_26_fu_647_p2(16 - 1 downto 0);
    localbuffer_V_fu_695_p3 <= 
        ap_const_lv16_0 when (icmp_ln1085_reg_943_pp0_iter2_reg(0) = '1') else 
        p_Result_23_fu_689_p2;
    lshr_ln414_2_fu_735_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln414_6_fu_711_p1(16-1 downto 0)))));
    lshr_ln414_fu_683_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln414_fu_679_p1(16-1 downto 0)))));
    lshr_ln674_10_fu_779_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln674_10_fu_776_p1(16-1 downto 0)))));
    lshr_ln674_6_fu_659_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln674_6_fu_656_p1(31-1 downto 0)))));
    lshr_ln674_7_fu_585_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln674_7_fu_582_p1(31-1 downto 0)))));
    lshr_ln674_8_fu_525_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_9_fu_502_p3),to_integer(unsigned('0' & zext_ln674_8_fu_521_p1(31-1 downto 0)))));
    lshr_ln674_9_fu_641_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & zext_ln674_9_fu_638_p1(31-1 downto 0)))));
    lshr_ln674_fu_576_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_6_fu_553_p3),to_integer(unsigned('0' & zext_ln674_fu_572_p1(31-1 downto 0)))));
    p_Result_23_fu_689_p2 <= (tmp_37_fu_670_p1 and lshr_ln414_fu_683_p2);
    p_Result_24_fu_591_p2 <= (lshr_ln674_7_fu_585_p2 and ldata1_dout);
    p_Result_25_fu_765_p2 <= (and_ln414_4_fu_759_p2 or and_ln414_3_fu_753_p2);
    p_Result_26_fu_647_p2 <= (lshr_ln674_9_fu_641_p2 and lshr_ln674_8_reg_999);
    p_Result_s_fu_665_p2 <= (lshr_ln674_reg_1009 and lshr_ln674_6_fu_659_p2);
    ptr_width_minus_fu_327_p3 <= 
        sub4_i_reg_873 when (bLast_reg_897(0) = '1') else 
        ap_const_lv7_30;
    rem_3_fu_458_p2 <= std_logic_vector(unsigned(rem_fu_106) + unsigned(zext_ln1080_fu_333_p1));
    rem_4_fu_373_p2 <= std_logic_vector(unsigned(rem_fu_106) - unsigned(zext_ln1079_fu_319_p1));

    rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n, stride_empty_n)
    begin
        if ((not(((stride_empty_n = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1093_fu_343_p3 <= 
        add_ln1093_reg_883 when (bLast_reg_897(0) = '1') else 
        ap_const_lv7_4F;
    select_ln1097_fu_785_p3 <= 
        lshr_ln674_10_fu_779_p2 when (bLast_width_reg_904_pp0_iter3_reg(0) = '1') else 
        ap_const_lv16_FFFF;
    select_ln414_4_fu_702_p3 <= 
        trunc_ln414_2_reg_988_pp0_iter2_reg when (icmp_ln414_reg_972_pp0_iter2_reg(0) = '1') else 
        trunc_ln414_reg_980_pp0_iter2_reg;
    select_ln414_5_fu_611_p3 <= 
        sub_ln414_3_fu_601_p2 when (icmp_ln414_reg_972(0) = '1') else 
        trunc_ln414_reg_980;
    select_ln414_6_fu_723_p3 <= 
        tmp_35_fu_714_p4 when (icmp_ln414_reg_972_pp0_iter2_reg(0) = '1') else 
        shl_ln414_reg_1019;
    select_ln414_fu_606_p3 <= 
        trunc_ln414_reg_980 when (icmp_ln414_reg_972(0) = '1') else 
        trunc_ln414_2_reg_988;
    select_ln674_10_fu_509_p3 <= 
        sub_ln674_13_fu_486_p2 when (icmp_ln674_2_reg_922(0) = '1') else 
        trunc_ln674_6_reg_929;
    select_ln674_6_fu_553_p3 <= 
        tmp_31_fu_531_p4 when (icmp_ln674_reg_953(0) = '1') else 
        p_Val2_s_fu_110;
    select_ln674_7_fu_560_p3 <= 
        grp_fu_187_p2 when (icmp_ln674_reg_953(0) = '1') else 
        trunc_ln674_reg_960;
    select_ln674_8_fu_495_p3 <= 
        sub_ln674_12_fu_482_p2 when (icmp_ln674_2_reg_922(0) = '1') else 
        sub_ln674_14_fu_491_p2;
    select_ln674_9_fu_502_p3 <= 
        tmp_36_fu_472_p4 when (icmp_ln674_2_reg_922(0) = '1') else 
        p_Val2_s_fu_110;
    select_ln674_fu_546_p3 <= 
        add_ln674_fu_541_p2 when (icmp_ln674_reg_953(0) = '1') else 
        grp_fu_187_p2;
        sext_ln1090_2_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1090_fu_414_p2),7));

        sext_ln1090_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1090_fu_414_p2),32));

    shl_ln414_2_fu_729_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln414_5_fu_707_p1(16-1 downto 0)))));
    shl_ln414_fu_627_p2 <= std_logic_vector(shift_left(unsigned(tmp_39_fu_597_p1),to_integer(unsigned('0' & zext_ln414_4_fu_623_p1(16-1 downto 0)))));
    strideBased_last_blk_width_fu_228_p3 <= 
        last_blk_width_2_reg_825 when (icmp_ln1056_reg_842(0) = '1') else 
        ap_const_lv5_10;

    stride_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, stride_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stride_blk_n <= stride_empty_n;
        else 
            stride_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stride_bound_per_npc_fu_210_p3 <= 
        cols_bound_per_npc_cast2_i_fu_202_p1 when (icmp_ln1056_fu_205_p2(0) = '1') else 
        stride_3_reg_831;

    stride_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, cols_bound_per_npc_empty_n, last_blk_width_empty_n, stride_empty_n)
    begin
        if ((not(((stride_empty_n = ap_const_logic_0) or (last_blk_width_empty_n = ap_const_logic_0) or (cols_bound_per_npc_empty_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stride_read <= ap_const_logic_1;
        else 
            stride_read <= ap_const_logic_0;
        end if; 
    end process;

        sub26_cast_i_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub26_i_fu_249_p2),32));

    sub26_i_fu_249_p2 <= std_logic_vector(unsigned(cols_bound_per_npc_cast5_i_fu_225_p1) + unsigned(ap_const_lv12_FFF));
    sub4_i_fu_243_p2 <= std_logic_vector(signed(ap_const_lv7_40) - signed(zext_ln1054_fu_234_p1));
    sub_i_fu_238_p2 <= std_logic_vector(signed(stride_bound_per_npc_reg_847) + signed(ap_const_lv32_FFFFFFFF));
    sub_ln1093_fu_353_p2 <= std_logic_vector(unsigned(zext_ln1093_fu_349_p1) - unsigned(rem_fu_106));
    sub_ln414_3_fu_601_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) - unsigned(trunc_ln414_reg_980));
    sub_ln414_4_fu_617_p2 <= std_logic_vector(unsigned(ap_const_lv5_F) - unsigned(select_ln414_fu_606_p3));
    sub_ln414_fu_674_p2 <= std_logic_vector(signed(ap_const_lv5_10) - signed(trunc_ln1086_reg_948_pp0_iter2_reg));
    sub_ln674_10_fu_566_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln674_fu_546_p3));
    sub_ln674_11_fu_432_p2 <= std_logic_vector(unsigned(trunc_ln1090_fu_428_p1) - unsigned(sext_ln1090_2_fu_424_p1));
    sub_ln674_12_fu_482_p2 <= std_logic_vector(unsigned(trunc_ln674_6_reg_929) - unsigned(trunc_ln674_7_reg_937));
    sub_ln674_13_fu_486_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(trunc_ln674_6_reg_929));
    sub_ln674_14_fu_491_p2 <= std_logic_vector(unsigned(trunc_ln674_7_reg_937) - unsigned(trunc_ln674_6_reg_929));
    sub_ln674_15_fu_515_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(select_ln674_8_fu_495_p3));
    sub_ln674_16_fu_771_p2 <= std_logic_vector(signed(ap_const_lv5_10) - signed(last_blk_width_2_reg_825));
    
    tmp_31_fu_531_p4_proc : process(p_Val2_s_fu_110)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_31_fu_531_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_110;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_31_fu_531_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_31_fu_531_p4_i) := p_Val2_s_fu_110(64-1-tmp_31_fu_531_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_31_fu_531_p4 <= resvalue(64-1 downto 0);
    end process;

    
    tmp_35_fu_714_p4_proc : process(shl_ln414_reg_1019)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_35_fu_714_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := shl_ln414_reg_1019;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for tmp_35_fu_714_p4_i in 0 to 16-1 loop
                v0_cpy(tmp_35_fu_714_p4_i) := shl_ln414_reg_1019(16-1-tmp_35_fu_714_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_35_fu_714_p4 <= resvalue(16-1 downto 0);
    end process;

    
    tmp_36_fu_472_p4_proc : process(p_Val2_s_fu_110)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_36_fu_472_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_110;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_36_fu_472_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_36_fu_472_p4_i) := p_Val2_s_fu_110(64-1-tmp_36_fu_472_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_36_fu_472_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_37_fu_670_p1 <= p_Result_s_fu_665_p2(16 - 1 downto 0);
    tmp_39_fu_597_p1 <= p_Result_24_fu_591_p2(16 - 1 downto 0);
    tmp_fu_394_p4 <= grp_fu_182_p2(31 downto 6);
    trunc_ln1086_fu_390_p1 <= rem_fu_106(5 - 1 downto 0);
    trunc_ln1090_fu_428_p1 <= rem_fu_106(7 - 1 downto 0);
    trunc_ln414_2_fu_454_p1 <= add_ln1090_fu_414_p2(5 - 1 downto 0);
    trunc_ln414_fu_450_p1 <= rem_fu_106(5 - 1 downto 0);
    trunc_ln674_6_fu_365_p1 <= grp_fu_182_p2(7 - 1 downto 0);
    trunc_ln674_7_fu_369_p1 <= sub_ln1093_fu_353_p2(7 - 1 downto 0);
    trunc_ln674_fu_410_p1 <= grp_fu_182_p2(7 - 1 downto 0);
    xf_bits_per_clock_fu_313_p3 <= 
        strideBased_last_blk_width_reg_858 when (bLast_reg_897(0) = '1') else 
        ap_const_lv5_10;
    xor_ln414_fu_747_p2 <= (ap_const_lv16_FFFF xor and_ln414_fu_741_p2);
    zext_ln1048_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_162),32));
    zext_ln1054_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(strideBased_last_blk_width_fu_228_p3),7));
    zext_ln1079_1_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_313_p3),6));
    zext_ln1079_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xf_bits_per_clock_fu_313_p3),32));
    zext_ln1080_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ptr_width_minus_fu_327_p3),32));
    zext_ln1093_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1093_fu_343_p3),32));
    zext_ln414_4_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_5_fu_611_p3),16));
    zext_ln414_5_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_4_fu_702_p3),16));
    zext_ln414_6_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_4_reg_1014),16));
    zext_ln414_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln414_fu_674_p2),16));
    zext_ln674_10_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_16_reg_1035),16));
    zext_ln674_6_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_10_reg_1004),64));
    zext_ln674_7_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln674_2_reg_967),64));
    zext_ln674_8_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_10_fu_509_p3),64));
    zext_ln674_9_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_15_reg_994),64));
    zext_ln674_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_7_fu_560_p3),64));
end behav;

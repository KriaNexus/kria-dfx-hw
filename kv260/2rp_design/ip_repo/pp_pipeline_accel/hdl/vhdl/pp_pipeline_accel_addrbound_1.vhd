-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pp_pipeline_accel_addrbound_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    return_r : OUT STD_LOGIC_VECTOR (19 downto 0);
    return_r_ap_vld : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (10 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    cols : IN STD_LOGIC_VECTOR (21 downto 0);
    rows_out_din : OUT STD_LOGIC_VECTOR (10 downto 0);
    rows_out_full_n : IN STD_LOGIC;
    rows_out_write : OUT STD_LOGIC );
end;


architecture behav of pp_pipeline_accel_addrbound_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv26_3F : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rows_blk_n : STD_LOGIC;
    signal rows_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal return_r_preg : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_97_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln_fu_73_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln997_fu_80_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_97_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_97_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_97_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component pp_pipeline_accel_mul_mul_11ns_22s_22_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    mul_mul_11ns_22s_22_4_1_U131 : component pp_pipeline_accel_mul_mul_11ns_22s_22_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_97_p0,
        din1 => cols,
        ce => grp_fu_97_ce,
        dout => grp_fu_97_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    return_r_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                return_r_preg <= ap_const_lv20_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    return_r_preg <= add_ln997_fu_80_p2(25 downto 6);
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, rows_empty_n, rows_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln997_fu_80_p2 <= std_logic_vector(unsigned(shl_ln_fu_73_p3) + unsigned(ap_const_lv26_3F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, rows_empty_n, rows_out_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_97_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, rows_out_full_n)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and ((ap_start = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1)))) then 
            grp_fu_97_ce <= ap_const_logic_0;
        else 
            grp_fu_97_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_97_p0 <= grp_fu_97_p00(11 - 1 downto 0);
    grp_fu_97_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows_dout),22));

    return_r_assign_proc : process(return_r_preg, ap_CS_fsm_state4, add_ln997_fu_80_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            return_r <= add_ln997_fu_80_p2(25 downto 6);
        else 
            return_r <= return_r_preg;
        end if; 
    end process;


    return_r_ap_vld_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            return_r_ap_vld <= ap_const_logic_1;
        else 
            return_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rows_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_out_blk_n <= rows_out_full_n;
        else 
            rows_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    rows_out_din <= rows_dout;

    rows_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, rows_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_out_write <= ap_const_logic_1;
        else 
            rows_out_write <= ap_const_logic_0;
        end if; 
    end process;


    rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n, rows_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (rows_out_full_n = ap_const_logic_0) or (rows_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln_fu_73_p3 <= (grp_fu_97_p2 & ap_const_lv4_0);
end behav;

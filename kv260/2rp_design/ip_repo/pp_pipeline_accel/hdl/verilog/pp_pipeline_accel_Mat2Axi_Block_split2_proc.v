// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pp_pipeline_accel_Mat2Axi_Block_split2_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stride_dout,
        stride_empty_n,
        stride_read,
        cols_dout,
        cols_empty_n,
        cols_read,
        rows_dout,
        rows_empty_n,
        rows_read,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] stride_dout;
input   stride_empty_n;
output   stride_read;
input  [24:0] cols_dout;
input   cols_empty_n;
output   cols_read;
input  [21:0] rows_dout;
input   rows_empty_n;
output   rows_read;
output  [24:0] ap_return_0;
output  [21:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stride_read;
reg cols_read;
reg rows_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    stride_blk_n;
reg    cols_blk_n;
reg    rows_blk_n;
wire   [24:0] trunc_ln1439_fu_48_p1;
reg   [24:0] trunc_ln1439_reg_74;
reg   [24:0] cols_read_reg_79;
reg   [21:0] rows_read_reg_84;
wire   [0:0] icmp_ln1438_fu_52_p2;
reg   [0:0] icmp_ln1438_reg_89;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
wire   [24:0] cols_tmp_fu_58_p3;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cols_read_reg_79 <= cols_dout;
        icmp_ln1438_reg_89 <= icmp_ln1438_fu_52_p2;
        rows_read_reg_84 <= rows_dout;
        trunc_ln1439_reg_74 <= trunc_ln1439_fu_48_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_blk_n = cols_empty_n;
    end else begin
        cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (rows_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (stride_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_read = 1'b1;
    end else begin
        cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (rows_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (stride_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stride_blk_n = stride_empty_n;
    end else begin
        stride_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (rows_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (stride_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stride_read = 1'b1;
    end else begin
        stride_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (rows_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (stride_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (rows_empty_n == 1'b0) | (cols_empty_n == 1'b0) | (stride_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return_0 = cols_tmp_fu_58_p3;

assign ap_return_1 = rows_read_reg_84;

assign cols_tmp_fu_58_p3 = ((icmp_ln1438_reg_89[0:0] == 1'b1) ? cols_read_reg_79 : trunc_ln1439_reg_74);

assign icmp_ln1438_fu_52_p2 = ((stride_dout == 32'd4294967295) ? 1'b1 : 1'b0);

assign trunc_ln1439_fu_48_p1 = stride_dout[24:0];

endmodule //pp_pipeline_accel_Mat2Axi_Block_split2_proc

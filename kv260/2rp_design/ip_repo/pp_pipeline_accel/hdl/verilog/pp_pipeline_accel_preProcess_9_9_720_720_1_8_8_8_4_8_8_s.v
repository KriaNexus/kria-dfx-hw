// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pp_pipeline_accel_preProcess_9_9_720_720_1_8_8_8_4_8_8_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        resize_out_mat_469_dout,
        resize_out_mat_469_empty_n,
        resize_out_mat_469_read,
        out_mat_470_din,
        out_mat_470_full_n,
        out_mat_470_write,
        m_axi_gmem4_AWVALID,
        m_axi_gmem4_AWREADY,
        m_axi_gmem4_AWADDR,
        m_axi_gmem4_AWID,
        m_axi_gmem4_AWLEN,
        m_axi_gmem4_AWSIZE,
        m_axi_gmem4_AWBURST,
        m_axi_gmem4_AWLOCK,
        m_axi_gmem4_AWCACHE,
        m_axi_gmem4_AWPROT,
        m_axi_gmem4_AWQOS,
        m_axi_gmem4_AWREGION,
        m_axi_gmem4_AWUSER,
        m_axi_gmem4_WVALID,
        m_axi_gmem4_WREADY,
        m_axi_gmem4_WDATA,
        m_axi_gmem4_WSTRB,
        m_axi_gmem4_WLAST,
        m_axi_gmem4_WID,
        m_axi_gmem4_WUSER,
        m_axi_gmem4_ARVALID,
        m_axi_gmem4_ARREADY,
        m_axi_gmem4_ARADDR,
        m_axi_gmem4_ARID,
        m_axi_gmem4_ARLEN,
        m_axi_gmem4_ARSIZE,
        m_axi_gmem4_ARBURST,
        m_axi_gmem4_ARLOCK,
        m_axi_gmem4_ARCACHE,
        m_axi_gmem4_ARPROT,
        m_axi_gmem4_ARQOS,
        m_axi_gmem4_ARREGION,
        m_axi_gmem4_ARUSER,
        m_axi_gmem4_RVALID,
        m_axi_gmem4_RREADY,
        m_axi_gmem4_RDATA,
        m_axi_gmem4_RLAST,
        m_axi_gmem4_RID,
        m_axi_gmem4_RUSER,
        m_axi_gmem4_RRESP,
        m_axi_gmem4_BVALID,
        m_axi_gmem4_BREADY,
        m_axi_gmem4_BRESP,
        m_axi_gmem4_BID,
        m_axi_gmem4_BUSER,
        in_mat_rows_dout,
        in_mat_rows_empty_n,
        in_mat_rows_read,
        in_mat_cols_dout,
        in_mat_cols_empty_n,
        in_mat_cols_read,
        params_dout,
        params_empty_n,
        params_read
);

parameter    ap_ST_fsm_state1 = 78'd1;
parameter    ap_ST_fsm_state2 = 78'd2;
parameter    ap_ST_fsm_state3 = 78'd4;
parameter    ap_ST_fsm_state4 = 78'd8;
parameter    ap_ST_fsm_state5 = 78'd16;
parameter    ap_ST_fsm_state6 = 78'd32;
parameter    ap_ST_fsm_state7 = 78'd64;
parameter    ap_ST_fsm_state8 = 78'd128;
parameter    ap_ST_fsm_state9 = 78'd256;
parameter    ap_ST_fsm_state10 = 78'd512;
parameter    ap_ST_fsm_state11 = 78'd1024;
parameter    ap_ST_fsm_state12 = 78'd2048;
parameter    ap_ST_fsm_state13 = 78'd4096;
parameter    ap_ST_fsm_state14 = 78'd8192;
parameter    ap_ST_fsm_state15 = 78'd16384;
parameter    ap_ST_fsm_state16 = 78'd32768;
parameter    ap_ST_fsm_state17 = 78'd65536;
parameter    ap_ST_fsm_state18 = 78'd131072;
parameter    ap_ST_fsm_state19 = 78'd262144;
parameter    ap_ST_fsm_state20 = 78'd524288;
parameter    ap_ST_fsm_state21 = 78'd1048576;
parameter    ap_ST_fsm_state22 = 78'd2097152;
parameter    ap_ST_fsm_state23 = 78'd4194304;
parameter    ap_ST_fsm_state24 = 78'd8388608;
parameter    ap_ST_fsm_state25 = 78'd16777216;
parameter    ap_ST_fsm_state26 = 78'd33554432;
parameter    ap_ST_fsm_state27 = 78'd67108864;
parameter    ap_ST_fsm_state28 = 78'd134217728;
parameter    ap_ST_fsm_state29 = 78'd268435456;
parameter    ap_ST_fsm_state30 = 78'd536870912;
parameter    ap_ST_fsm_state31 = 78'd1073741824;
parameter    ap_ST_fsm_state32 = 78'd2147483648;
parameter    ap_ST_fsm_state33 = 78'd4294967296;
parameter    ap_ST_fsm_state34 = 78'd8589934592;
parameter    ap_ST_fsm_state35 = 78'd17179869184;
parameter    ap_ST_fsm_state36 = 78'd34359738368;
parameter    ap_ST_fsm_state37 = 78'd68719476736;
parameter    ap_ST_fsm_state38 = 78'd137438953472;
parameter    ap_ST_fsm_state39 = 78'd274877906944;
parameter    ap_ST_fsm_state40 = 78'd549755813888;
parameter    ap_ST_fsm_state41 = 78'd1099511627776;
parameter    ap_ST_fsm_state42 = 78'd2199023255552;
parameter    ap_ST_fsm_state43 = 78'd4398046511104;
parameter    ap_ST_fsm_state44 = 78'd8796093022208;
parameter    ap_ST_fsm_state45 = 78'd17592186044416;
parameter    ap_ST_fsm_state46 = 78'd35184372088832;
parameter    ap_ST_fsm_state47 = 78'd70368744177664;
parameter    ap_ST_fsm_state48 = 78'd140737488355328;
parameter    ap_ST_fsm_state49 = 78'd281474976710656;
parameter    ap_ST_fsm_state50 = 78'd562949953421312;
parameter    ap_ST_fsm_state51 = 78'd1125899906842624;
parameter    ap_ST_fsm_state52 = 78'd2251799813685248;
parameter    ap_ST_fsm_state53 = 78'd4503599627370496;
parameter    ap_ST_fsm_state54 = 78'd9007199254740992;
parameter    ap_ST_fsm_state55 = 78'd18014398509481984;
parameter    ap_ST_fsm_state56 = 78'd36028797018963968;
parameter    ap_ST_fsm_state57 = 78'd72057594037927936;
parameter    ap_ST_fsm_state58 = 78'd144115188075855872;
parameter    ap_ST_fsm_state59 = 78'd288230376151711744;
parameter    ap_ST_fsm_state60 = 78'd576460752303423488;
parameter    ap_ST_fsm_state61 = 78'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 78'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 78'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 78'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 78'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 78'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 78'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 78'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 78'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 78'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 78'd1180591620717411303424;
parameter    ap_ST_fsm_pp0_stage0 = 78'd2361183241434822606848;
parameter    ap_ST_fsm_state82 = 78'd4722366482869645213696;
parameter    ap_ST_fsm_state83 = 78'd9444732965739290427392;
parameter    ap_ST_fsm_state84 = 78'd18889465931478580854784;
parameter    ap_ST_fsm_state85 = 78'd37778931862957161709568;
parameter    ap_ST_fsm_pp1_stage0 = 78'd75557863725914323419136;
parameter    ap_ST_fsm_state90 = 78'd151115727451828646838272;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] resize_out_mat_469_dout;
input   resize_out_mat_469_empty_n;
output   resize_out_mat_469_read;
output  [23:0] out_mat_470_din;
input   out_mat_470_full_n;
output   out_mat_470_write;
output   m_axi_gmem4_AWVALID;
input   m_axi_gmem4_AWREADY;
output  [63:0] m_axi_gmem4_AWADDR;
output  [0:0] m_axi_gmem4_AWID;
output  [31:0] m_axi_gmem4_AWLEN;
output  [2:0] m_axi_gmem4_AWSIZE;
output  [1:0] m_axi_gmem4_AWBURST;
output  [1:0] m_axi_gmem4_AWLOCK;
output  [3:0] m_axi_gmem4_AWCACHE;
output  [2:0] m_axi_gmem4_AWPROT;
output  [3:0] m_axi_gmem4_AWQOS;
output  [3:0] m_axi_gmem4_AWREGION;
output  [0:0] m_axi_gmem4_AWUSER;
output   m_axi_gmem4_WVALID;
input   m_axi_gmem4_WREADY;
output  [63:0] m_axi_gmem4_WDATA;
output  [7:0] m_axi_gmem4_WSTRB;
output   m_axi_gmem4_WLAST;
output  [0:0] m_axi_gmem4_WID;
output  [0:0] m_axi_gmem4_WUSER;
output   m_axi_gmem4_ARVALID;
input   m_axi_gmem4_ARREADY;
output  [63:0] m_axi_gmem4_ARADDR;
output  [0:0] m_axi_gmem4_ARID;
output  [31:0] m_axi_gmem4_ARLEN;
output  [2:0] m_axi_gmem4_ARSIZE;
output  [1:0] m_axi_gmem4_ARBURST;
output  [1:0] m_axi_gmem4_ARLOCK;
output  [3:0] m_axi_gmem4_ARCACHE;
output  [2:0] m_axi_gmem4_ARPROT;
output  [3:0] m_axi_gmem4_ARQOS;
output  [3:0] m_axi_gmem4_ARREGION;
output  [0:0] m_axi_gmem4_ARUSER;
input   m_axi_gmem4_RVALID;
output   m_axi_gmem4_RREADY;
input  [63:0] m_axi_gmem4_RDATA;
input   m_axi_gmem4_RLAST;
input  [0:0] m_axi_gmem4_RID;
input  [0:0] m_axi_gmem4_RUSER;
input  [1:0] m_axi_gmem4_RRESP;
input   m_axi_gmem4_BVALID;
output   m_axi_gmem4_BREADY;
input  [1:0] m_axi_gmem4_BRESP;
input  [0:0] m_axi_gmem4_BID;
input  [0:0] m_axi_gmem4_BUSER;
input  [31:0] in_mat_rows_dout;
input   in_mat_rows_empty_n;
output   in_mat_rows_read;
input  [31:0] in_mat_cols_dout;
input   in_mat_cols_empty_n;
output   in_mat_cols_read;
input  [63:0] params_dout;
input   params_empty_n;
output   params_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg resize_out_mat_469_read;
reg out_mat_470_write;
reg m_axi_gmem4_ARVALID;
reg m_axi_gmem4_RREADY;
reg in_mat_rows_read;
reg in_mat_cols_read;
reg params_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [77:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    resize_out_mat_469_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln49_reg_1653;
reg    out_mat_470_blk_n;
reg    ap_enable_reg_pp1_iter3;
reg   [0:0] icmp_ln49_reg_1653_pp1_iter2_reg;
reg    gmem4_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem4_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln115_reg_1313;
reg   [0:0] trunc_ln115_reg_1317;
reg    in_mat_rows_blk_n;
reg    in_mat_cols_blk_n;
reg    params_blk_n;
reg   [2:0] i_reg_205;
reg  signed [7:0] b_V_2_reg_216;
reg  signed [7:0] beta_reg_V_2_6_reg_228;
reg  signed [7:0] beta_reg_V_2_10_reg_240;
reg   [7:0] a_V_reg_252;
reg   [7:0] alpha_reg_V_2_6_reg_264;
reg   [7:0] alpha_reg_V_2_11_reg_276;
reg   [31:0] shiftreg_i_reg_288;
reg   [30:0] k_reg_309;
reg   [31:0] in_mat_rows_read_reg_1287;
reg   [31:0] in_mat_cols_read_reg_1292;
reg   [60:0] trunc_ln_reg_1297;
wire   [2:0] add_ln115_fu_343_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state72_pp0_stage0_iter0;
reg    ap_predicate_op192_read_state73;
reg    ap_block_state73_pp0_stage0_iter1;
wire    ap_block_state74_pp0_stage0_iter2;
wire    ap_block_state75_pp0_stage0_iter3;
wire    ap_block_state76_pp0_stage0_iter4;
wire    ap_block_state77_pp0_stage0_iter5;
wire    ap_block_state78_pp0_stage0_iter6;
wire    ap_block_state79_pp0_stage0_iter7;
wire    ap_block_state80_pp0_stage0_iter8;
wire    ap_block_state81_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln115_fu_349_p2;
reg   [0:0] icmp_ln115_reg_1313_pp0_iter1_reg;
reg   [0:0] icmp_ln115_reg_1313_pp0_iter2_reg;
reg   [0:0] icmp_ln115_reg_1313_pp0_iter3_reg;
reg   [0:0] icmp_ln115_reg_1313_pp0_iter4_reg;
reg   [0:0] icmp_ln115_reg_1313_pp0_iter5_reg;
reg   [0:0] icmp_ln115_reg_1313_pp0_iter6_reg;
reg   [0:0] icmp_ln115_reg_1313_pp0_iter7_reg;
reg   [0:0] icmp_ln115_reg_1313_pp0_iter8_reg;
wire   [0:0] trunc_ln115_fu_355_p1;
reg   [0:0] trunc_ln115_reg_1317_pp0_iter1_reg;
wire   [0:0] icmp_ln121_fu_359_p2;
reg   [0:0] icmp_ln121_reg_1321;
reg   [0:0] icmp_ln121_reg_1321_pp0_iter1_reg;
reg   [0:0] icmp_ln121_reg_1321_pp0_iter2_reg;
reg   [0:0] icmp_ln121_reg_1321_pp0_iter3_reg;
reg   [0:0] icmp_ln121_reg_1321_pp0_iter4_reg;
reg   [0:0] icmp_ln121_reg_1321_pp0_iter5_reg;
reg   [0:0] icmp_ln121_reg_1321_pp0_iter6_reg;
reg   [0:0] icmp_ln121_reg_1321_pp0_iter7_reg;
wire   [1:0] trunc_ln122_fu_365_p1;
reg   [1:0] trunc_ln122_reg_1329;
reg   [1:0] trunc_ln122_reg_1329_pp0_iter1_reg;
reg   [1:0] trunc_ln122_reg_1329_pp0_iter2_reg;
reg   [1:0] trunc_ln122_reg_1329_pp0_iter3_reg;
reg   [1:0] trunc_ln122_reg_1329_pp0_iter4_reg;
reg   [1:0] trunc_ln122_reg_1329_pp0_iter5_reg;
reg   [1:0] trunc_ln122_reg_1329_pp0_iter6_reg;
reg   [1:0] trunc_ln122_reg_1329_pp0_iter7_reg;
reg   [63:0] gmem4_addr_read_reg_1338;
wire   [31:0] trunc_ln120_fu_374_p1;
reg   [31:0] trunc_ln120_reg_1343;
reg   [31:0] trunc_ln120_1_reg_1348;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_13_reg_1353;
reg   [0:0] tmp_13_reg_1353_pp0_iter3_reg;
reg   [0:0] tmp_13_reg_1353_pp0_iter4_reg;
reg   [0:0] tmp_13_reg_1353_pp0_iter5_reg;
wire   [62:0] trunc_ln557_fu_404_p1;
reg   [62:0] trunc_ln557_reg_1363;
reg   [0:0] isneg_reg_1368;
reg   [0:0] isneg_reg_1368_pp0_iter5_reg;
reg   [0:0] isneg_reg_1368_pp0_iter6_reg;
reg   [10:0] exp_tmp_reg_1375;
wire   [51:0] trunc_ln565_fu_426_p1;
reg   [51:0] trunc_ln565_reg_1381;
reg   [51:0] trunc_ln565_reg_1381_pp0_iter5_reg;
wire   [0:0] icmp_ln571_fu_430_p2;
reg   [0:0] icmp_ln571_reg_1386;
reg   [0:0] icmp_ln571_reg_1386_pp0_iter6_reg;
reg   [0:0] icmp_ln571_reg_1386_pp0_iter7_reg;
wire   [11:0] F2_fu_438_p2;
reg   [11:0] F2_reg_1395;
wire   [5:0] trunc_ln575_fu_444_p1;
reg   [5:0] trunc_ln575_reg_1407;
reg   [5:0] trunc_ln575_reg_1407_pp0_iter6_reg;
wire   [0:0] icmp_ln582_fu_448_p2;
reg   [0:0] icmp_ln582_reg_1412;
reg   [0:0] icmp_ln582_reg_1412_pp0_iter6_reg;
reg   [0:0] icmp_ln582_reg_1412_pp0_iter7_reg;
wire   [10:0] trunc_ln575_1_fu_453_p1;
reg   [10:0] trunc_ln575_1_reg_1418;
reg   [10:0] trunc_ln575_1_reg_1418_pp0_iter6_reg;
wire   [53:0] man_V_3_fu_474_p3;
reg   [53:0] man_V_3_reg_1423;
wire   [0:0] icmp_ln581_fu_481_p2;
reg   [0:0] icmp_ln581_reg_1431;
reg   [0:0] icmp_ln581_reg_1431_pp0_iter7_reg;
wire  signed [11:0] sh_amt_fu_491_p3;
reg  signed [11:0] sh_amt_reg_1437;
reg  signed [11:0] sh_amt_reg_1437_pp0_iter7_reg;
wire   [0:0] icmp_ln581_1_fu_498_p2;
reg   [0:0] icmp_ln581_1_reg_1443;
reg   [0:0] icmp_ln581_1_reg_1443_pp0_iter7_reg;
wire  signed [11:0] sh_amt_1_fu_513_p3;
reg  signed [11:0] sh_amt_1_reg_1449;
reg  signed [11:0] sh_amt_1_reg_1449_pp0_iter7_reg;
wire   [0:0] icmp_ln582_1_fu_521_p2;
reg   [0:0] icmp_ln582_1_reg_1455;
reg   [0:0] icmp_ln582_1_reg_1455_pp0_iter7_reg;
wire   [7:0] trunc_ln583_fu_526_p1;
reg   [7:0] trunc_ln583_reg_1461;
reg   [7:0] trunc_ln583_reg_1461_pp0_iter7_reg;
wire   [0:0] icmp_ln585_fu_530_p2;
reg   [0:0] icmp_ln585_reg_1469;
wire   [7:0] select_ln588_fu_536_p3;
reg   [7:0] select_ln588_reg_1474;
wire   [0:0] icmp_ln591_fu_543_p2;
reg   [0:0] icmp_ln591_reg_1480;
wire   [0:0] icmp_ln603_fu_558_p2;
reg   [0:0] icmp_ln603_reg_1485;
reg   [0:0] icmp_ln603_reg_1485_pp0_iter7_reg;
wire   [0:0] icmp_ln585_1_fu_564_p2;
reg   [0:0] icmp_ln585_1_reg_1490;
wire   [0:0] icmp_ln591_1_fu_570_p2;
reg   [0:0] icmp_ln591_1_reg_1495;
wire   [0:0] icmp_ln603_1_fu_586_p2;
reg   [0:0] icmp_ln603_1_reg_1500;
reg   [0:0] icmp_ln603_1_reg_1500_pp0_iter7_reg;
wire   [7:0] add_ln415_fu_678_p2;
reg   [7:0] add_ln415_reg_1505;
wire   [0:0] xor_ln571_fu_684_p2;
reg   [0:0] xor_ln571_reg_1510;
wire   [0:0] or_ln582_fu_689_p2;
reg   [0:0] or_ln582_reg_1516;
wire   [7:0] add_ln415_1_fu_703_p2;
reg   [7:0] add_ln415_1_reg_1522;
wire   [0:0] or_ln582_1_fu_709_p2;
reg   [0:0] or_ln582_1_reg_1527;
wire   [7:0] alpha_reg_V_0_fu_788_p3;
reg   [7:0] alpha_reg_V_0_reg_1533;
wire   [7:0] beta_reg_V_0_fu_846_p3;
reg   [7:0] beta_reg_V_0_reg_1538;
wire   [0:0] and_ln122_1_fu_869_p2;
reg   [0:0] and_ln122_1_reg_1543;
wire   [0:0] and_ln122_2_fu_879_p2;
reg   [0:0] and_ln122_2_reg_1549;
wire   [0:0] and_ln124_fu_894_p2;
reg   [0:0] and_ln124_reg_1555;
wire   [0:0] and_ln122_3_fu_900_p2;
reg   [0:0] and_ln122_3_reg_1561;
wire   [0:0] and_ln124_1_fu_910_p2;
reg   [0:0] and_ln124_1_reg_1567;
wire   [7:0] beta_reg_V_2_9_fu_932_p3;
reg   [7:0] beta_reg_V_2_9_reg_1573;
reg    ap_enable_reg_pp0_iter8;
wire   [7:0] beta_reg_V_2_11_fu_940_p3;
reg   [7:0] beta_reg_V_2_11_reg_1578;
wire   [7:0] alpha_reg_V_2_10_fu_972_p3;
reg   [7:0] alpha_reg_V_2_10_reg_1583;
wire   [7:0] alpha_reg_V_2_13_fu_988_p3;
reg   [7:0] alpha_reg_V_2_13_reg_1588;
wire   [7:0] beta_reg_V_2_5_fu_1023_p3;
reg    ap_enable_reg_pp0_iter9;
wire   [7:0] alpha_reg_V_2_5_fu_1057_p3;
wire    ap_CS_fsm_state82;
wire   [31:0] grp_fu_1281_p2;
reg   [31:0] loop_count_reg_1613;
wire    ap_CS_fsm_state85;
wire   [8:0] rhs_i_fu_1078_p1;
reg   [8:0] rhs_i_reg_1618;
wire  signed [16:0] sext_ln1118_fu_1082_p1;
reg  signed [16:0] sext_ln1118_reg_1623;
wire   [8:0] rhs_1_i_fu_1086_p1;
reg   [8:0] rhs_1_i_reg_1628;
wire  signed [16:0] sext_ln1118_1_fu_1090_p1;
reg  signed [16:0] sext_ln1118_1_reg_1633;
wire   [8:0] rhs_2_i_fu_1094_p1;
reg   [8:0] rhs_2_i_reg_1638;
wire  signed [16:0] sext_ln1118_2_fu_1098_p1;
reg  signed [16:0] sext_ln1118_2_reg_1643;
wire   [30:0] add_ln49_fu_1102_p2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state86_pp1_stage0_iter0;
reg    ap_block_state87_pp1_stage0_iter1;
wire    ap_block_state88_pp1_stage0_iter2;
reg    ap_block_state89_pp1_stage0_iter3;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln49_fu_1112_p2;
reg   [0:0] icmp_ln49_reg_1653_pp1_iter1_reg;
wire   [8:0] ret_V_fu_1125_p2;
reg  signed [8:0] ret_V_reg_1657;
wire   [8:0] ret_V_31_fu_1144_p2;
reg  signed [8:0] ret_V_31_reg_1662;
wire   [8:0] ret_V_32_fu_1163_p2;
reg  signed [8:0] ret_V_32_reg_1667;
reg   [7:0] trunc_ln5_reg_1672;
reg   [0:0] tmp_reg_1677;
reg   [7:0] trunc_ln708_1_reg_1682;
reg   [0:0] tmp_10_reg_1687;
reg   [7:0] trunc_ln708_2_reg_1692;
reg   [0:0] tmp_11_reg_1697;
wire    ap_CS_fsm_state71;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter1_state73;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state86;
reg    ap_enable_reg_pp1_iter2;
reg   [31:0] ap_phi_mux_shiftreg_i_phi_fu_292_p4;
reg   [63:0] ap_phi_mux_empty_87_phi_fu_303_p4;
wire   [63:0] ap_phi_reg_pp0_iter2_empty_87_reg_300;
wire   [63:0] zext_ln115_fu_369_p1;
wire  signed [63:0] sext_ln115_fu_333_p1;
reg    ap_block_state1;
reg    ap_block_pp1_stage0_01001;
wire   [31:0] grp_fu_320_p0;
wire   [63:0] grp_fu_320_p1;
wire   [63:0] ireg_fu_400_p1;
wire   [11:0] zext_ln455_fu_435_p1;
wire   [52:0] man_V_fu_457_p3;
wire   [53:0] zext_ln569_fu_464_p1;
wire   [53:0] man_V_1_fu_468_p2;
wire   [11:0] sub_ln581_fu_486_p2;
wire   [11:0] add_ln581_fu_503_p2;
wire   [11:0] sub_ln581_1_fu_508_p2;
wire   [8:0] tmp_14_fu_548_p4;
wire   [8:0] tmp_15_fu_576_p4;
wire   [10:0] trunc_ln586_fu_592_p1;
wire   [53:0] zext_ln586_fu_595_p1;
wire   [53:0] ashr_ln586_fu_599_p2;
wire   [7:0] trunc_ln586_1_fu_604_p1;
wire  signed [31:0] sext_ln586_fu_614_p1;
wire   [53:0] zext_ln586_1_fu_617_p1;
wire   [53:0] ashr_ln586_1_fu_621_p2;
wire   [7:0] trunc_ln586_2_fu_626_p1;
wire   [5:0] add_ln591_fu_636_p2;
wire   [31:0] zext_ln591_fu_641_p1;
wire   [10:0] add_ln591_1_fu_652_p2;
wire   [31:0] zext_ln591_1_fu_657_p1;
wire   [0:0] p_Result_s_fu_645_p3;
wire   [0:0] qb_fu_668_p3;
wire   [7:0] select_ln585_fu_608_p3;
wire   [7:0] zext_ln415_3_fu_674_p1;
wire   [0:0] p_Result_1_fu_661_p3;
wire   [0:0] qb_1_fu_693_p3;
wire   [7:0] select_ln585_1_fu_630_p3;
wire   [7:0] zext_ln415_4_fu_699_p1;
wire  signed [14:0] sext_ln581_fu_713_p1;
wire   [7:0] sext_ln581cast_fu_719_p1;
wire  signed [14:0] sext_ln581_1_fu_716_p1;
wire   [7:0] sext_ln581_1cast_fu_728_p1;
wire   [0:0] and_ln582_fu_737_p2;
wire   [0:0] xor_ln582_fu_748_p2;
wire   [0:0] and_ln581_fu_753_p2;
wire   [7:0] select_ln582_fu_741_p3;
wire   [0:0] or_ln581_fu_765_p2;
wire   [0:0] xor_ln581_fu_769_p2;
wire   [0:0] and_ln603_fu_775_p2;
wire   [7:0] shl_ln604_fu_723_p2;
wire   [7:0] select_ln581_fu_758_p3;
wire   [7:0] select_ln603_fu_780_p3;
wire   [0:0] and_ln582_1_fu_795_p2;
wire   [0:0] xor_ln582_1_fu_806_p2;
wire   [0:0] and_ln581_1_fu_811_p2;
wire   [7:0] select_ln582_1_fu_799_p3;
wire   [0:0] or_ln581_1_fu_823_p2;
wire   [0:0] xor_ln581_1_fu_827_p2;
wire   [0:0] and_ln603_1_fu_833_p2;
wire   [7:0] shl_ln604_1_fu_732_p2;
wire   [7:0] select_ln581_1_fu_816_p3;
wire   [7:0] select_ln603_1_fu_838_p3;
wire   [0:0] icmp_ln122_fu_853_p2;
wire   [0:0] icmp_ln122_1_fu_858_p2;
wire   [0:0] and_ln122_fu_863_p2;
wire   [0:0] icmp_ln122_2_fu_874_p2;
wire   [0:0] icmp_ln124_fu_884_p2;
wire   [0:0] xor_ln121_fu_889_p2;
wire   [0:0] icmp_ln124_1_fu_905_p2;
wire  signed [7:0] beta_reg_V_2_7_fu_916_p2;
wire  signed [7:0] beta_reg_V_2_8_fu_924_p1;
wire   [7:0] beta_reg_V_2_7_fu_916_p3;
wire  signed [7:0] beta_reg_V_2_9_fu_932_p1;
wire   [7:0] beta_reg_V_2_8_fu_924_p3;
wire  signed [7:0] beta_reg_V_2_11_fu_940_p2;
wire   [7:0] alpha_reg_V_2_7_fu_948_p3;
wire   [7:0] alpha_reg_V_2_8_fu_956_p3;
wire   [7:0] alpha_reg_V_2_9_fu_964_p3;
wire   [7:0] alpha_reg_V_2_12_fu_980_p3;
wire   [7:0] beta_reg_V_2_fu_996_p3;
wire   [7:0] beta_reg_V_2_2_fu_1002_p3;
wire   [7:0] beta_reg_V_2_3_fu_1009_p3;
wire   [7:0] beta_reg_V_2_4_fu_1016_p3;
wire   [7:0] alpha_reg_V_2_fu_1030_p3;
wire   [7:0] alpha_reg_V_2_2_fu_1036_p3;
wire   [7:0] alpha_reg_V_2_3_fu_1043_p3;
wire   [7:0] alpha_reg_V_2_4_fu_1050_p3;
wire   [15:0] width_fu_1064_p1;
wire   [15:0] height_fu_1067_p1;
wire   [31:0] k_cast_fu_1108_p1;
wire   [7:0] x_1pix_V_fu_1117_p1;
wire   [8:0] zext_ln703_fu_1121_p1;
wire   [7:0] x_1pix_V_1_fu_1130_p4;
wire   [8:0] zext_ln703_1_fu_1140_p1;
wire   [7:0] x_1pix_V_2_fu_1149_p4;
wire   [8:0] zext_ln703_2_fu_1159_p1;
wire  signed [7:0] r_V_fu_1171_p1;
wire   [16:0] r_V_fu_1171_p2;
wire  signed [7:0] r_V_25_fu_1197_p1;
wire   [16:0] r_V_25_fu_1197_p2;
wire  signed [7:0] r_V_26_fu_1223_p1;
wire   [16:0] r_V_26_fu_1223_p2;
wire   [7:0] zext_ln415_fu_1246_p1;
wire   [7:0] zext_ln415_1_fu_1254_p1;
wire   [7:0] zext_ln415_2_fu_1262_p1;
wire   [7:0] out_1pix_V_2_fu_1265_p2;
wire   [7:0] out_1pix_V_1_fu_1257_p2;
wire   [7:0] out_1pix_V_fu_1249_p2;
wire   [15:0] grp_fu_1281_p0;
wire   [15:0] grp_fu_1281_p1;
reg    grp_fu_320_ce;
wire    ap_CS_fsm_state90;
reg   [77:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [31:0] grp_fu_1281_p00;
wire   [31:0] grp_fu_1281_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 78'd1;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

pp_pipeline_accel_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U239(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_320_p0),
    .ce(grp_fu_320_ce),
    .dout(grp_fu_320_p1)
);

pp_pipeline_accel_mul_9s_8s_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 17 ))
mul_9s_8s_17_1_1_U240(
    .din0(ret_V_reg_1657),
    .din1(r_V_fu_1171_p1),
    .dout(r_V_fu_1171_p2)
);

pp_pipeline_accel_mul_9s_8s_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 17 ))
mul_9s_8s_17_1_1_U241(
    .din0(ret_V_31_reg_1662),
    .din1(r_V_25_fu_1197_p1),
    .dout(r_V_25_fu_1197_p2)
);

pp_pipeline_accel_mul_9s_8s_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 17 ))
mul_9s_8s_17_1_1_U242(
    .din0(ret_V_32_reg_1667),
    .din1(r_V_26_fu_1223_p1),
    .dout(r_V_26_fu_1223_p2)
);

pp_pipeline_accel_mul_mul_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_16ns_32_4_1_U243(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1281_p0),
    .din1(grp_fu_1281_p1),
    .ce(1'b1),
    .dout(grp_fu_1281_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state90)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state71)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state73)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if ((1'b1 == ap_CS_fsm_state71)) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state86) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state85)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state86)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state86);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state85)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_349_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_205 <= add_ln115_fu_343_p2;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        i_reg_205 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_fu_1112_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        k_reg_309 <= add_ln49_fu_1102_p2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        k_reg_309 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln115_reg_1313_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shiftreg_i_reg_288 <= trunc_ln120_1_reg_1348;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        shiftreg_i_reg_288 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_reg_1313_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        F2_reg_1395 <= F2_fu_438_p2;
        icmp_ln571_reg_1386 <= icmp_ln571_fu_430_p2;
        icmp_ln582_reg_1412 <= icmp_ln582_fu_448_p2;
        trunc_ln575_1_reg_1418 <= trunc_ln575_1_fu_453_p1;
        trunc_ln575_reg_1407 <= trunc_ln575_fu_444_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (icmp_ln115_reg_1313_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_V_reg_252 <= alpha_reg_V_2_5_fu_1057_p3;
        alpha_reg_V_2_11_reg_276 <= alpha_reg_V_2_13_reg_1588;
        alpha_reg_V_2_6_reg_264 <= alpha_reg_V_2_10_reg_1583;
        b_V_2_reg_216 <= beta_reg_V_2_5_fu_1023_p3;
        beta_reg_V_2_10_reg_240 <= beta_reg_V_2_11_reg_1578;
        beta_reg_V_2_6_reg_228 <= beta_reg_V_2_9_reg_1573;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln571_reg_1386_pp0_iter6_reg == 1'd0) & (icmp_ln115_reg_1313_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln415_1_reg_1522 <= add_ln415_1_fu_703_p2;
        add_ln415_reg_1505 <= add_ln415_fu_678_p2;
        or_ln582_1_reg_1527 <= or_ln582_1_fu_709_p2;
        or_ln582_reg_1516 <= or_ln582_fu_689_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_reg_1313_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        alpha_reg_V_0_reg_1533 <= alpha_reg_V_0_fu_788_p3;
        and_ln122_1_reg_1543 <= and_ln122_1_fu_869_p2;
        and_ln122_2_reg_1549 <= and_ln122_2_fu_879_p2;
        and_ln122_3_reg_1561 <= and_ln122_3_fu_900_p2;
        and_ln124_1_reg_1567 <= and_ln124_1_fu_910_p2;
        and_ln124_reg_1555 <= and_ln124_fu_894_p2;
        beta_reg_V_0_reg_1538 <= beta_reg_V_0_fu_846_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln115_reg_1313_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        alpha_reg_V_2_10_reg_1583 <= alpha_reg_V_2_10_fu_972_p3;
        alpha_reg_V_2_13_reg_1588 <= alpha_reg_V_2_13_fu_988_p3;
        beta_reg_V_2_11_reg_1578 <= beta_reg_V_2_11_fu_940_p3;
        beta_reg_V_2_9_reg_1573 <= beta_reg_V_2_9_fu_932_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_reg_1313_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exp_tmp_reg_1375 <= {{ireg_fu_400_p1[62:52]}};
        isneg_reg_1368 <= ireg_fu_400_p1[32'd63];
        trunc_ln557_reg_1363 <= trunc_ln557_fu_404_p1;
        trunc_ln565_reg_1381 <= trunc_ln565_fu_426_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op192_read_state73 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem4_addr_read_reg_1338 <= m_axi_gmem4_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln115_reg_1313 <= icmp_ln115_fu_349_p2;
        icmp_ln115_reg_1313_pp0_iter1_reg <= icmp_ln115_reg_1313;
        icmp_ln121_reg_1321_pp0_iter1_reg <= icmp_ln121_reg_1321;
        trunc_ln115_reg_1317_pp0_iter1_reg <= trunc_ln115_reg_1317;
        trunc_ln122_reg_1329_pp0_iter1_reg <= trunc_ln122_reg_1329;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln115_reg_1313_pp0_iter2_reg <= icmp_ln115_reg_1313_pp0_iter1_reg;
        icmp_ln115_reg_1313_pp0_iter3_reg <= icmp_ln115_reg_1313_pp0_iter2_reg;
        icmp_ln115_reg_1313_pp0_iter4_reg <= icmp_ln115_reg_1313_pp0_iter3_reg;
        icmp_ln115_reg_1313_pp0_iter5_reg <= icmp_ln115_reg_1313_pp0_iter4_reg;
        icmp_ln115_reg_1313_pp0_iter6_reg <= icmp_ln115_reg_1313_pp0_iter5_reg;
        icmp_ln115_reg_1313_pp0_iter7_reg <= icmp_ln115_reg_1313_pp0_iter6_reg;
        icmp_ln115_reg_1313_pp0_iter8_reg <= icmp_ln115_reg_1313_pp0_iter7_reg;
        icmp_ln121_reg_1321_pp0_iter2_reg <= icmp_ln121_reg_1321_pp0_iter1_reg;
        icmp_ln121_reg_1321_pp0_iter3_reg <= icmp_ln121_reg_1321_pp0_iter2_reg;
        icmp_ln121_reg_1321_pp0_iter4_reg <= icmp_ln121_reg_1321_pp0_iter3_reg;
        icmp_ln121_reg_1321_pp0_iter5_reg <= icmp_ln121_reg_1321_pp0_iter4_reg;
        icmp_ln121_reg_1321_pp0_iter6_reg <= icmp_ln121_reg_1321_pp0_iter5_reg;
        icmp_ln121_reg_1321_pp0_iter7_reg <= icmp_ln121_reg_1321_pp0_iter6_reg;
        icmp_ln571_reg_1386_pp0_iter6_reg <= icmp_ln571_reg_1386;
        icmp_ln571_reg_1386_pp0_iter7_reg <= icmp_ln571_reg_1386_pp0_iter6_reg;
        icmp_ln581_1_reg_1443_pp0_iter7_reg <= icmp_ln581_1_reg_1443;
        icmp_ln581_reg_1431_pp0_iter7_reg <= icmp_ln581_reg_1431;
        icmp_ln582_1_reg_1455_pp0_iter7_reg <= icmp_ln582_1_reg_1455;
        icmp_ln582_reg_1412_pp0_iter6_reg <= icmp_ln582_reg_1412;
        icmp_ln582_reg_1412_pp0_iter7_reg <= icmp_ln582_reg_1412_pp0_iter6_reg;
        icmp_ln603_1_reg_1500_pp0_iter7_reg <= icmp_ln603_1_reg_1500;
        icmp_ln603_reg_1485_pp0_iter7_reg <= icmp_ln603_reg_1485;
        isneg_reg_1368_pp0_iter5_reg <= isneg_reg_1368;
        isneg_reg_1368_pp0_iter6_reg <= isneg_reg_1368_pp0_iter5_reg;
        sh_amt_1_reg_1449_pp0_iter7_reg <= sh_amt_1_reg_1449;
        sh_amt_reg_1437_pp0_iter7_reg <= sh_amt_reg_1437;
        tmp_13_reg_1353_pp0_iter3_reg <= tmp_13_reg_1353;
        tmp_13_reg_1353_pp0_iter4_reg <= tmp_13_reg_1353_pp0_iter3_reg;
        tmp_13_reg_1353_pp0_iter5_reg <= tmp_13_reg_1353_pp0_iter4_reg;
        trunc_ln122_reg_1329_pp0_iter2_reg <= trunc_ln122_reg_1329_pp0_iter1_reg;
        trunc_ln122_reg_1329_pp0_iter3_reg <= trunc_ln122_reg_1329_pp0_iter2_reg;
        trunc_ln122_reg_1329_pp0_iter4_reg <= trunc_ln122_reg_1329_pp0_iter3_reg;
        trunc_ln122_reg_1329_pp0_iter5_reg <= trunc_ln122_reg_1329_pp0_iter4_reg;
        trunc_ln122_reg_1329_pp0_iter6_reg <= trunc_ln122_reg_1329_pp0_iter5_reg;
        trunc_ln122_reg_1329_pp0_iter7_reg <= trunc_ln122_reg_1329_pp0_iter6_reg;
        trunc_ln565_reg_1381_pp0_iter5_reg <= trunc_ln565_reg_1381;
        trunc_ln575_1_reg_1418_pp0_iter6_reg <= trunc_ln575_1_reg_1418;
        trunc_ln575_reg_1407_pp0_iter6_reg <= trunc_ln575_reg_1407;
        trunc_ln583_reg_1461_pp0_iter7_reg <= trunc_ln583_reg_1461;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln121_reg_1321 <= icmp_ln121_fu_359_p2;
        trunc_ln115_reg_1317 <= trunc_ln115_fu_355_p1;
        trunc_ln122_reg_1329 <= trunc_ln122_fu_365_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln49_reg_1653 <= icmp_ln49_fu_1112_p2;
        icmp_ln49_reg_1653_pp1_iter1_reg <= icmp_ln49_reg_1653;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln49_reg_1653_pp1_iter2_reg <= icmp_ln49_reg_1653_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln571_reg_1386 == 1'd0) & (icmp_ln115_reg_1313_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln581_1_reg_1443 <= icmp_ln581_1_fu_498_p2;
        icmp_ln581_reg_1431 <= icmp_ln581_fu_481_p2;
        icmp_ln582_1_reg_1455 <= icmp_ln582_1_fu_521_p2;
        icmp_ln585_1_reg_1490 <= icmp_ln585_1_fu_564_p2;
        icmp_ln585_reg_1469 <= icmp_ln585_fu_530_p2;
        icmp_ln591_1_reg_1495 <= icmp_ln591_1_fu_570_p2;
        icmp_ln591_reg_1480 <= icmp_ln591_fu_543_p2;
        icmp_ln603_1_reg_1500 <= icmp_ln603_1_fu_586_p2;
        icmp_ln603_reg_1485 <= icmp_ln603_fu_558_p2;
        sh_amt_1_reg_1449 <= sh_amt_1_fu_513_p3;
        sh_amt_reg_1437 <= sh_amt_fu_491_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        in_mat_cols_read_reg_1292 <= in_mat_cols_dout;
        in_mat_rows_read_reg_1287 <= in_mat_rows_dout;
        trunc_ln_reg_1297 <= {{params_dout[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        loop_count_reg_1613 <= grp_fu_1281_p2;
        rhs_1_i_reg_1628[7 : 0] <= rhs_1_i_fu_1086_p1[7 : 0];
        rhs_2_i_reg_1638[7 : 0] <= rhs_2_i_fu_1094_p1[7 : 0];
        rhs_i_reg_1618[7 : 0] <= rhs_i_fu_1078_p1[7 : 0];
        sext_ln1118_1_reg_1633 <= sext_ln1118_1_fu_1090_p1;
        sext_ln1118_2_reg_1643 <= sext_ln1118_2_fu_1098_p1;
        sext_ln1118_reg_1623 <= sext_ln1118_fu_1082_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_reg_1313_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        man_V_3_reg_1423 <= man_V_3_fu_474_p3;
        select_ln588_reg_1474 <= select_ln588_fu_536_p3;
        trunc_ln583_reg_1461 <= trunc_ln583_fu_526_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln49_reg_1653 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ret_V_31_reg_1662 <= ret_V_31_fu_1144_p2;
        ret_V_32_reg_1667 <= ret_V_32_fu_1163_p2;
        ret_V_reg_1657 <= ret_V_fu_1125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln49_reg_1653_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_10_reg_1687 <= r_V_25_fu_1197_p2[32'd3];
        tmp_11_reg_1697 <= r_V_26_fu_1223_p2[32'd3];
        tmp_reg_1677 <= r_V_fu_1171_p2[32'd3];
        trunc_ln5_reg_1672 <= {{r_V_fu_1171_p2[11:4]}};
        trunc_ln708_1_reg_1682 <= {{r_V_25_fu_1197_p2[11:4]}};
        trunc_ln708_2_reg_1692 <= {{r_V_26_fu_1223_p2[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_reg_1313_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_13_reg_1353 <= ap_phi_mux_empty_87_phi_fu_303_p4[32'd31];
        trunc_ln120_reg_1343 <= trunc_ln120_fu_374_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln115_reg_1313_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln120_1_reg_1348 <= {{ap_phi_mux_empty_87_phi_fu_303_p4[63:32]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_reg_1313_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        xor_ln571_reg_1510 <= xor_ln571_fu_684_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state73 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state73 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln115_fu_349_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln49_fu_1112_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state86 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state86 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln115_reg_1313_pp0_iter1_reg == 1'd0)) begin
        if ((trunc_ln115_reg_1317_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_empty_87_phi_fu_303_p4 = zext_ln115_fu_369_p1;
        end else if ((trunc_ln115_reg_1317_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_empty_87_phi_fu_303_p4 = gmem4_addr_read_reg_1338;
        end else begin
            ap_phi_mux_empty_87_phi_fu_303_p4 = ap_phi_reg_pp0_iter2_empty_87_reg_300;
        end
    end else begin
        ap_phi_mux_empty_87_phi_fu_303_p4 = ap_phi_reg_pp0_iter2_empty_87_reg_300;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln115_reg_1313_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_shiftreg_i_phi_fu_292_p4 = trunc_ln120_1_reg_1348;
    end else begin
        ap_phi_mux_shiftreg_i_phi_fu_292_p4 = shiftreg_i_reg_288;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem4_blk_n_AR = m_axi_gmem4_ARREADY;
    end else begin
        gmem4_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((trunc_ln115_reg_1317 == 1'd0) & (icmp_ln115_reg_1313 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem4_blk_n_R = m_axi_gmem4_RVALID;
    end else begin
        gmem4_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_320_ce = 1'b1;
    end else begin
        grp_fu_320_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_mat_cols_blk_n = in_mat_cols_empty_n;
    end else begin
        in_mat_cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (params_empty_n == 1'b0) | (in_mat_cols_empty_n == 1'b0) | (in_mat_rows_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_mat_cols_read = 1'b1;
    end else begin
        in_mat_cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_mat_rows_blk_n = in_mat_rows_empty_n;
    end else begin
        in_mat_rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (params_empty_n == 1'b0) | (in_mat_cols_empty_n == 1'b0) | (in_mat_rows_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_mat_rows_read = 1'b1;
    end else begin
        in_mat_rows_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem4_ARREADY == 1'b1))) begin
        m_axi_gmem4_ARVALID = 1'b1;
    end else begin
        m_axi_gmem4_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op192_read_state73 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem4_RREADY = 1'b1;
    end else begin
        m_axi_gmem4_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_1653_pp1_iter2_reg == 1'd1) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        out_mat_470_blk_n = out_mat_470_full_n;
    end else begin
        out_mat_470_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln49_reg_1653_pp1_iter2_reg == 1'd1) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        out_mat_470_write = 1'b1;
    end else begin
        out_mat_470_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        params_blk_n = params_empty_n;
    end else begin
        params_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (params_empty_n == 1'b0) | (in_mat_cols_empty_n == 1'b0) | (in_mat_rows_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        params_read = 1'b1;
    end else begin
        params_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln49_reg_1653 == 1'd1) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        resize_out_mat_469_blk_n = resize_out_mat_469_empty_n;
    end else begin
        resize_out_mat_469_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln49_reg_1653 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        resize_out_mat_469_read = 1'b1;
    end else begin
        resize_out_mat_469_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (params_empty_n == 1'b0) | (in_mat_cols_empty_n == 1'b0) | (in_mat_rows_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem4_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln49_fu_1112_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((icmp_ln49_fu_1112_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_438_p2 = (12'd1075 - zext_ln455_fu_435_p1);

assign add_ln115_fu_343_p2 = (i_reg_205 + 3'd1);

assign add_ln415_1_fu_703_p2 = (select_ln585_1_fu_630_p3 + zext_ln415_4_fu_699_p1);

assign add_ln415_fu_678_p2 = (select_ln585_fu_608_p3 + zext_ln415_3_fu_674_p1);

assign add_ln49_fu_1102_p2 = (k_reg_309 + 31'd1);

assign add_ln581_fu_503_p2 = ($signed(F2_reg_1395) + $signed(12'd4092));

assign add_ln591_1_fu_652_p2 = ($signed(trunc_ln575_1_reg_1418_pp0_iter6_reg) + $signed(11'd2043));

assign add_ln591_fu_636_p2 = ($signed(trunc_ln575_reg_1407_pp0_iter6_reg) + $signed(6'd63));

assign alpha_reg_V_0_fu_788_p3 = ((icmp_ln571_reg_1386_pp0_iter7_reg[0:0] == 1'b1) ? 8'd0 : select_ln603_fu_780_p3);

assign alpha_reg_V_2_10_fu_972_p3 = ((and_ln124_1_fu_910_p2[0:0] == 1'b1) ? alpha_reg_V_2_10_reg_1583 : alpha_reg_V_2_9_fu_964_p3);

assign alpha_reg_V_2_12_fu_980_p3 = ((and_ln122_3_fu_900_p2[0:0] == 1'b1) ? alpha_reg_V_0_fu_788_p3 : alpha_reg_V_2_13_reg_1588);

assign alpha_reg_V_2_13_fu_988_p3 = ((and_ln124_1_fu_910_p2[0:0] == 1'b1) ? alpha_reg_V_2_13_reg_1588 : alpha_reg_V_2_12_fu_980_p3);

assign alpha_reg_V_2_2_fu_1036_p3 = ((and_ln122_2_reg_1549[0:0] == 1'b1) ? a_V_reg_252 : alpha_reg_V_2_fu_1030_p3);

assign alpha_reg_V_2_3_fu_1043_p3 = ((and_ln124_reg_1555[0:0] == 1'b1) ? a_V_reg_252 : alpha_reg_V_2_2_fu_1036_p3);

assign alpha_reg_V_2_4_fu_1050_p3 = ((and_ln122_3_reg_1561[0:0] == 1'b1) ? a_V_reg_252 : alpha_reg_V_2_3_fu_1043_p3);

assign alpha_reg_V_2_5_fu_1057_p3 = ((and_ln124_1_reg_1567[0:0] == 1'b1) ? a_V_reg_252 : alpha_reg_V_2_4_fu_1050_p3);

assign alpha_reg_V_2_7_fu_948_p3 = ((and_ln122_2_fu_879_p2[0:0] == 1'b1) ? alpha_reg_V_0_fu_788_p3 : alpha_reg_V_2_10_reg_1583);

assign alpha_reg_V_2_8_fu_956_p3 = ((and_ln124_fu_894_p2[0:0] == 1'b1) ? alpha_reg_V_2_10_reg_1583 : alpha_reg_V_2_7_fu_948_p3);

assign alpha_reg_V_2_9_fu_964_p3 = ((and_ln122_3_fu_900_p2[0:0] == 1'b1) ? alpha_reg_V_2_10_reg_1583 : alpha_reg_V_2_8_fu_956_p3);

assign alpha_reg_V_2_fu_1030_p3 = ((and_ln122_1_reg_1543[0:0] == 1'b1) ? alpha_reg_V_0_reg_1533 : a_V_reg_252);

assign and_ln122_1_fu_869_p2 = (icmp_ln121_reg_1321_pp0_iter7_reg & and_ln122_fu_863_p2);

assign and_ln122_2_fu_879_p2 = (icmp_ln122_2_fu_874_p2 & icmp_ln121_reg_1321_pp0_iter7_reg);

assign and_ln122_3_fu_900_p2 = (icmp_ln124_fu_884_p2 & icmp_ln121_reg_1321_pp0_iter7_reg);

assign and_ln122_fu_863_p2 = (icmp_ln122_fu_853_p2 & icmp_ln122_1_fu_858_p2);

assign and_ln124_1_fu_910_p2 = (xor_ln121_fu_889_p2 & icmp_ln124_1_fu_905_p2);

assign and_ln124_fu_894_p2 = (xor_ln121_fu_889_p2 & icmp_ln124_fu_884_p2);

assign and_ln581_1_fu_811_p2 = (xor_ln582_1_fu_806_p2 & icmp_ln581_1_reg_1443_pp0_iter7_reg);

assign and_ln581_fu_753_p2 = (xor_ln582_fu_748_p2 & icmp_ln581_reg_1431_pp0_iter7_reg);

assign and_ln582_1_fu_795_p2 = (xor_ln571_reg_1510 & icmp_ln582_1_reg_1455_pp0_iter7_reg);

assign and_ln582_fu_737_p2 = (xor_ln571_reg_1510 & icmp_ln582_reg_1412_pp0_iter7_reg);

assign and_ln603_1_fu_833_p2 = (xor_ln581_1_fu_827_p2 & icmp_ln603_1_reg_1500_pp0_iter7_reg);

assign and_ln603_fu_775_p2 = (xor_ln581_fu_769_p2 & icmp_ln603_reg_1485_pp0_iter7_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd77];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_predicate_op192_read_state73 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmem4_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_predicate_op192_read_state73 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (m_axi_gmem4_RVALID == 1'b0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln49_reg_1653_pp1_iter2_reg == 1'd1) & (ap_enable_reg_pp1_iter3 == 1'b1) & (out_mat_470_full_n == 1'b0)) | ((icmp_ln49_reg_1653 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (resize_out_mat_469_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((icmp_ln49_reg_1653_pp1_iter2_reg == 1'd1) & (ap_enable_reg_pp1_iter3 == 1'b1) & (out_mat_470_full_n == 1'b0)) | ((icmp_ln49_reg_1653 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (resize_out_mat_469_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((icmp_ln49_reg_1653_pp1_iter2_reg == 1'd1) & (ap_enable_reg_pp1_iter3 == 1'b1) & (out_mat_470_full_n == 1'b0)) | ((icmp_ln49_reg_1653 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (resize_out_mat_469_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (params_empty_n == 1'b0) | (in_mat_cols_empty_n == 1'b0) | (in_mat_rows_empty_n == 1'b0));
end

assign ap_block_state72_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state73_pp0_stage0_iter1 = ((ap_predicate_op192_read_state73 == 1'b1) & (m_axi_gmem4_RVALID == 1'b0));
end

assign ap_block_state74_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state87_pp1_stage0_iter1 = ((icmp_ln49_reg_1653 == 1'd1) & (resize_out_mat_469_empty_n == 1'b0));
end

assign ap_block_state88_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state89_pp1_stage0_iter3 = ((icmp_ln49_reg_1653_pp1_iter2_reg == 1'd1) & (out_mat_470_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_reg_pp0_iter2_empty_87_reg_300 = 'bx;

always @ (*) begin
    ap_predicate_op192_read_state73 = ((trunc_ln115_reg_1317 == 1'd0) & (icmp_ln115_reg_1313 == 1'd0));
end

assign ashr_ln586_1_fu_621_p2 = $signed(man_V_3_reg_1423) >>> zext_ln586_1_fu_617_p1;

assign ashr_ln586_fu_599_p2 = $signed(man_V_3_reg_1423) >>> zext_ln586_fu_595_p1;

assign beta_reg_V_0_fu_846_p3 = ((icmp_ln571_reg_1386_pp0_iter7_reg[0:0] == 1'b1) ? 8'd0 : select_ln603_1_fu_838_p3);

assign beta_reg_V_2_11_fu_940_p2 = beta_reg_V_2_11_reg_1578;

assign beta_reg_V_2_11_fu_940_p3 = ((and_ln124_1_fu_910_p2[0:0] == 1'b1) ? beta_reg_V_0_fu_846_p3 : beta_reg_V_2_11_fu_940_p2);

assign beta_reg_V_2_2_fu_1002_p3 = ((and_ln122_2_reg_1549[0:0] == 1'b1) ? b_V_2_reg_216 : beta_reg_V_2_fu_996_p3);

assign beta_reg_V_2_3_fu_1009_p3 = ((and_ln124_reg_1555[0:0] == 1'b1) ? b_V_2_reg_216 : beta_reg_V_2_2_fu_1002_p3);

assign beta_reg_V_2_4_fu_1016_p3 = ((and_ln122_3_reg_1561[0:0] == 1'b1) ? b_V_2_reg_216 : beta_reg_V_2_3_fu_1009_p3);

assign beta_reg_V_2_5_fu_1023_p3 = ((and_ln124_1_reg_1567[0:0] == 1'b1) ? b_V_2_reg_216 : beta_reg_V_2_4_fu_1016_p3);

assign beta_reg_V_2_7_fu_916_p2 = beta_reg_V_2_9_reg_1573;

assign beta_reg_V_2_7_fu_916_p3 = ((and_ln124_fu_894_p2[0:0] == 1'b1) ? beta_reg_V_0_fu_846_p3 : beta_reg_V_2_7_fu_916_p2);

assign beta_reg_V_2_8_fu_924_p1 = beta_reg_V_2_9_reg_1573;

assign beta_reg_V_2_8_fu_924_p3 = ((and_ln122_3_fu_900_p2[0:0] == 1'b1) ? beta_reg_V_2_8_fu_924_p1 : beta_reg_V_2_7_fu_916_p3);

assign beta_reg_V_2_9_fu_932_p1 = beta_reg_V_2_9_reg_1573;

assign beta_reg_V_2_9_fu_932_p3 = ((and_ln124_1_fu_910_p2[0:0] == 1'b1) ? beta_reg_V_2_9_fu_932_p1 : beta_reg_V_2_8_fu_924_p3);

assign beta_reg_V_2_fu_996_p3 = ((and_ln122_1_reg_1543[0:0] == 1'b1) ? b_V_2_reg_216 : beta_reg_V_0_reg_1538);

assign grp_fu_1281_p0 = grp_fu_1281_p00;

assign grp_fu_1281_p00 = height_fu_1067_p1;

assign grp_fu_1281_p1 = grp_fu_1281_p10;

assign grp_fu_1281_p10 = width_fu_1064_p1;

assign grp_fu_320_p0 = trunc_ln120_reg_1343;

assign height_fu_1067_p1 = in_mat_rows_read_reg_1287[15:0];

assign icmp_ln115_fu_349_p2 = ((i_reg_205 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_359_p2 = ((i_reg_205 < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln122_1_fu_858_p2 = ((trunc_ln122_reg_1329_pp0_iter7_reg != 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln122_2_fu_874_p2 = ((trunc_ln122_reg_1329_pp0_iter7_reg == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_853_p2 = ((trunc_ln122_reg_1329_pp0_iter7_reg != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln124_1_fu_905_p2 = ((trunc_ln122_reg_1329_pp0_iter7_reg == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln124_fu_884_p2 = ((trunc_ln122_reg_1329_pp0_iter7_reg == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_1112_p2 = (($signed(k_cast_fu_1108_p1) < $signed(loop_count_reg_1613)) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_430_p2 = ((trunc_ln557_reg_1363 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_1_fu_498_p2 = (($signed(F2_reg_1395) > $signed(12'd4)) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_481_p2 = (($signed(F2_reg_1395) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign icmp_ln582_1_fu_521_p2 = ((F2_reg_1395 == 12'd4) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_448_p2 = ((exp_tmp_reg_1375 == 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln585_1_fu_564_p2 = ((sh_amt_1_fu_513_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_530_p2 = ((sh_amt_fu_491_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln591_1_fu_570_p2 = (($signed(add_ln581_fu_503_p2) > $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln591_fu_543_p2 = (($signed(F2_reg_1395) > $signed(12'd54)) ? 1'b1 : 1'b0);

assign icmp_ln603_1_fu_586_p2 = ((tmp_15_fu_576_p4 == 9'd0) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_558_p2 = ((tmp_14_fu_548_p4 == 9'd0) ? 1'b1 : 1'b0);

assign ireg_fu_400_p1 = grp_fu_320_p1;

assign k_cast_fu_1108_p1 = k_reg_309;

assign m_axi_gmem4_ARADDR = sext_ln115_fu_333_p1;

assign m_axi_gmem4_ARBURST = 2'd0;

assign m_axi_gmem4_ARCACHE = 4'd0;

assign m_axi_gmem4_ARID = 1'd0;

assign m_axi_gmem4_ARLEN = 32'd3;

assign m_axi_gmem4_ARLOCK = 2'd0;

assign m_axi_gmem4_ARPROT = 3'd0;

assign m_axi_gmem4_ARQOS = 4'd0;

assign m_axi_gmem4_ARREGION = 4'd0;

assign m_axi_gmem4_ARSIZE = 3'd0;

assign m_axi_gmem4_ARUSER = 1'd0;

assign m_axi_gmem4_AWADDR = 64'd0;

assign m_axi_gmem4_AWBURST = 2'd0;

assign m_axi_gmem4_AWCACHE = 4'd0;

assign m_axi_gmem4_AWID = 1'd0;

assign m_axi_gmem4_AWLEN = 32'd0;

assign m_axi_gmem4_AWLOCK = 2'd0;

assign m_axi_gmem4_AWPROT = 3'd0;

assign m_axi_gmem4_AWQOS = 4'd0;

assign m_axi_gmem4_AWREGION = 4'd0;

assign m_axi_gmem4_AWSIZE = 3'd0;

assign m_axi_gmem4_AWUSER = 1'd0;

assign m_axi_gmem4_AWVALID = 1'b0;

assign m_axi_gmem4_BREADY = 1'b0;

assign m_axi_gmem4_WDATA = 64'd0;

assign m_axi_gmem4_WID = 1'd0;

assign m_axi_gmem4_WLAST = 1'b0;

assign m_axi_gmem4_WSTRB = 8'd0;

assign m_axi_gmem4_WUSER = 1'd0;

assign m_axi_gmem4_WVALID = 1'b0;

assign man_V_1_fu_468_p2 = (54'd0 - zext_ln569_fu_464_p1);

assign man_V_3_fu_474_p3 = ((isneg_reg_1368_pp0_iter5_reg[0:0] == 1'b1) ? man_V_1_fu_468_p2 : zext_ln569_fu_464_p1);

assign man_V_fu_457_p3 = {{1'd1}, {trunc_ln565_reg_1381_pp0_iter5_reg}};

assign or_ln581_1_fu_823_p2 = (or_ln582_1_reg_1527 | icmp_ln581_1_reg_1443_pp0_iter7_reg);

assign or_ln581_fu_765_p2 = (or_ln582_reg_1516 | icmp_ln581_reg_1431_pp0_iter7_reg);

assign or_ln582_1_fu_709_p2 = (icmp_ln582_1_reg_1455 | icmp_ln571_reg_1386_pp0_iter6_reg);

assign or_ln582_fu_689_p2 = (icmp_ln582_reg_1412_pp0_iter6_reg | icmp_ln571_reg_1386_pp0_iter6_reg);

assign out_1pix_V_1_fu_1257_p2 = (trunc_ln708_1_reg_1682 + zext_ln415_1_fu_1254_p1);

assign out_1pix_V_2_fu_1265_p2 = (trunc_ln708_2_reg_1692 + zext_ln415_2_fu_1262_p1);

assign out_1pix_V_fu_1249_p2 = (trunc_ln5_reg_1672 + zext_ln415_fu_1246_p1);

assign out_mat_470_din = {{{out_1pix_V_2_fu_1265_p2}, {out_1pix_V_1_fu_1257_p2}}, {out_1pix_V_fu_1249_p2}};

assign p_Result_1_fu_661_p3 = man_V_3_reg_1423[zext_ln591_1_fu_657_p1];

assign p_Result_s_fu_645_p3 = man_V_3_reg_1423[zext_ln591_fu_641_p1];

assign qb_1_fu_693_p3 = ((icmp_ln591_1_reg_1495[0:0] == 1'b1) ? isneg_reg_1368_pp0_iter6_reg : p_Result_1_fu_661_p3);

assign qb_fu_668_p3 = ((icmp_ln591_reg_1480[0:0] == 1'b1) ? isneg_reg_1368_pp0_iter6_reg : p_Result_s_fu_645_p3);

assign r_V_25_fu_1197_p1 = sext_ln1118_1_reg_1633;

assign r_V_26_fu_1223_p1 = sext_ln1118_2_reg_1643;

assign r_V_fu_1171_p1 = sext_ln1118_reg_1623;

assign ret_V_31_fu_1144_p2 = (zext_ln703_1_fu_1140_p1 - rhs_1_i_reg_1628);

assign ret_V_32_fu_1163_p2 = (zext_ln703_2_fu_1159_p1 - rhs_2_i_reg_1638);

assign ret_V_fu_1125_p2 = (zext_ln703_fu_1121_p1 - rhs_i_reg_1618);

assign rhs_1_i_fu_1086_p1 = alpha_reg_V_2_6_reg_264;

assign rhs_2_i_fu_1094_p1 = a_V_reg_252;

assign rhs_i_fu_1078_p1 = alpha_reg_V_2_11_reg_276;

assign select_ln581_1_fu_816_p3 = ((and_ln581_1_fu_811_p2[0:0] == 1'b1) ? add_ln415_1_reg_1522 : select_ln582_1_fu_799_p3);

assign select_ln581_fu_758_p3 = ((and_ln581_fu_753_p2[0:0] == 1'b1) ? add_ln415_reg_1505 : select_ln582_fu_741_p3);

assign select_ln582_1_fu_799_p3 = ((and_ln582_1_fu_795_p2[0:0] == 1'b1) ? trunc_ln583_reg_1461_pp0_iter7_reg : 8'd0);

assign select_ln582_fu_741_p3 = ((and_ln582_fu_737_p2[0:0] == 1'b1) ? trunc_ln583_reg_1461_pp0_iter7_reg : 8'd0);

assign select_ln585_1_fu_630_p3 = ((icmp_ln585_1_reg_1490[0:0] == 1'b1) ? trunc_ln586_2_fu_626_p1 : select_ln588_reg_1474);

assign select_ln585_fu_608_p3 = ((icmp_ln585_reg_1469[0:0] == 1'b1) ? trunc_ln586_1_fu_604_p1 : select_ln588_reg_1474);

assign select_ln588_fu_536_p3 = ((tmp_13_reg_1353_pp0_iter5_reg[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln603_1_fu_838_p3 = ((and_ln603_1_fu_833_p2[0:0] == 1'b1) ? shl_ln604_1_fu_732_p2 : select_ln581_1_fu_816_p3);

assign select_ln603_fu_780_p3 = ((and_ln603_fu_775_p2[0:0] == 1'b1) ? shl_ln604_fu_723_p2 : select_ln581_fu_758_p3);

assign sext_ln1118_1_fu_1090_p1 = beta_reg_V_2_6_reg_228;

assign sext_ln1118_2_fu_1098_p1 = b_V_2_reg_216;

assign sext_ln1118_fu_1082_p1 = beta_reg_V_2_10_reg_240;

assign sext_ln115_fu_333_p1 = $signed(trunc_ln_reg_1297);

assign sext_ln581_1_fu_716_p1 = sh_amt_1_reg_1449_pp0_iter7_reg;

assign sext_ln581_1cast_fu_728_p1 = sext_ln581_1_fu_716_p1[7:0];

assign sext_ln581_fu_713_p1 = sh_amt_reg_1437_pp0_iter7_reg;

assign sext_ln581cast_fu_719_p1 = sext_ln581_fu_713_p1[7:0];

assign sext_ln586_fu_614_p1 = sh_amt_1_reg_1449;

assign sh_amt_1_fu_513_p3 = ((icmp_ln581_1_fu_498_p2[0:0] == 1'b1) ? add_ln581_fu_503_p2 : sub_ln581_1_fu_508_p2);

assign sh_amt_fu_491_p3 = ((icmp_ln581_fu_481_p2[0:0] == 1'b1) ? F2_reg_1395 : sub_ln581_fu_486_p2);

assign shl_ln604_1_fu_732_p2 = trunc_ln583_reg_1461_pp0_iter7_reg << sext_ln581_1cast_fu_728_p1;

assign shl_ln604_fu_723_p2 = trunc_ln583_reg_1461_pp0_iter7_reg << sext_ln581cast_fu_719_p1;

assign sub_ln581_1_fu_508_p2 = (12'd4 - F2_reg_1395);

assign sub_ln581_fu_486_p2 = (12'd0 - F2_reg_1395);

assign tmp_14_fu_548_p4 = {{sh_amt_fu_491_p3[11:3]}};

assign tmp_15_fu_576_p4 = {{sh_amt_1_fu_513_p3[11:3]}};

assign trunc_ln115_fu_355_p1 = i_reg_205[0:0];

assign trunc_ln120_fu_374_p1 = ap_phi_mux_empty_87_phi_fu_303_p4[31:0];

assign trunc_ln122_fu_365_p1 = i_reg_205[1:0];

assign trunc_ln557_fu_404_p1 = ireg_fu_400_p1[62:0];

assign trunc_ln565_fu_426_p1 = ireg_fu_400_p1[51:0];

assign trunc_ln575_1_fu_453_p1 = F2_fu_438_p2[10:0];

assign trunc_ln575_fu_444_p1 = F2_fu_438_p2[5:0];

assign trunc_ln583_fu_526_p1 = man_V_3_fu_474_p3[7:0];

assign trunc_ln586_1_fu_604_p1 = ashr_ln586_fu_599_p2[7:0];

assign trunc_ln586_2_fu_626_p1 = ashr_ln586_1_fu_621_p2[7:0];

assign trunc_ln586_fu_592_p1 = sh_amt_reg_1437[10:0];

assign width_fu_1064_p1 = in_mat_cols_read_reg_1292[15:0];

assign x_1pix_V_1_fu_1130_p4 = {{resize_out_mat_469_dout[15:8]}};

assign x_1pix_V_2_fu_1149_p4 = {{resize_out_mat_469_dout[23:16]}};

assign x_1pix_V_fu_1117_p1 = resize_out_mat_469_dout[7:0];

assign xor_ln121_fu_889_p2 = (icmp_ln121_reg_1321_pp0_iter7_reg ^ 1'd1);

assign xor_ln571_fu_684_p2 = (icmp_ln571_reg_1386_pp0_iter6_reg ^ 1'd1);

assign xor_ln581_1_fu_827_p2 = (or_ln581_1_fu_823_p2 ^ 1'd1);

assign xor_ln581_fu_769_p2 = (or_ln581_fu_765_p2 ^ 1'd1);

assign xor_ln582_1_fu_806_p2 = (or_ln582_1_reg_1527 ^ 1'd1);

assign xor_ln582_fu_748_p2 = (or_ln582_reg_1516 ^ 1'd1);

assign zext_ln115_fu_369_p1 = ap_phi_mux_shiftreg_i_phi_fu_292_p4;

assign zext_ln415_1_fu_1254_p1 = tmp_10_reg_1687;

assign zext_ln415_2_fu_1262_p1 = tmp_11_reg_1697;

assign zext_ln415_3_fu_674_p1 = qb_fu_668_p3;

assign zext_ln415_4_fu_699_p1 = qb_1_fu_693_p3;

assign zext_ln415_fu_1246_p1 = tmp_reg_1677;

assign zext_ln455_fu_435_p1 = exp_tmp_reg_1375;

assign zext_ln569_fu_464_p1 = man_V_fu_457_p3;

assign zext_ln586_1_fu_617_p1 = $unsigned(sext_ln586_fu_614_p1);

assign zext_ln586_fu_595_p1 = trunc_ln586_fu_592_p1;

assign zext_ln591_1_fu_657_p1 = add_ln591_1_fu_652_p2;

assign zext_ln591_fu_641_p1 = add_ln591_fu_636_p2;

assign zext_ln703_1_fu_1140_p1 = x_1pix_V_1_fu_1130_p4;

assign zext_ln703_2_fu_1159_p1 = x_1pix_V_2_fu_1149_p4;

assign zext_ln703_fu_1121_p1 = x_1pix_V_fu_1117_p1;

always @ (posedge ap_clk) begin
    rhs_i_reg_1618[8] <= 1'b0;
    rhs_1_i_reg_1628[8] <= 1'b0;
    rhs_2_i_reg_1638[8] <= 1'b0;
end

endmodule //pp_pipeline_accel_preProcess_9_9_720_720_1_8_8_8_4_8_8_s

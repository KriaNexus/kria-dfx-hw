// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pp_pipeline_accel_Axi2Mat_Block_split35_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        stride_dout,
        stride_empty_n,
        stride_read,
        cols_dout,
        cols_empty_n,
        cols_read,
        stride_out_din,
        stride_out_full_n,
        stride_out_write,
        cols_out_din,
        cols_out_full_n,
        cols_out_write,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] stride_dout;
input   stride_empty_n;
output   stride_read;
input  [10:0] cols_dout;
input   cols_empty_n;
output   cols_read;
output  [31:0] stride_out_din;
input   stride_out_full_n;
output   stride_out_write;
output  [10:0] cols_out_din;
input   cols_out_full_n;
output   cols_out_write;
output  [21:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stride_read;
reg cols_read;
reg stride_out_write;
reg cols_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    stride_blk_n;
reg    cols_blk_n;
reg    stride_out_blk_n;
reg    cols_out_blk_n;
reg   [10:0] cols_read_reg_79;
wire   [0:0] icmp_ln1165_fu_60_p2;
reg   [0:0] icmp_ln1165_reg_84;
wire   [21:0] empty_fu_66_p1;
reg   [21:0] empty_reg_89;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
wire   [21:0] cols_cast2_i_fu_70_p1;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cols_read_reg_79 <= cols_dout;
        empty_reg_89 <= empty_fu_66_p1;
        icmp_ln1165_reg_84 <= icmp_ln1165_fu_60_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_blk_n = cols_empty_n;
    end else begin
        cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_out_blk_n = cols_out_full_n;
    end else begin
        cols_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (stride_out_full_n == 1'b0) | (cols_empty_n == 1'b0) | (stride_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_out_write = 1'b1;
    end else begin
        cols_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (stride_out_full_n == 1'b0) | (cols_empty_n == 1'b0) | (stride_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_read = 1'b1;
    end else begin
        cols_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stride_blk_n = stride_empty_n;
    end else begin
        stride_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stride_out_blk_n = stride_out_full_n;
    end else begin
        stride_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (stride_out_full_n == 1'b0) | (cols_empty_n == 1'b0) | (stride_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stride_out_write = 1'b1;
    end else begin
        stride_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (stride_out_full_n == 1'b0) | (cols_empty_n == 1'b0) | (stride_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        stride_read = 1'b1;
    end else begin
        stride_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (stride_out_full_n == 1'b0) | (cols_empty_n == 1'b0) | (stride_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (cols_out_full_n == 1'b0) | (stride_out_full_n == 1'b0) | (cols_empty_n == 1'b0) | (stride_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_return = ((icmp_ln1165_reg_84[0:0] == 1'b1) ? cols_cast2_i_fu_70_p1 : empty_reg_89);

assign cols_cast2_i_fu_70_p1 = cols_read_reg_79;

assign cols_out_din = cols_dout;

assign empty_fu_66_p1 = stride_dout[21:0];

assign icmp_ln1165_fu_60_p2 = ((stride_dout == 32'd4294967295) ? 1'b1 : 1'b0);

assign stride_out_din = stride_dout;

endmodule //pp_pipeline_accel_Axi2Mat_Block_split35_proc
